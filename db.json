{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1556155488980},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1556155488903},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1556155488459},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1556155487725},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1556155488481},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1556155336996},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1556155487563},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1556155455484},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1556155490796},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1556155488437},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1556155488881},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1556155488926},{"_id":"themes/next/_config.yml","hash":"d404243c3744bbd7c774fde3be001438b7cee9dc","modified":1556155488415},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1556155336975},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1556155490774},{"_id":"themes/next/hexo_config.yml","hash":"3573505d52cce6d40064b86c40a7a9c17b31fa42","modified":1556155488958},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1556155490742},{"_id":"source/_posts/LeetCode312.md","hash":"ee0271cf8b1a60d79f48e6b3a3056bff017a0161","modified":1556155644824},{"_id":"source/_posts/LeetCode496.md","hash":"8e00b9f5b063e54d48fabf16e293bbdc0dd63eab","modified":1556155645130},{"_id":"source/_posts/bilibili_download.md","hash":"0e5357ca26b65b3e9db6575a8aa154ee1233dd3b","modified":1556155645381},{"_id":"source/_posts/LeetCode382.md","hash":"b8f9b51dc557ca5762933390d1e89c4f84ff6245","modified":1556155645849},{"_id":"source/_posts/bitwise-operation-in-leetcode.md","hash":"ec6955c785aa1418c3b61b3591eee98525d2ed67","modified":1556155645274},{"_id":"source/_posts/fluent-python-11.md","hash":"4fe1d547f9447ae6a575f73f543eb516421e996d","modified":1556155644979},{"_id":"source/_posts/fluent-python-10.md","hash":"385739bcbdd3d302b747a06a7d276c413261a4fd","modified":1556155645107},{"_id":"source/_posts/fluent-python-13.md","hash":"088b48fb847694efba27775020312feff62ee740","modified":1556155644933},{"_id":"source/_posts/fluent-python-14.md","hash":"2ec004d711d3b293170f804dc65730eb950b3441","modified":1556155644792},{"_id":"source/_posts/fluent-python-2.md","hash":"e193f002ffbf26b5f230a17f91c0846389ebe1a1","modified":1556155645904},{"_id":"source/_posts/fluent-python-12.md","hash":"0f9d1013a7f721339e47cecd9bb210fce632d205","modified":1556155645927},{"_id":"source/_posts/fluent-python-3.md","hash":"2c734bed445157738dcc954ed92be14b86bfb006","modified":1556155644956},{"_id":"source/_posts/fluent-python-4.md","hash":"1197826d863ceec2b6f90421e392390a840e8f8c","modified":1556155645242},{"_id":"source/_posts/fluent-python-5.md","hash":"0c66c54614d2ed66430a542cfc03946576591387","modified":1556155645755},{"_id":"source/_posts/fluent-python-6-2.md","hash":"a51fbc995e0c2b6e6b1e88ef0206b129bd01d10c","modified":1556155645339},{"_id":"source/_posts/fluent-python-7.md","hash":"8b068284b5298070b23500fefa5f976e615c1c8f","modified":1556155644747},{"_id":"source/_posts/fluent-python-8.md","hash":"2bd0cf42341852dfb6b2e02e96130e5b190ceaec","modified":1556155645960},{"_id":"source/_posts/fluent-python-6-1.md","hash":"bafccc1ceda90886180a4a6ce98550cecb4c3c03","modified":1556155644888},{"_id":"source/_posts/fluent-python-9.md","hash":"4d3c9abb0efb22d130f14a06a1410013c5218077","modified":1556155645881},{"_id":"source/_posts/fluent-python-chapter1-note.md","hash":"c1ab263d21dc95eea4a9bc6558f5b34107cb4d17","modified":1556155644910},{"_id":"source/_posts/hello.md","hash":"8f978d4a2856697eb56f93b205a87243da5ed4d7","modified":1556155645981},{"_id":"source/_posts/how-network-connects-1.md","hash":"029fd9f7772b1037023ceb56776c9d75b1b63e52","modified":1556155644856},{"_id":"source/_posts/jetbrain_crack.md","hash":"12a710e96c3118c629793c0cbdcf05c74d8e8e81","modified":1556155645777},{"_id":"source/_posts/scrapy_crawler_01.md","hash":"a249beca9d165de0427cc27409f36f1876878e39","modified":1556155645032},{"_id":"source/_posts/some_python_tricks.md","hash":"eacf422e4f10964097eedd16446656b2e1bfa9a7","modified":1556155645828},{"_id":"source/_posts/ubuntu_tcp_bbr.md","hash":"dcc850fb166d62f3ddb6ea0ba6bdd6938a255d82","modified":1556155645000},{"_id":"source/about/index.md","hash":"a6fd991bf9cbd513de812bf99c24e6ca73dbd7cc","modified":1556155644564},{"_id":"source/categories/index.md","hash":"1c0f0cc4ba9e462897ca4b96e8afb55600f5c8f7","modified":1556155644628},{"_id":"source/tags/index.md","hash":"f6b400d4d2c585033e00122beab07becb16ec9d4","modified":1556155646060},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1556155490710},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1556155490633},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1556155490655},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1556155490687},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1556155337434},{"_id":"themes/next/.git/config","hash":"6cec67a32305c95864b8cfbebb61e681a8f092db","modified":1556155455430},{"_id":"themes/next/.git/COMMIT_EDITMSG","hash":"92beb40d1a86a6509c300d948703802d656b31c9","modified":1556155342925},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1556155337699},{"_id":"themes/next/.git/index","hash":"65357af40d7c87fae899fbe465e322733001b590","modified":1556155337342},{"_id":"themes/next/.git/packed-refs","hash":"8e36811256ee380c2c65692f1b8f8e77c5bc33c9","modified":1556155337364},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1556155487775},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1556155487829},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1556155488295},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1556155487852},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1556155488008},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1556155487874},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1556155488252},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1556155488273},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1556155487963},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1556155487942},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1556155487919},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1556155488318},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1556155487986},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1556155487805},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1556155487896},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1556155488029},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1556155457576},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1556155457467},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1556155455546},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1556155457864},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1556155457906},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1556155457554},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1556155457885},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1556155488848},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1556155488602},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1556155456770},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1556155458049},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1556155458016},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1556155457983},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556155487498},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1556155342782},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1556155342716},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1556155342803},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1556155342737},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1556155342892},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1556155342824},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1556155342847},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1556155342760},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1556155342870},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1556155455381},{"_id":"themes/next/.git/logs/HEAD","hash":"861b3bc0d20f8303b8b83c599ae9db624d24e264","modified":1556155337484},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1556155457499},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1556155457521},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1556155457833},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1556155457789},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1556155457811},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1556155456843},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1556155456890},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1556155456822},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1556155456932},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1556155456868},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1556155456957},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1556155456114},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1556155455907},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1556155455860},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1556155456135},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1556155456198},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1556155455886},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1556155456220},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1556155457391},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1556155457435},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1556155457132},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1556155457413},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1556155457367},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1556155457153},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1556155457345},{"_id":"themes/next/hexo_source/about/index.md","hash":"a6fd991bf9cbd513de812bf99c24e6ca73dbd7cc","modified":1556155489042},{"_id":"themes/next/hexo_source/categories/index.md","hash":"1c0f0cc4ba9e462897ca4b96e8afb55600f5c8f7","modified":1556155489092},{"_id":"themes/next/hexo_source/tags/index.md","hash":"f6b400d4d2c585033e00122beab07becb16ec9d4","modified":1556155490543},{"_id":"themes/next/hexo_source/_posts/LeetCode312.md","hash":"ee0271cf8b1a60d79f48e6b3a3056bff017a0161","modified":1556155489201},{"_id":"themes/next/hexo_source/_posts/LeetCode382.md","hash":"b8f9b51dc557ca5762933390d1e89c4f84ff6245","modified":1556155490032},{"_id":"themes/next/hexo_source/_posts/bilibili_download.md","hash":"0e5357ca26b65b3e9db6575a8aa154ee1233dd3b","modified":1556155489911},{"_id":"themes/next/hexo_source/_posts/LeetCode496.md","hash":"8e00b9f5b063e54d48fabf16e293bbdc0dd63eab","modified":1556155489800},{"_id":"themes/next/hexo_source/_posts/bitwise-operation-in-leetcode.md","hash":"ec6955c785aa1418c3b61b3591eee98525d2ed67","modified":1556155489855},{"_id":"themes/next/hexo_source/_posts/fluent-python-10.md","hash":"385739bcbdd3d302b747a06a7d276c413261a4fd","modified":1556155489768},{"_id":"themes/next/hexo_source/_posts/fluent-python-11.md","hash":"4fe1d547f9447ae6a575f73f543eb516421e996d","modified":1556155489394},{"_id":"themes/next/hexo_source/_posts/fluent-python-12.md","hash":"0f9d1013a7f721339e47cecd9bb210fce632d205","modified":1556155490430},{"_id":"themes/next/hexo_source/_posts/fluent-python-2.md","hash":"e193f002ffbf26b5f230a17f91c0846389ebe1a1","modified":1556155490171},{"_id":"themes/next/hexo_source/_posts/fluent-python-3.md","hash":"2c734bed445157738dcc954ed92be14b86bfb006","modified":1556155489339},{"_id":"themes/next/hexo_source/_posts/fluent-python-5.md","hash":"0c66c54614d2ed66430a542cfc03946576591387","modified":1556155489986},{"_id":"themes/next/hexo_source/_posts/fluent-python-6-1.md","hash":"bafccc1ceda90886180a4a6ce98550cecb4c3c03","modified":1556155489268},{"_id":"themes/next/hexo_source/_posts/fluent-python-4.md","hash":"1197826d863ceec2b6f90421e392390a840e8f8c","modified":1556155489833},{"_id":"themes/next/hexo_source/_posts/fluent-python-6-2.md","hash":"a51fbc995e0c2b6e6b1e88ef0206b129bd01d10c","modified":1556155489878},{"_id":"themes/next/hexo_source/_posts/fluent-python-8.md","hash":"2bd0cf42341852dfb6b2e02e96130e5b190ceaec","modified":1556155490490},{"_id":"themes/next/hexo_source/_posts/fluent-python-7.md","hash":"8b068284b5298070b23500fefa5f976e615c1c8f","modified":1556155489161},{"_id":"themes/next/hexo_source/_posts/fluent-python-chapter1-note.md","hash":"c1ab263d21dc95eea4a9bc6558f5b34107cb4d17","modified":1556155489289},{"_id":"themes/next/hexo_source/_posts/fluent-python-9.md","hash":"4d3c9abb0efb22d130f14a06a1410013c5218077","modified":1556155490096},{"_id":"themes/next/hexo_source/_posts/ubuntu_tcp_bbr.md","hash":"dcc850fb166d62f3ddb6ea0ba6bdd6938a255d82","modified":1556155489416},{"_id":"themes/next/hexo_source/_posts/how-network-connects-1.md","hash":"029fd9f7772b1037023ceb56776c9d75b1b63e52","modified":1556155489226},{"_id":"themes/next/hexo_source/_posts/jetbrain_crack.md","hash":"12a710e96c3118c629793c0cbdcf05c74d8e8e81","modified":1556155490010},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1556155488773},{"_id":"themes/next/hexo_source/_posts/scrapy_crawler_01.md","hash":"a249beca9d165de0427cc27409f36f1876878e39","modified":1556155489497},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1556155488794},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1556155488752},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1556155488678},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1556155488731},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1556155488699},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1556155488657},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1556155488816},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1556155488636},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1556155461659},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1556155462230},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1556155462166},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1556155461985},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1556155462209},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1556155462283},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1556155462029},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1556155462081},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1556155462060},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1556155462251},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1556155462145},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1556155461888},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1556155462123},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1556155462102},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1556155461911},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1556155461954},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1556155461932},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1556155462007},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1556155462187},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556155457723},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556155457703},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556155459303},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556155459019},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556155459283},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556155461681},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556155461723},{"_id":"themes/next/.git/objects/18/4662ef4be41f4cb5431b48a6aea5b24c8dbf67","hash":"a9be0387c74350e8be9d4970ef9876c81302323c","modified":1556155455184},{"_id":"themes/next/.git/objects/18/5f191b51d76bcd7623e2b360d6788afa7eaa1b","hash":"0f379c23954aa5c24a2e3e779a8da2109005f86e","modified":1556155455248},{"_id":"themes/next/.git/objects/20/72737539cc30a9e7953804bc4bb519e6a057ed","hash":"c62313c5dc2cf5e4a47b27ba06f1e20a68a6bcc7","modified":1556155454584},{"_id":"themes/next/.git/objects/0d/5731f2278fc6f280372cf7c02cf1029dd0d9fe","hash":"50c630c2b213610239ded21df6948049b8252fef","modified":1556155344297},{"_id":"themes/next/.git/objects/3f/01f734771fb736648536e8409792d77591f532","hash":"a5a696b8bb0523412230421b60114e6b3c904337","modified":1556155344502},{"_id":"themes/next/.git/objects/4d/a476f7dc72bb91b552dbe119b8933fc5391dbd","hash":"c4b2633f2affd1406adaa94f545106106bcfeaad","modified":1556155454409},{"_id":"themes/next/.git/objects/1c/6c81632e91527e3b43b91b420f08137f49cf64","hash":"547647e1c36e976e425f08405d4d9b5d0755798e","modified":1556155343895},{"_id":"themes/next/.git/objects/54/a1dcf9011b3197d33819c39e10906320a4a7a7","hash":"99222082d34d05b564b7bbd3dd7e637a30f4b974","modified":1556155455290},{"_id":"themes/next/.git/objects/52/e2e06734305094dadba223d498f1c72422e2e4","hash":"f137eb319e1bea4c40137cb51ab2a5ba60ee29a1","modified":1556155455083},{"_id":"themes/next/.git/objects/52/4f5936546296e5e5d264fe6ff55eeca0a62120","hash":"7a5f7cf78e7e9d185ebe6bb743e6f2e42fae7e15","modified":1556155455049},{"_id":"themes/next/.git/objects/61/8706e0558a064ad0460ee777fa777840d579fd","hash":"74ca35217a2a1545c4b638d9a14152e253095854","modified":1556155343939},{"_id":"themes/next/.git/objects/71/f6b8ecc87fe9be841535ec58e67543baaf7b1c","hash":"04c4a46f05908dc9b940955f414a74462ffa04c4","modified":1556155344210},{"_id":"themes/next/.git/objects/7a/a09b45ea724ff3a1da2d89194451976709335a","hash":"1255939d97c22f64e39b1dda44c26308d00cbea0","modified":1556155344167},{"_id":"themes/next/.git/objects/79/88f5b9365f5dc2241b6b454bab726120a1c6cb","hash":"b5268e472b96a613c7fb521f5ffcef6135c287fb","modified":1556155344101},{"_id":"themes/next/.git/objects/82/b32fcf8b44295e95a1d074d5dde4400ca085b0","hash":"b4d0e4bdacba392388d81e980967682a26f9a061","modified":1556155454943},{"_id":"themes/next/.git/objects/83/fba8c623d00e13d1a1ca42bf37b59cf8ddf97a","hash":"e4f5b7bc2e601163237b153f922ccb40d6599dcd","modified":1556155344042},{"_id":"themes/next/.git/objects/9a/6da10bde13efc72c82d6d8028ed3ee98b98c86","hash":"49c2c5b28d9c30646273b398141c4bc61d243b4b","modified":1556155343828},{"_id":"themes/next/.git/objects/89/8b9efb2339838829eb3b8f5d5196b18f142582","hash":"c1be08d03e51ebe154b33d26fe7af5c719173a0e","modified":1556155344459},{"_id":"themes/next/.git/objects/90/bc798318875aa88f69e067f0e9c954e08ba7ab","hash":"235ed7a305c7e6780f3865dd7dfa7e1bab648553","modified":1556155454638},{"_id":"themes/next/.git/objects/9d/a07de488f8f167acafec41072f41cdfd0df7b3","hash":"10cdfa6df09beb484ea74955980301282a1d60e0","modified":1556155344416},{"_id":"themes/next/.git/objects/b7/24392e26af028f920fd4df2e610b42c897d9e5","hash":"829b4eeb41a1e50baa943c4f1746e5fb7564c285","modified":1556155454340},{"_id":"themes/next/.git/objects/a0/eeecb3ccd6942ff52e8232e636b9e23f117766","hash":"775c4f20bbf7d6c5c3d29c74700a81d62bb2e4e0","modified":1556155454498},{"_id":"themes/next/.git/objects/c4/01646e70aed2bd8481a2b4288298e98d01160c","hash":"996ea9202846dc1705c52a88e7d434824814913e","modified":1556155454708},{"_id":"themes/next/.git/objects/dd/690ccc7ab7b577c2bf03ed963d6abc4a6d5fe4","hash":"dfc17805106382589d744e865d8a1c4115374512","modified":1556155343022},{"_id":"themes/next/.git/objects/e0/a252c927b3c6274030c75445ac3da5f4773066","hash":"4a300ca42db24fae1415ef1f582b57abb9222908","modified":1556155344348},{"_id":"themes/next/.git/objects/d7/a6e3498ee2490229ba25bcd831143850d3d9e8","hash":"636ba04736eaa0bd0734a37ac7cfe8488a58786a","modified":1556155454754},{"_id":"themes/next/.git/objects/c7/7aef006fe84cab4696e11776944884823c50bb","hash":"e90a34f11be6f368a5453a8739d8ea69d7eaf1e1","modified":1556155454831},{"_id":"themes/next/.git/objects/e0/ef531f436c42930f1a60befc388c566115578f","hash":"84f05d5d48f38f9cda8f51a5f40519f10d18f26d","modified":1556155344371},{"_id":"themes/next/.git/objects/e2/5629e5113ed11ca1dea30e838b8a2c2fdc6358","hash":"5a393fe7f56f2525664acdc7977bd73fc0334964","modified":1556155454890},{"_id":"themes/next/.git/objects/e1/e2063e1fc0a36f16d5bed3e3f6fcc72bb474f6","hash":"e8b1ead2dfcc1b4475842690504e19e09e169b8d","modified":1556155343999},{"_id":"themes/next/.git/objects/e3/fbaf9ee000addf2210d5a5f5f18c0d522bb10d","hash":"4e0846796c45ed194156c413645f7c22c2412942","modified":1556155344254},{"_id":"themes/next/.git/objects/fb/d3ce6fcb30968a40e177eee2e5704e1799b6d7","hash":"cb9732845857efa879200e3465d1bce37ff9eb77","modified":1556155455140},{"_id":"themes/next/.git/objects/f7/ee33c3bebf11299430cc96faadd3e384fa313a","hash":"08214907714dd3289fb43bcd1190923fe3013327","modified":1556155343083},{"_id":"themes/next/.git/refs/heads/master","hash":"738ef243e87abee5b7d346518b4ca742b0af4f1d","modified":1556155337759},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1556155457631},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1556155457692},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1556155456614},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1556155457757},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1556155456706},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1556155456514},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1556155456536},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1556155456456},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1556155456728},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1556155456580},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1556155456636},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1556155456397},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1556155456419},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1556155456478},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1556155456658},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1556155456558},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1556155455720},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1556155455828},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1556155455785},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1556155455670},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1556155455763},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1556155455637},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1556155455806},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1556155455692},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1556155455741},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1556155455997},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1556155455941},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1556155455974},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1556155456167},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1556155457313},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1556155457292},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1556155457197},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1556155457241},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1556155457219},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1556155457029},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1556155457055},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1556155457100},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1556155457077},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"df4152d3194e337f29cb1a1a08259a2fdb5b1421","modified":1556155458988},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1556155459339},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1556155459361},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1556155459272},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1556155461777},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1556155461754},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1556155461712},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1556155461819},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1556155462567},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1556155462505},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1556155462525},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1556155462484},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1556155462360},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1556155462586},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1556155462463},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1556155462606},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1556155462380},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1556155462546},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1556155462401},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1556155486762},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1556155464690},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1556155483069},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1556155483047},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1556155483343},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1556155483509},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1556155483320},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1556155482057},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1556155483299},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1556155474023},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1556155464901},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1556155465516},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1556155465475},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1556155465495},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1556155487449},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1556155483247},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1556155483183},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1556155483226},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1556155483130},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1556155483204},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1556155483161},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1556155479925},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1556155479419},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1556155479277},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1556155479460},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1556155479044},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1556155479299},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1556155479236},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1556155479320},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1556155479190},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1556155479168},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1556155479090},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1556155479213},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1556155479068},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1556155479012},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1556155479342},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1556155479146},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1556155479123},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1556155478601},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1556155474297},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1556155478942},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1556155463906},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1556155464628},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1556155463873},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1556155464010},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1556155464117},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"861b3bc0d20f8303b8b83c599ae9db624d24e264","modified":1556155337548},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1556155342607},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"738ef243e87abee5b7d346518b4ca742b0af4f1d","modified":1556155337829},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1556155456073},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1556155456052},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1556155461455},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1556155460233},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1556155460254},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1556155460276},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1556155460553},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1556155460575},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1556155461257},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1556155461617},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1556155461498},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1556155459463},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1556155461573},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1556155461595},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1556155461552},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1556155461520},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1556155458372},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1556155458897},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1556155458339},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1556155458460},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1556155458438},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1556155458306},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1556155458483},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1556155458272},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1556155458779},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1556155458802},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1556155458823},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1556155458699},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1556155458844},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1556155458568},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1556155458612},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1556155458634},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1556155458546},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1556155458590},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1556155458655},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1556155462432},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1556155482006},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1556155480787},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1556155482885},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1556155483014},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1556155482151},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1556155482982},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1556155482174},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1556155482960},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1556155482713},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1556155482938},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1556155482691},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1556155483407},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1556155483457},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1556155465443},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1556155464957},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1556155465019},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1556155464785},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1556155464832},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1556155481712},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1556155480642},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1556155487428},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1556155468662},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1556155472947},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1556155463830},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"8d73211b7a3be9cd8f2195755f2d946bc8be693d","modified":1556155337602},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"a097cf99bb7d9e75840cd37967e48bc7363704f9","modified":1556155337624},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1556155461340},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1556155461361},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1556155461383},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1556155461403},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1556155461425},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1556155459792},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1556155459728},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1556155459750},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1556155459771},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1556155459814},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1556155460202},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1556155460159},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1556155460180},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1556155461290},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1556155460327},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"1c1e7501f8e0b99ab9a0e82897dc44d36c8ceb54","modified":1556155460371},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1556155460392},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1556155460501},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1556155460457},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1556155460349},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1556155460522},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1556155460414},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1556155460435},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1556155460479},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1556155460631},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1556155460889},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1556155460911},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1556155460770},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1556155460748},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1556155460853},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1556155460814},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1556155460727},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1556155460609},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1556155460652},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1556155460792},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1556155460933},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1556155460675},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1556155460956},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1556155461051},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1556155460696},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1556155461075},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1556155461139},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1556155461096},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1556155461203},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1556155461161},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1556155461117},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1556155461224},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1556155461182},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1556155460022},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1556155460086},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1556155460064},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1556155459955},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1556155460000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1556155460043},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1556155460111},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1556155459977},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1556155459913},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1556155459880},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1556155458222},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1556155458406},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1556155458748},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1556155480820},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1556155480841},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1556155481369},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1556155481265},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1556155481317},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1556155482853},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1556155482811},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1556155482767},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1556155482789},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1556155482746},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1556155482832},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1556155473992},{"_id":"themes/next/.git/objects/pack/pack-30a62047db825c29862367a57fb4121cf6d92feb.idx","hash":"8f0c72499de301e3bca267f0bdd3568f561f88dc","modified":1556155454262},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1556155468137},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1556155466854},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1556155486741},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1556155478439},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1556155472165},{"_id":"themes/next/.git/objects/pack/pack-30a62047db825c29862367a57fb4121cf6d92feb.pack","hash":"9ad9de360c43a67068d2438f2c83a469a48d8d74","modified":1556155451766}],"Category":[{"name":"Leetcode","_id":"cjuw5c69j0004dhyffn4n0os5"},{"name":"读书笔记","_id":"cjuw5c6a2000jdhyfx9f7pypw"},{"name":"生活记录","_id":"cjuw5c6ac0019dhyf5umhejhp"},{"name":"技术分享","_id":"cjuw5c6ac001fdhyf2efuz51f"},{"name":"随手摘录","_id":"cjuw5c6gt0040dhyfabvqbn80"}],"Data":[],"Page":[{"title":"about","date":"2018-07-29T10:39:42.000Z","_content":"\n\n- 2016年毕业于老和山职业技术学院磨玻璃专业\n\n- 毕业后从事写代码的工作至今\n\n- Python 开发，爬虫，Django, 运维\n\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-07-29 18:39:42\n---\n\n\n- 2016年毕业于老和山职业技术学院磨玻璃专业\n\n- 毕业后从事写代码的工作至今\n\n- Python 开发，爬虫，Django, 运维\n\n\n","updated":"2019-04-25T01:27:24.564Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjuw5c69f0001dhyfhdg3b7ze","content":"<ul>\n<li><p>2016年毕业于老和山职业技术学院磨玻璃专业</p>\n</li>\n<li><p>毕业后从事写代码的工作至今</p>\n</li>\n<li><p>Python 开发，爬虫，Django, 运维</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>2016年毕业于老和山职业技术学院磨玻璃专业</p>\n</li>\n<li><p>毕业后从事写代码的工作至今</p>\n</li>\n<li><p>Python 开发，爬虫，Django, 运维</p>\n</li>\n</ul>\n"},{"title":"categories","date":"2018-07-29T10:39:32.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-07-29 18:39:32\ntype: \"categories\"\n---\n","updated":"2019-04-25T01:27:24.628Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjuw5c69h0003dhyf1fz4lxkw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-07-29T10:36:45.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-07-29 18:36:45\ntype: \"tags\"\n---\n","updated":"2019-04-25T01:27:26.060Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjuw5c6g40036dhyfkhf5p5y0","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"LeetCode312 分治法和动态规划","date":"2017-03-09T07:24:09.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/leetcode_logo.png?raw=true"],"toc":true,"comment":true,"_content":"\n最近开始渐渐忙了起来，加上按Acceptance做题，后面题目也开始有点复杂了，所以只能勉强维持一天做一道题。今天下午差不多把这周任务完成了，所以稍微划下水，写一下这两天碰到的一个比较复杂的题目（对我来说=。=\n\n题目如下：\n\n> **312**. Burst Balloons   \nTotal Accepted: 23001   \nTotal Submissions: 54845   \nDifficulty: Hard   \nContributors: Admin   \nGiven n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst balloon i you will get nums[left] * nums[i] * nums[right] coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent.\n\n> Find the maximum coins you can collect by bursting the balloons wisely.\n\n> Note: \n> (1) You may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.\n> (2) 0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100\n\n> Example:\n\n> Given [3, 1, 5, 8]\n\n> Return 167\n\n>    nums = [3,1,5,8] --> [3,5,8] -->   [3,8]   -->  [8]  --> []\n   coins =  3 * 1 * 5      +  3 * 5 * 8    +  1 * 3 * 8      + 1 * 8 * 1   = 167\n   \n\n1. 看到这个题目，最简单的想法是用回溯法，使用回溯法一共需要n步，第i步需要尝试选出的数有n-i个,这样我们得到的时间复杂度是O(n!)，非常大，所以这个方法没有尝试的必要。\n我们需要思考的是这个方法中有没有冗余的步骤可以简化。\n\n2. 我们可以注意到，每次选择爆破的气球，与上一步选择爆破的气球是没有关系的，这满足了动态规划“无后效性”的特点。   \n\t这样我们可以用从下到上的动态规划来解决这个问题，即计算小长度数组的最大积分值，通过小长度的数组的累加来计算整个数组的最大积分值。这样如果计算长度为k的子数组，需要需要找到的不同情况是C(k, n),需要从长度为1找到长度为n，这样最坏的情况也是O(n!)（。。。。。）   \n虽然说没好多少，但是至少稍微简化了一点时间复杂度。。。。\n\n3. 在用上面的这个思路思考问题的时候，又可以注意到，子问题与父问题的解决方式非常类似，可以考虑用**分治法**递归的解决这个问题。   \n\t说到分治，我们最直观的想到的使用分治的方法是:当一个气球爆裂后，它两边的气球串分别形成爆裂前气球串的子问题。但是分治法要求的是**相互独立的子问题**，而照上面这种方法，由于爆破后，左边气球串的最后一个气球和右边气球串的最左边一个气球相邻了，这样导致的结果是分离出的两个子问题相互影响了，所以这种分治是不可行的。\n\t如果我们逆向思维一下，找到**最后**爆破的气球，再把它的两边分成两个子问题来解决，可不可行呢？由于最后一个爆破的气球，爆破时长度为1，根据题目定义左右都用1来填充，这样由于额外填充的1，使得这个气球并不会影响子问题的划分，这样的分治是可行的。\n\n4. 最后我们选择了由下而上的**动态规划**和**分治法**解决题目所提到的问题。代码如下：\n\n```python\nclass Solution(object):\n    def maxCoins(self, nums):\n    \t#增加气球串的边界\n        coins = [1] + [num for num in nums if num] + [1]\n        n = len(coins)\n        dp = [[0] * n for _ in xrange(n)]\n\n        for l in xrange(2, n):\n            #计算每个长度为l的子序列\n            for left in xrange(0, n-l):\n                right = left + l\n                for j in xrange(left+1, right):\n                #由于是自下而上的动态规划，所以免去了分治法中使用递归解决子问题这一步\n                #coins[left] * coins[j] * coins[right] 这个表达式是指爆破最后一个气球产生的运算\n                    dp[left][right] = max(dp[left][right], dp[left][j] + \\\n                            dp[j][right] + coins[left] * coins[j] * coins[right])\n        return dp[0][n-1]\n```\n\n这样一个比较复杂的问题就迎刃而解了，这样做的时间复杂度是O(n^3)。   \n总结起来就是：非常暴力的方法 -->简化冗余--> 不那么暴力的方法 -->简化冗余--> 比较简单的方法 -->简化冗余--> 很好的方法   \n其实这个问题我想了很久都没想出来，最后在discuss里看到这个比较好的解决方式，这个问题的思考过程也是非常值得借鉴的，所以在这里记录一下,也尽我所能讲的比较明白一些。\n\n\n(溜了","source":"_posts/LeetCode312.md","raw":"title: LeetCode312 分治法和动态规划\ndate: 2017-03-09 15:24:09\ntags:\n- Python\n- Divide and Conquer\n- Dynamic Programming\ncategories:\n- Leetcode\t\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/leetcode_logo.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n最近开始渐渐忙了起来，加上按Acceptance做题，后面题目也开始有点复杂了，所以只能勉强维持一天做一道题。今天下午差不多把这周任务完成了，所以稍微划下水，写一下这两天碰到的一个比较复杂的题目（对我来说=。=\n\n题目如下：\n\n> **312**. Burst Balloons   \nTotal Accepted: 23001   \nTotal Submissions: 54845   \nDifficulty: Hard   \nContributors: Admin   \nGiven n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst balloon i you will get nums[left] * nums[i] * nums[right] coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent.\n\n> Find the maximum coins you can collect by bursting the balloons wisely.\n\n> Note: \n> (1) You may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.\n> (2) 0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100\n\n> Example:\n\n> Given [3, 1, 5, 8]\n\n> Return 167\n\n>    nums = [3,1,5,8] --> [3,5,8] -->   [3,8]   -->  [8]  --> []\n   coins =  3 * 1 * 5      +  3 * 5 * 8    +  1 * 3 * 8      + 1 * 8 * 1   = 167\n   \n\n1. 看到这个题目，最简单的想法是用回溯法，使用回溯法一共需要n步，第i步需要尝试选出的数有n-i个,这样我们得到的时间复杂度是O(n!)，非常大，所以这个方法没有尝试的必要。\n我们需要思考的是这个方法中有没有冗余的步骤可以简化。\n\n2. 我们可以注意到，每次选择爆破的气球，与上一步选择爆破的气球是没有关系的，这满足了动态规划“无后效性”的特点。   \n\t这样我们可以用从下到上的动态规划来解决这个问题，即计算小长度数组的最大积分值，通过小长度的数组的累加来计算整个数组的最大积分值。这样如果计算长度为k的子数组，需要需要找到的不同情况是C(k, n),需要从长度为1找到长度为n，这样最坏的情况也是O(n!)（。。。。。）   \n虽然说没好多少，但是至少稍微简化了一点时间复杂度。。。。\n\n3. 在用上面的这个思路思考问题的时候，又可以注意到，子问题与父问题的解决方式非常类似，可以考虑用**分治法**递归的解决这个问题。   \n\t说到分治，我们最直观的想到的使用分治的方法是:当一个气球爆裂后，它两边的气球串分别形成爆裂前气球串的子问题。但是分治法要求的是**相互独立的子问题**，而照上面这种方法，由于爆破后，左边气球串的最后一个气球和右边气球串的最左边一个气球相邻了，这样导致的结果是分离出的两个子问题相互影响了，所以这种分治是不可行的。\n\t如果我们逆向思维一下，找到**最后**爆破的气球，再把它的两边分成两个子问题来解决，可不可行呢？由于最后一个爆破的气球，爆破时长度为1，根据题目定义左右都用1来填充，这样由于额外填充的1，使得这个气球并不会影响子问题的划分，这样的分治是可行的。\n\n4. 最后我们选择了由下而上的**动态规划**和**分治法**解决题目所提到的问题。代码如下：\n\n```python\nclass Solution(object):\n    def maxCoins(self, nums):\n    \t#增加气球串的边界\n        coins = [1] + [num for num in nums if num] + [1]\n        n = len(coins)\n        dp = [[0] * n for _ in xrange(n)]\n\n        for l in xrange(2, n):\n            #计算每个长度为l的子序列\n            for left in xrange(0, n-l):\n                right = left + l\n                for j in xrange(left+1, right):\n                #由于是自下而上的动态规划，所以免去了分治法中使用递归解决子问题这一步\n                #coins[left] * coins[j] * coins[right] 这个表达式是指爆破最后一个气球产生的运算\n                    dp[left][right] = max(dp[left][right], dp[left][j] + \\\n                            dp[j][right] + coins[left] * coins[j] * coins[right])\n        return dp[0][n-1]\n```\n\n这样一个比较复杂的问题就迎刃而解了，这样做的时间复杂度是O(n^3)。   \n总结起来就是：非常暴力的方法 -->简化冗余--> 不那么暴力的方法 -->简化冗余--> 比较简单的方法 -->简化冗余--> 很好的方法   \n其实这个问题我想了很久都没想出来，最后在discuss里看到这个比较好的解决方式，这个问题的思考过程也是非常值得借鉴的，所以在这里记录一下,也尽我所能讲的比较明白一些。\n\n\n(溜了","slug":"LeetCode312","published":1,"updated":"2019-04-25T01:27:24.824Z","comments":1,"layout":"post","link":"","_id":"cjuw5c69a0000dhyff6vcxx3k","content":"<p>最近开始渐渐忙了起来，加上按Acceptance做题，后面题目也开始有点复杂了，所以只能勉强维持一天做一道题。今天下午差不多把这周任务完成了，所以稍微划下水，写一下这两天碰到的一个比较复杂的题目（对我来说=。=</p>\n<p>题目如下：</p>\n<blockquote>\n<p><strong>312</strong>. Burst Balloons<br>Total Accepted: 23001<br>Total Submissions: 54845<br>Difficulty: Hard<br>Contributors: Admin<br>Given n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst balloon i you will get nums[left] <em> nums[i] </em> nums[right] coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent.</p>\n</blockquote>\n<blockquote>\n<p>Find the maximum coins you can collect by bursting the balloons wisely.</p>\n</blockquote>\n<blockquote>\n<p>Note:<br>(1) You may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.<br>(2) 0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100</p>\n</blockquote>\n<blockquote>\n<p>Example:</p>\n</blockquote>\n<blockquote>\n<p>Given [3, 1, 5, 8]</p>\n</blockquote>\n<blockquote>\n<p>Return 167</p>\n</blockquote>\n<blockquote>\n<p>   nums = [3,1,5,8] –&gt; [3,5,8] –&gt;   [3,8]   –&gt;  [8]  –&gt; []<br>   coins =  3 <em> 1 </em> 5      +  3 <em> 5 </em> 8    +  1 <em> 3 </em> 8      + 1 <em> 8 </em> 1   = 167</p>\n</blockquote>\n<ol>\n<li><p>看到这个题目，最简单的想法是用回溯法，使用回溯法一共需要n步，第i步需要尝试选出的数有n-i个,这样我们得到的时间复杂度是O(n!)，非常大，所以这个方法没有尝试的必要。<br>我们需要思考的是这个方法中有没有冗余的步骤可以简化。</p>\n</li>\n<li><p>我们可以注意到，每次选择爆破的气球，与上一步选择爆破的气球是没有关系的，这满足了动态规划“无后效性”的特点。<br> 这样我们可以用从下到上的动态规划来解决这个问题，即计算小长度数组的最大积分值，通过小长度的数组的累加来计算整个数组的最大积分值。这样如果计算长度为k的子数组，需要需要找到的不同情况是C(k, n),需要从长度为1找到长度为n，这样最坏的情况也是O(n!)（。。。。。）<br>虽然说没好多少，但是至少稍微简化了一点时间复杂度。。。。</p>\n</li>\n<li><p>在用上面的这个思路思考问题的时候，又可以注意到，子问题与父问题的解决方式非常类似，可以考虑用<strong>分治法</strong>递归的解决这个问题。<br> 说到分治，我们最直观的想到的使用分治的方法是:当一个气球爆裂后，它两边的气球串分别形成爆裂前气球串的子问题。但是分治法要求的是<strong>相互独立的子问题</strong>，而照上面这种方法，由于爆破后，左边气球串的最后一个气球和右边气球串的最左边一个气球相邻了，这样导致的结果是分离出的两个子问题相互影响了，所以这种分治是不可行的。<br> 如果我们逆向思维一下，找到<strong>最后</strong>爆破的气球，再把它的两边分成两个子问题来解决，可不可行呢？由于最后一个爆破的气球，爆破时长度为1，根据题目定义左右都用1来填充，这样由于额外填充的1，使得这个气球并不会影响子问题的划分，这样的分治是可行的。</p>\n</li>\n<li><p>最后我们选择了由下而上的<strong>动态规划</strong>和<strong>分治法</strong>解决题目所提到的问题。代码如下：</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxCoins</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">    \t<span class=\"comment\">#增加气球串的边界</span></span><br><span class=\"line\">        coins = [<span class=\"number\">1</span>] + [num <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums <span class=\"keyword\">if</span> num] + [<span class=\"number\">1</span>]</span><br><span class=\"line\">        n = len(coins)</span><br><span class=\"line\">        dp = [[<span class=\"number\">0</span>] * n <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> xrange(n)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> xrange(<span class=\"number\">2</span>, n):</span><br><span class=\"line\">            <span class=\"comment\">#计算每个长度为l的子序列</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> left <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, n-l):</span><br><span class=\"line\">                right = left + l</span><br><span class=\"line\">                <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> xrange(left+<span class=\"number\">1</span>, right):</span><br><span class=\"line\">                <span class=\"comment\">#由于是自下而上的动态规划，所以免去了分治法中使用递归解决子问题这一步</span></span><br><span class=\"line\">                <span class=\"comment\">#coins[left] * coins[j] * coins[right] 这个表达式是指爆破最后一个气球产生的运算</span></span><br><span class=\"line\">                    dp[left][right] = max(dp[left][right], dp[left][j] + \\</span><br><span class=\"line\">                            dp[j][right] + coins[left] * coins[j] * coins[right])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][n<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<p>这样一个比较复杂的问题就迎刃而解了，这样做的时间复杂度是O(n^3)。<br>总结起来就是：非常暴力的方法 –&gt;简化冗余–&gt; 不那么暴力的方法 –&gt;简化冗余–&gt; 比较简单的方法 –&gt;简化冗余–&gt; 很好的方法<br>其实这个问题我想了很久都没想出来，最后在discuss里看到这个比较好的解决方式，这个问题的思考过程也是非常值得借鉴的，所以在这里记录一下,也尽我所能讲的比较明白一些。</p>\n<p>(溜了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近开始渐渐忙了起来，加上按Acceptance做题，后面题目也开始有点复杂了，所以只能勉强维持一天做一道题。今天下午差不多把这周任务完成了，所以稍微划下水，写一下这两天碰到的一个比较复杂的题目（对我来说=。=</p>\n<p>题目如下：</p>\n<blockquote>\n<p><strong>312</strong>. Burst Balloons<br>Total Accepted: 23001<br>Total Submissions: 54845<br>Difficulty: Hard<br>Contributors: Admin<br>Given n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst balloon i you will get nums[left] <em> nums[i] </em> nums[right] coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent.</p>\n</blockquote>\n<blockquote>\n<p>Find the maximum coins you can collect by bursting the balloons wisely.</p>\n</blockquote>\n<blockquote>\n<p>Note:<br>(1) You may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.<br>(2) 0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100</p>\n</blockquote>\n<blockquote>\n<p>Example:</p>\n</blockquote>\n<blockquote>\n<p>Given [3, 1, 5, 8]</p>\n</blockquote>\n<blockquote>\n<p>Return 167</p>\n</blockquote>\n<blockquote>\n<p>   nums = [3,1,5,8] –&gt; [3,5,8] –&gt;   [3,8]   –&gt;  [8]  –&gt; []<br>   coins =  3 <em> 1 </em> 5      +  3 <em> 5 </em> 8    +  1 <em> 3 </em> 8      + 1 <em> 8 </em> 1   = 167</p>\n</blockquote>\n<ol>\n<li><p>看到这个题目，最简单的想法是用回溯法，使用回溯法一共需要n步，第i步需要尝试选出的数有n-i个,这样我们得到的时间复杂度是O(n!)，非常大，所以这个方法没有尝试的必要。<br>我们需要思考的是这个方法中有没有冗余的步骤可以简化。</p>\n</li>\n<li><p>我们可以注意到，每次选择爆破的气球，与上一步选择爆破的气球是没有关系的，这满足了动态规划“无后效性”的特点。<br> 这样我们可以用从下到上的动态规划来解决这个问题，即计算小长度数组的最大积分值，通过小长度的数组的累加来计算整个数组的最大积分值。这样如果计算长度为k的子数组，需要需要找到的不同情况是C(k, n),需要从长度为1找到长度为n，这样最坏的情况也是O(n!)（。。。。。）<br>虽然说没好多少，但是至少稍微简化了一点时间复杂度。。。。</p>\n</li>\n<li><p>在用上面的这个思路思考问题的时候，又可以注意到，子问题与父问题的解决方式非常类似，可以考虑用<strong>分治法</strong>递归的解决这个问题。<br> 说到分治，我们最直观的想到的使用分治的方法是:当一个气球爆裂后，它两边的气球串分别形成爆裂前气球串的子问题。但是分治法要求的是<strong>相互独立的子问题</strong>，而照上面这种方法，由于爆破后，左边气球串的最后一个气球和右边气球串的最左边一个气球相邻了，这样导致的结果是分离出的两个子问题相互影响了，所以这种分治是不可行的。<br> 如果我们逆向思维一下，找到<strong>最后</strong>爆破的气球，再把它的两边分成两个子问题来解决，可不可行呢？由于最后一个爆破的气球，爆破时长度为1，根据题目定义左右都用1来填充，这样由于额外填充的1，使得这个气球并不会影响子问题的划分，这样的分治是可行的。</p>\n</li>\n<li><p>最后我们选择了由下而上的<strong>动态规划</strong>和<strong>分治法</strong>解决题目所提到的问题。代码如下：</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxCoins</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">    \t<span class=\"comment\">#增加气球串的边界</span></span><br><span class=\"line\">        coins = [<span class=\"number\">1</span>] + [num <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums <span class=\"keyword\">if</span> num] + [<span class=\"number\">1</span>]</span><br><span class=\"line\">        n = len(coins)</span><br><span class=\"line\">        dp = [[<span class=\"number\">0</span>] * n <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> xrange(n)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> xrange(<span class=\"number\">2</span>, n):</span><br><span class=\"line\">            <span class=\"comment\">#计算每个长度为l的子序列</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> left <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, n-l):</span><br><span class=\"line\">                right = left + l</span><br><span class=\"line\">                <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> xrange(left+<span class=\"number\">1</span>, right):</span><br><span class=\"line\">                <span class=\"comment\">#由于是自下而上的动态规划，所以免去了分治法中使用递归解决子问题这一步</span></span><br><span class=\"line\">                <span class=\"comment\">#coins[left] * coins[j] * coins[right] 这个表达式是指爆破最后一个气球产生的运算</span></span><br><span class=\"line\">                    dp[left][right] = max(dp[left][right], dp[left][j] + \\</span><br><span class=\"line\">                            dp[j][right] + coins[left] * coins[j] * coins[right])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][n<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<p>这样一个比较复杂的问题就迎刃而解了，这样做的时间复杂度是O(n^3)。<br>总结起来就是：非常暴力的方法 –&gt;简化冗余–&gt; 不那么暴力的方法 –&gt;简化冗余–&gt; 比较简单的方法 –&gt;简化冗余–&gt; 很好的方法<br>其实这个问题我想了很久都没想出来，最后在discuss里看到这个比较好的解决方式，这个问题的思考过程也是非常值得借鉴的，所以在这里记录一下,也尽我所能讲的比较明白一些。</p>\n<p>(溜了</p>\n"},{"title":"LeetCode496 使用栈(stack)简化时间复杂度","date":"2017-02-10T04:56:16.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/leetcode_logo.png?raw=true"],"toc":true,"comment":true,"_content":"\n## LeetCode 496. Next Greater Element I使用栈(stack)简化时间复杂度\n\n这道题的描述如下：\n\n> **496**. Next Greater Element I  \nDescription  Submission  Solutions  Add to List  \nTotal Accepted: 3176  \nTotal Submissions: 5284  \nDifficulty: Easy  \nContributors: love\\_FDU\\_llp  \nYou are given two arrays (without duplicates) nums1  and nums2 where nums1’s elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2.  \n\n>The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.\n\n>Example 1:  \nInput: nums1 = [4,1,2], nums2 = [1,3,4,2].  \nOutput: [-1,3,-1]  \nExplanation:  \n    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.  \n    For number 1 in the first array, the next greater number for it in the second array is 3.  \n    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.  \nExample 2:  \nInput: nums1 = [2,4], nums2 = [1,2,3,4].  \nOutput: [3,-1]  \nExplanation:  \n    For number 2 in the first array, the next greater number for it in the second array is 3.  \n    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.  \nNote:  \nAll elements in nums1 and nums2 are unique.  \nThe length of both nums1 and nums2 would not exceed 1000.  \n\n这里我们假设nums1的长度是m，nums2的长度是n。\n看到题目第一眼，首先想到的是一个O(m*n)的解法：  \n**解法1**：   \n```python\ndef nextGreaterElement(self, findNums, nums):\n    \"\"\"\n    :type findNums: List[int]\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    res = []\n    length = len(nums)\n    for i in findNums:\n        j, flag = 0, False\n        while j < length:\n            if i == nums[j] and not flag:\n                flag = True\n            if flag:\n                if j < length-1 and nums[j+1] > i:\n                    res.append(nums[j+1])\n                    flag = False\n                    break\n            if j == length - 1:\n                res.append(-1)\n                flag = False\n            j += 1\n    return res\n```\n这个解法的想法比较直接，对nums1里的每个数，都在nums2中找到这个数，然后在接下来的数中找第一个比它大的数放到结果List里，如果没找到就把-1放进去。   \n这个虽然也能AC把，但是runtime只能击败2.47%的人.....这样的结果明显有时间复杂度更低的解法。\n\n然后我就去Discuss里面找了....  \n果然.....   \n被我找到了一个O(m+n)的解法，很巧妙地用到了栈。  \n**解法2**：  \n\n```python\ndef nextGreaterElement(self, findNums, nums):\n    \"\"\"\n    :type findNums: List[int]\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    d = {}\n    ans = [-1] * len(findNums)\n    for i, num in enumerate(findNums):\n        d[num] = i\n    stack = []\n    for num in nums:\n        while stack and stack[-1] < num:\n            top = stack.pop()\n            if top in d:\n                ans[d[top]] = num\n        stack.append(num)\n    return ans\n```\n做一个简单的解释：\n\n- 我们用一个字典d存储所有元素的index。\n- 用一个与nums1等长的数组ans表示结果(并将每个元素初始化为-1)\n- 假设我们有一个前面所有元素都递减的数列，最后一个数比前面所有的数都大，比如[5, 4, 3, 2, 1, 6]，那么6就是前面这些数的\"Next Greater Element\" 。\n- 我们用一个栈来放置一个递减的数列。\n- 每当即将入栈的一个数比栈顶的数大，我们将栈顶的数弹出，一直到即将入栈的数比栈顶的数小，这个过程中弹出的数的\"Next Greater Element\"就是这个入栈的数。比如：当前栈是[6,4,3,2],即将入栈的数是5，那么2，3，4会被依次弹出, 并且这三个数的\"Next Greater Element\"是5\n- 我们按照上面描述的规则将nums2中的元素依次入栈，在出栈的元素中找nums1中的元素，如果有，就把ans中对应位置的元素设成即将入栈的那个数\n- 这样我们只是遍历了一次nums1，遍历了一次nums2，时间复杂度为O(m+n)\n\n这道题的AC率算很高的了，不过我一直都很难想到简化复杂度的方法，这题用栈解决算是比较巧妙的，姑且做个记录吧。\n\n\n**PS. 我竟然没到一个星期又更新了**  \n**真是勤勉啊（并不**   \n**=。=**\n","source":"_posts/LeetCode496.md","raw":"title: LeetCode496 使用栈(stack)简化时间复杂度\ndate: 2017-02-10 12:56:16\ntags:\n- Python\n- stack\ncategories:\n- Leetcode\t\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/leetcode_logo.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n## LeetCode 496. Next Greater Element I使用栈(stack)简化时间复杂度\n\n这道题的描述如下：\n\n> **496**. Next Greater Element I  \nDescription  Submission  Solutions  Add to List  \nTotal Accepted: 3176  \nTotal Submissions: 5284  \nDifficulty: Easy  \nContributors: love\\_FDU\\_llp  \nYou are given two arrays (without duplicates) nums1  and nums2 where nums1’s elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2.  \n\n>The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.\n\n>Example 1:  \nInput: nums1 = [4,1,2], nums2 = [1,3,4,2].  \nOutput: [-1,3,-1]  \nExplanation:  \n    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.  \n    For number 1 in the first array, the next greater number for it in the second array is 3.  \n    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.  \nExample 2:  \nInput: nums1 = [2,4], nums2 = [1,2,3,4].  \nOutput: [3,-1]  \nExplanation:  \n    For number 2 in the first array, the next greater number for it in the second array is 3.  \n    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.  \nNote:  \nAll elements in nums1 and nums2 are unique.  \nThe length of both nums1 and nums2 would not exceed 1000.  \n\n这里我们假设nums1的长度是m，nums2的长度是n。\n看到题目第一眼，首先想到的是一个O(m*n)的解法：  \n**解法1**：   \n```python\ndef nextGreaterElement(self, findNums, nums):\n    \"\"\"\n    :type findNums: List[int]\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    res = []\n    length = len(nums)\n    for i in findNums:\n        j, flag = 0, False\n        while j < length:\n            if i == nums[j] and not flag:\n                flag = True\n            if flag:\n                if j < length-1 and nums[j+1] > i:\n                    res.append(nums[j+1])\n                    flag = False\n                    break\n            if j == length - 1:\n                res.append(-1)\n                flag = False\n            j += 1\n    return res\n```\n这个解法的想法比较直接，对nums1里的每个数，都在nums2中找到这个数，然后在接下来的数中找第一个比它大的数放到结果List里，如果没找到就把-1放进去。   \n这个虽然也能AC把，但是runtime只能击败2.47%的人.....这样的结果明显有时间复杂度更低的解法。\n\n然后我就去Discuss里面找了....  \n果然.....   \n被我找到了一个O(m+n)的解法，很巧妙地用到了栈。  \n**解法2**：  \n\n```python\ndef nextGreaterElement(self, findNums, nums):\n    \"\"\"\n    :type findNums: List[int]\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    d = {}\n    ans = [-1] * len(findNums)\n    for i, num in enumerate(findNums):\n        d[num] = i\n    stack = []\n    for num in nums:\n        while stack and stack[-1] < num:\n            top = stack.pop()\n            if top in d:\n                ans[d[top]] = num\n        stack.append(num)\n    return ans\n```\n做一个简单的解释：\n\n- 我们用一个字典d存储所有元素的index。\n- 用一个与nums1等长的数组ans表示结果(并将每个元素初始化为-1)\n- 假设我们有一个前面所有元素都递减的数列，最后一个数比前面所有的数都大，比如[5, 4, 3, 2, 1, 6]，那么6就是前面这些数的\"Next Greater Element\" 。\n- 我们用一个栈来放置一个递减的数列。\n- 每当即将入栈的一个数比栈顶的数大，我们将栈顶的数弹出，一直到即将入栈的数比栈顶的数小，这个过程中弹出的数的\"Next Greater Element\"就是这个入栈的数。比如：当前栈是[6,4,3,2],即将入栈的数是5，那么2，3，4会被依次弹出, 并且这三个数的\"Next Greater Element\"是5\n- 我们按照上面描述的规则将nums2中的元素依次入栈，在出栈的元素中找nums1中的元素，如果有，就把ans中对应位置的元素设成即将入栈的那个数\n- 这样我们只是遍历了一次nums1，遍历了一次nums2，时间复杂度为O(m+n)\n\n这道题的AC率算很高的了，不过我一直都很难想到简化复杂度的方法，这题用栈解决算是比较巧妙的，姑且做个记录吧。\n\n\n**PS. 我竟然没到一个星期又更新了**  \n**真是勤勉啊（并不**   \n**=。=**\n","slug":"LeetCode496","published":1,"updated":"2019-04-25T01:27:25.130Z","comments":1,"layout":"post","link":"","_id":"cjuw5c69f0002dhyf9ndyp0fg","content":"<h2 id=\"LeetCode-496-Next-Greater-Element-I使用栈-stack-简化时间复杂度\"><a href=\"#LeetCode-496-Next-Greater-Element-I使用栈-stack-简化时间复杂度\" class=\"headerlink\" title=\"LeetCode 496. Next Greater Element I使用栈(stack)简化时间复杂度\"></a>LeetCode 496. Next Greater Element I使用栈(stack)简化时间复杂度</h2><p>这道题的描述如下：</p>\n<blockquote>\n<p><strong>496</strong>. Next Greater Element I<br>Description  Submission  Solutions  Add to List<br>Total Accepted: 3176<br>Total Submissions: 5284<br>Difficulty: Easy<br>Contributors: love_FDU_llp<br>You are given two arrays (without duplicates) nums1  and nums2 where nums1’s elements are subset of nums2. Find all the next greater numbers for nums1’s elements in the corresponding places of nums2.  </p>\n</blockquote>\n<blockquote>\n<p>The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.</p>\n</blockquote>\n<blockquote>\n<p>Example 1:<br>Input: nums1 = [4,1,2], nums2 = [1,3,4,2].<br>Output: [-1,3,-1]<br>Explanation:<br>    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.<br>    For number 1 in the first array, the next greater number for it in the second array is 3.<br>    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.<br>Example 2:<br>Input: nums1 = [2,4], nums2 = [1,2,3,4].<br>Output: [3,-1]<br>Explanation:<br>    For number 2 in the first array, the next greater number for it in the second array is 3.<br>    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.<br>Note:<br>All elements in nums1 and nums2 are unique.<br>The length of both nums1 and nums2 would not exceed 1000.  </p>\n</blockquote>\n<p>这里我们假设nums1的长度是m，nums2的长度是n。<br>看到题目第一眼，首先想到的是一个O(m*n)的解法：<br><strong>解法1</strong>：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">nextGreaterElement</span><span class=\"params\">(self, findNums, nums)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    :type findNums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">    :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">    :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    length = len(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> findNums:</span><br><span class=\"line\">        j, flag = <span class=\"number\">0</span>, <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &lt; length:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == nums[j] <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> flag:</span><br><span class=\"line\">                flag = <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> flag:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> j &lt; length<span class=\"number\">-1</span> <span class=\"keyword\">and</span> nums[j+<span class=\"number\">1</span>] &gt; i:</span><br><span class=\"line\">                    res.append(nums[j+<span class=\"number\">1</span>])</span><br><span class=\"line\">                    flag = <span class=\"literal\">False</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> j == length - <span class=\"number\">1</span>:</span><br><span class=\"line\">                res.append(<span class=\"number\">-1</span>)</span><br><span class=\"line\">                flag = <span class=\"literal\">False</span></span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure></p>\n<p>这个解法的想法比较直接，对nums1里的每个数，都在nums2中找到这个数，然后在接下来的数中找第一个比它大的数放到结果List里，如果没找到就把-1放进去。<br>这个虽然也能AC把，但是runtime只能击败2.47%的人…..这样的结果明显有时间复杂度更低的解法。</p>\n<p>然后我就去Discuss里面找了….<br>果然…..<br>被我找到了一个O(m+n)的解法，很巧妙地用到了栈。<br><strong>解法2</strong>：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">nextGreaterElement</span><span class=\"params\">(self, findNums, nums)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    :type findNums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">    :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">    :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    d = &#123;&#125;</span><br><span class=\"line\">    ans = [<span class=\"number\">-1</span>] * len(findNums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, num <span class=\"keyword\">in</span> enumerate(findNums):</span><br><span class=\"line\">        d[num] = i</span><br><span class=\"line\">    stack = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> stack <span class=\"keyword\">and</span> stack[<span class=\"number\">-1</span>] &lt; num:</span><br><span class=\"line\">            top = stack.pop()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> top <span class=\"keyword\">in</span> d:</span><br><span class=\"line\">                ans[d[top]] = num</span><br><span class=\"line\">        stack.append(num)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<p>做一个简单的解释：</p>\n<ul>\n<li>我们用一个字典d存储所有元素的index。</li>\n<li>用一个与nums1等长的数组ans表示结果(并将每个元素初始化为-1)</li>\n<li>假设我们有一个前面所有元素都递减的数列，最后一个数比前面所有的数都大，比如[5, 4, 3, 2, 1, 6]，那么6就是前面这些数的”Next Greater Element” 。</li>\n<li>我们用一个栈来放置一个递减的数列。</li>\n<li>每当即将入栈的一个数比栈顶的数大，我们将栈顶的数弹出，一直到即将入栈的数比栈顶的数小，这个过程中弹出的数的”Next Greater Element”就是这个入栈的数。比如：当前栈是[6,4,3,2],即将入栈的数是5，那么2，3，4会被依次弹出, 并且这三个数的”Next Greater Element”是5</li>\n<li>我们按照上面描述的规则将nums2中的元素依次入栈，在出栈的元素中找nums1中的元素，如果有，就把ans中对应位置的元素设成即将入栈的那个数</li>\n<li>这样我们只是遍历了一次nums1，遍历了一次nums2，时间复杂度为O(m+n)</li>\n</ul>\n<p>这道题的AC率算很高的了，不过我一直都很难想到简化复杂度的方法，这题用栈解决算是比较巧妙的，姑且做个记录吧。</p>\n<p><strong>PS. 我竟然没到一个星期又更新了</strong><br><strong>真是勤勉啊（并不</strong><br><strong>=。=</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"LeetCode-496-Next-Greater-Element-I使用栈-stack-简化时间复杂度\"><a href=\"#LeetCode-496-Next-Greater-Element-I使用栈-stack-简化时间复杂度\" class=\"headerlink\" title=\"LeetCode 496. Next Greater Element I使用栈(stack)简化时间复杂度\"></a>LeetCode 496. Next Greater Element I使用栈(stack)简化时间复杂度</h2><p>这道题的描述如下：</p>\n<blockquote>\n<p><strong>496</strong>. Next Greater Element I<br>Description  Submission  Solutions  Add to List<br>Total Accepted: 3176<br>Total Submissions: 5284<br>Difficulty: Easy<br>Contributors: love_FDU_llp<br>You are given two arrays (without duplicates) nums1  and nums2 where nums1’s elements are subset of nums2. Find all the next greater numbers for nums1’s elements in the corresponding places of nums2.  </p>\n</blockquote>\n<blockquote>\n<p>The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.</p>\n</blockquote>\n<blockquote>\n<p>Example 1:<br>Input: nums1 = [4,1,2], nums2 = [1,3,4,2].<br>Output: [-1,3,-1]<br>Explanation:<br>    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.<br>    For number 1 in the first array, the next greater number for it in the second array is 3.<br>    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.<br>Example 2:<br>Input: nums1 = [2,4], nums2 = [1,2,3,4].<br>Output: [3,-1]<br>Explanation:<br>    For number 2 in the first array, the next greater number for it in the second array is 3.<br>    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.<br>Note:<br>All elements in nums1 and nums2 are unique.<br>The length of both nums1 and nums2 would not exceed 1000.  </p>\n</blockquote>\n<p>这里我们假设nums1的长度是m，nums2的长度是n。<br>看到题目第一眼，首先想到的是一个O(m*n)的解法：<br><strong>解法1</strong>：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">nextGreaterElement</span><span class=\"params\">(self, findNums, nums)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    :type findNums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">    :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">    :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    length = len(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> findNums:</span><br><span class=\"line\">        j, flag = <span class=\"number\">0</span>, <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &lt; length:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == nums[j] <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> flag:</span><br><span class=\"line\">                flag = <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> flag:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> j &lt; length<span class=\"number\">-1</span> <span class=\"keyword\">and</span> nums[j+<span class=\"number\">1</span>] &gt; i:</span><br><span class=\"line\">                    res.append(nums[j+<span class=\"number\">1</span>])</span><br><span class=\"line\">                    flag = <span class=\"literal\">False</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> j == length - <span class=\"number\">1</span>:</span><br><span class=\"line\">                res.append(<span class=\"number\">-1</span>)</span><br><span class=\"line\">                flag = <span class=\"literal\">False</span></span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure></p>\n<p>这个解法的想法比较直接，对nums1里的每个数，都在nums2中找到这个数，然后在接下来的数中找第一个比它大的数放到结果List里，如果没找到就把-1放进去。<br>这个虽然也能AC把，但是runtime只能击败2.47%的人…..这样的结果明显有时间复杂度更低的解法。</p>\n<p>然后我就去Discuss里面找了….<br>果然…..<br>被我找到了一个O(m+n)的解法，很巧妙地用到了栈。<br><strong>解法2</strong>：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">nextGreaterElement</span><span class=\"params\">(self, findNums, nums)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    :type findNums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">    :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">    :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    d = &#123;&#125;</span><br><span class=\"line\">    ans = [<span class=\"number\">-1</span>] * len(findNums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, num <span class=\"keyword\">in</span> enumerate(findNums):</span><br><span class=\"line\">        d[num] = i</span><br><span class=\"line\">    stack = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> stack <span class=\"keyword\">and</span> stack[<span class=\"number\">-1</span>] &lt; num:</span><br><span class=\"line\">            top = stack.pop()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> top <span class=\"keyword\">in</span> d:</span><br><span class=\"line\">                ans[d[top]] = num</span><br><span class=\"line\">        stack.append(num)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<p>做一个简单的解释：</p>\n<ul>\n<li>我们用一个字典d存储所有元素的index。</li>\n<li>用一个与nums1等长的数组ans表示结果(并将每个元素初始化为-1)</li>\n<li>假设我们有一个前面所有元素都递减的数列，最后一个数比前面所有的数都大，比如[5, 4, 3, 2, 1, 6]，那么6就是前面这些数的”Next Greater Element” 。</li>\n<li>我们用一个栈来放置一个递减的数列。</li>\n<li>每当即将入栈的一个数比栈顶的数大，我们将栈顶的数弹出，一直到即将入栈的数比栈顶的数小，这个过程中弹出的数的”Next Greater Element”就是这个入栈的数。比如：当前栈是[6,4,3,2],即将入栈的数是5，那么2，3，4会被依次弹出, 并且这三个数的”Next Greater Element”是5</li>\n<li>我们按照上面描述的规则将nums2中的元素依次入栈，在出栈的元素中找nums1中的元素，如果有，就把ans中对应位置的元素设成即将入栈的那个数</li>\n<li>这样我们只是遍历了一次nums1，遍历了一次nums2，时间复杂度为O(m+n)</li>\n</ul>\n<p>这道题的AC率算很高的了，不过我一直都很难想到简化复杂度的方法，这题用栈解决算是比较巧妙的，姑且做个记录吧。</p>\n<p><strong>PS. 我竟然没到一个星期又更新了</strong><br><strong>真是勤勉啊（并不</strong><br><strong>=。=</strong></p>\n"},{"title":"LeetCode382 蓄水池抽样算法","date":"2017-02-16T04:06:23.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/leetcode_logo.png?raw=true"],"toc":true,"comment":true,"_content":"\n## LeetCode382 蓄水池抽样算法\n首先说一下**蓄水池抽样算法**：\n\n- 问题场景\n\n> 给你一个长度为N的链表。N很大，但你不知道N有多大。你的任务是从这N个元素中随机取出k个元素。你只能遍历这个链表一次。你的算法必须保证取出的元素恰好有k个，且它们是完全随机的（出现概率均等）。\n\n- 问题解决  \n**蓄水池抽样算法**\n\n> 该算法是针对从一个序列中随机抽取不重复的k个数，保证每个数被抽取到的概率为k/n这个问题而构建的。做法是： -\n首先构建一个可放k个元素的蓄水池，将序列的前k个元素放入蓄水池中。\n然后从第k+1个元素开始，以k/n的概率来决定该元素是否被替换到池子中。 当遍历完所有元素之后，就可以得到随机挑选出的k个元素。复杂度为O(n).\n\n伪代码如下：\n\n```\nInit : a reservoir with the size： k\nfor  i= k+1 to N\n    M=random(1, i);\n    if( M < k)\n        SWAP the Mth value and ith value\nend for\n```\n\n- 证明每个数被取到的概率为k/n:\n\n1. 对于第i个数(i < k), 在前k步被选中的概率是1, 从第k+1步开始, i不被选中的概率为k/k+1, 那么读到第n个数时:\n> 第i个数(i < k)被选中的概率 = 被选中的概率 * 以后每一步都不被换走的概率  \n\n\t即:\n> 1 * k/(k+1) * (k+1)/(k+2) … (n-1)/n = k/n\n\n2. 对于第j个数(j >= k): \n> 被选中的概率 = 在他出现时被选中的概率 * 在他出现以后不被换走的概率\n\n\t即: \n> k/j * j/(j+1) ... (n-1)/n = k/n\n\n\t综上得证。\n  \n- Leetcode 382 解题报告：\n\n> **382**. Linked List Random Node  \nTotal Accepted: 20928  \nTotal Submissions: 45158  \nDifficulty: Medium  \nContributors: Admin  \nGiven a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.\n\n> Follow up:\nWhat if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?\n\n**Example:**\n\n```\n// Init a singly linked list [1,2,3].\nListNode head = new ListNode(1);\nhead.next = new ListNode(2);\nhead.next.next = new ListNode(3);\nSolution solution = new Solution(head);\n\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\nsolution.getRandom();\n```\n\n这个题就是上面所说的蓄水池长度为1的情况,Python代码如下：\n\n```python\nimport random\nclass Solution(object):\n\n    def __init__(self, head):\n        \"\"\"\n        @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node.\n        :type head: ListNode\n        \"\"\"\n        self.head = head\n\n    def getRandom(self):\n        \"\"\"\n        Returns a random node's value.\n        :rtype: int\n        \"\"\"\n        i = 1\n        head = self.head\n        while head != None:\n            M = random.randrange(0, i)\n            if M == 0:\n                k = head.val\n            head = head.next\n            i += 1\n        return k\n```\n由于题目中提到\n> What if the linked list is extremely large\n\n而对于每个元素都要计算一次随机数, 非常耗时，所以有一个简化的版本，每100个数计算一次随机数, 代码如下：\n\n```python\nclass Solution(object):\n\n    def __init__(self, head):\n        self.head = head\n\n    def getRandom(self):\n        node = self.head\n        before = 0\n        buffer = [None] * 100\n        while node:\n            now = 0\n            while node and now < 100:\n                buffer[now] = node\n                node = node.next\n                now += 1\n            r = random.randrange(now + before)\n            if r < now:\n                pick = buffer[r]\n            before += now\n        return pick.val\n```\n已经做到AC率 50% 以下了, 感觉题目虽然都不是很难，但是已经开始涉及我的知识盲区了orz, 所以接下来碰到一些没学过的东西也会记录下来=。=\n \n","source":"_posts/LeetCode382.md","raw":"title: LeetCode382 蓄水池抽样算法\ndate: 2017-02-16 12:06:23\ntags:\n- Python\n- 蓄水池抽样\ncategories:\n- Leetcode\t\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/leetcode_logo.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n## LeetCode382 蓄水池抽样算法\n首先说一下**蓄水池抽样算法**：\n\n- 问题场景\n\n> 给你一个长度为N的链表。N很大，但你不知道N有多大。你的任务是从这N个元素中随机取出k个元素。你只能遍历这个链表一次。你的算法必须保证取出的元素恰好有k个，且它们是完全随机的（出现概率均等）。\n\n- 问题解决  \n**蓄水池抽样算法**\n\n> 该算法是针对从一个序列中随机抽取不重复的k个数，保证每个数被抽取到的概率为k/n这个问题而构建的。做法是： -\n首先构建一个可放k个元素的蓄水池，将序列的前k个元素放入蓄水池中。\n然后从第k+1个元素开始，以k/n的概率来决定该元素是否被替换到池子中。 当遍历完所有元素之后，就可以得到随机挑选出的k个元素。复杂度为O(n).\n\n伪代码如下：\n\n```\nInit : a reservoir with the size： k\nfor  i= k+1 to N\n    M=random(1, i);\n    if( M < k)\n        SWAP the Mth value and ith value\nend for\n```\n\n- 证明每个数被取到的概率为k/n:\n\n1. 对于第i个数(i < k), 在前k步被选中的概率是1, 从第k+1步开始, i不被选中的概率为k/k+1, 那么读到第n个数时:\n> 第i个数(i < k)被选中的概率 = 被选中的概率 * 以后每一步都不被换走的概率  \n\n\t即:\n> 1 * k/(k+1) * (k+1)/(k+2) … (n-1)/n = k/n\n\n2. 对于第j个数(j >= k): \n> 被选中的概率 = 在他出现时被选中的概率 * 在他出现以后不被换走的概率\n\n\t即: \n> k/j * j/(j+1) ... (n-1)/n = k/n\n\n\t综上得证。\n  \n- Leetcode 382 解题报告：\n\n> **382**. Linked List Random Node  \nTotal Accepted: 20928  \nTotal Submissions: 45158  \nDifficulty: Medium  \nContributors: Admin  \nGiven a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.\n\n> Follow up:\nWhat if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?\n\n**Example:**\n\n```\n// Init a singly linked list [1,2,3].\nListNode head = new ListNode(1);\nhead.next = new ListNode(2);\nhead.next.next = new ListNode(3);\nSolution solution = new Solution(head);\n\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\nsolution.getRandom();\n```\n\n这个题就是上面所说的蓄水池长度为1的情况,Python代码如下：\n\n```python\nimport random\nclass Solution(object):\n\n    def __init__(self, head):\n        \"\"\"\n        @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node.\n        :type head: ListNode\n        \"\"\"\n        self.head = head\n\n    def getRandom(self):\n        \"\"\"\n        Returns a random node's value.\n        :rtype: int\n        \"\"\"\n        i = 1\n        head = self.head\n        while head != None:\n            M = random.randrange(0, i)\n            if M == 0:\n                k = head.val\n            head = head.next\n            i += 1\n        return k\n```\n由于题目中提到\n> What if the linked list is extremely large\n\n而对于每个元素都要计算一次随机数, 非常耗时，所以有一个简化的版本，每100个数计算一次随机数, 代码如下：\n\n```python\nclass Solution(object):\n\n    def __init__(self, head):\n        self.head = head\n\n    def getRandom(self):\n        node = self.head\n        before = 0\n        buffer = [None] * 100\n        while node:\n            now = 0\n            while node and now < 100:\n                buffer[now] = node\n                node = node.next\n                now += 1\n            r = random.randrange(now + before)\n            if r < now:\n                pick = buffer[r]\n            before += now\n        return pick.val\n```\n已经做到AC率 50% 以下了, 感觉题目虽然都不是很难，但是已经开始涉及我的知识盲区了orz, 所以接下来碰到一些没学过的东西也会记录下来=。=\n \n","slug":"LeetCode382","published":1,"updated":"2019-04-25T01:27:25.849Z","comments":1,"layout":"post","link":"","_id":"cjuw5c69m0006dhyfbtizqfbj","content":"<h2 id=\"LeetCode382-蓄水池抽样算法\"><a href=\"#LeetCode382-蓄水池抽样算法\" class=\"headerlink\" title=\"LeetCode382 蓄水池抽样算法\"></a>LeetCode382 蓄水池抽样算法</h2><p>首先说一下<strong>蓄水池抽样算法</strong>：</p>\n<ul>\n<li>问题场景</li>\n</ul>\n<blockquote>\n<p>给你一个长度为N的链表。N很大，但你不知道N有多大。你的任务是从这N个元素中随机取出k个元素。你只能遍历这个链表一次。你的算法必须保证取出的元素恰好有k个，且它们是完全随机的（出现概率均等）。</p>\n</blockquote>\n<ul>\n<li>问题解决<br><strong>蓄水池抽样算法</strong></li>\n</ul>\n<blockquote>\n<p>该算法是针对从一个序列中随机抽取不重复的k个数，保证每个数被抽取到的概率为k/n这个问题而构建的。做法是： -<br>首先构建一个可放k个元素的蓄水池，将序列的前k个元素放入蓄水池中。<br>然后从第k+1个元素开始，以k/n的概率来决定该元素是否被替换到池子中。 当遍历完所有元素之后，就可以得到随机挑选出的k个元素。复杂度为O(n).</p>\n</blockquote>\n<p>伪代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Init : a reservoir with the size： k</span><br><span class=\"line\">for  i= k+1 to N</span><br><span class=\"line\">    M=random(1, i);</span><br><span class=\"line\">    if( M &lt; k)</span><br><span class=\"line\">        SWAP the Mth value and ith value</span><br><span class=\"line\">end for</span><br></pre></td></tr></table></figure>\n<ul>\n<li>证明每个数被取到的概率为k/n:</li>\n</ul>\n<ol>\n<li><p>对于第i个数(i &lt; k), 在前k步被选中的概率是1, 从第k+1步开始, i不被选中的概率为k/k+1, 那么读到第n个数时:</p>\n<blockquote>\n<p>第i个数(i &lt; k)被选中的概率 = 被选中的概率 * 以后每一步都不被换走的概率  </p>\n</blockquote>\n<p> 即:</p>\n<blockquote>\n<p>1 <em> k/(k+1) </em> (k+1)/(k+2) … (n-1)/n = k/n</p>\n</blockquote>\n</li>\n<li><p>对于第j个数(j &gt;= k): </p>\n<blockquote>\n<p>被选中的概率 = 在他出现时被选中的概率 * 在他出现以后不被换走的概率</p>\n</blockquote>\n<p> 即: </p>\n<blockquote>\n<p>k/j * j/(j+1) … (n-1)/n = k/n</p>\n</blockquote>\n<p> 综上得证。</p>\n</li>\n</ol>\n<ul>\n<li>Leetcode 382 解题报告：</li>\n</ul>\n<blockquote>\n<p><strong>382</strong>. Linked List Random Node<br>Total Accepted: 20928<br>Total Submissions: 45158<br>Difficulty: Medium<br>Contributors: Admin<br>Given a singly linked list, return a random node’s value from the linked list. Each node must have the same probability of being chosen.</p>\n</blockquote>\n<blockquote>\n<p>Follow up:<br>What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?</p>\n</blockquote>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Init a singly linked list [1,2,3].</span><br><span class=\"line\">ListNode head = new ListNode(1);</span><br><span class=\"line\">head.next = new ListNode(2);</span><br><span class=\"line\">head.next.next = new ListNode(3);</span><br><span class=\"line\">Solution solution = new Solution(head);</span><br><span class=\"line\"></span><br><span class=\"line\">// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.</span><br><span class=\"line\">solution.getRandom();</span><br></pre></td></tr></table></figure>\n<p>这个题就是上面所说的蓄水池长度为1的情况,Python代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, head)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @param head The linked list's head.</span></span><br><span class=\"line\"><span class=\"string\">        Note that the head is guaranteed to be not null, so it contains at least one node.</span></span><br><span class=\"line\"><span class=\"string\">        :type head: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.head = head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getRandom</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Returns a random node's value.</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        i = <span class=\"number\">1</span></span><br><span class=\"line\">        head = self.head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> head != <span class=\"literal\">None</span>:</span><br><span class=\"line\">            M = random.randrange(<span class=\"number\">0</span>, i)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> M == <span class=\"number\">0</span>:</span><br><span class=\"line\">                k = head.val</span><br><span class=\"line\">            head = head.next</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> k</span><br></pre></td></tr></table></figure>\n<p>由于题目中提到</p>\n<blockquote>\n<p>What if the linked list is extremely large</p>\n</blockquote>\n<p>而对于每个元素都要计算一次随机数, 非常耗时，所以有一个简化的版本，每100个数计算一次随机数, 代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, head)</span>:</span></span><br><span class=\"line\">        self.head = head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getRandom</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        node = self.head</span><br><span class=\"line\">        before = <span class=\"number\">0</span></span><br><span class=\"line\">        buffer = [<span class=\"literal\">None</span>] * <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> node:</span><br><span class=\"line\">            now = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> node <span class=\"keyword\">and</span> now &lt; <span class=\"number\">100</span>:</span><br><span class=\"line\">                buffer[now] = node</span><br><span class=\"line\">                node = node.next</span><br><span class=\"line\">                now += <span class=\"number\">1</span></span><br><span class=\"line\">            r = random.randrange(now + before)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> r &lt; now:</span><br><span class=\"line\">                pick = buffer[r]</span><br><span class=\"line\">            before += now</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pick.val</span><br></pre></td></tr></table></figure>\n<p>已经做到AC率 50% 以下了, 感觉题目虽然都不是很难，但是已经开始涉及我的知识盲区了orz, 所以接下来碰到一些没学过的东西也会记录下来=。=</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"LeetCode382-蓄水池抽样算法\"><a href=\"#LeetCode382-蓄水池抽样算法\" class=\"headerlink\" title=\"LeetCode382 蓄水池抽样算法\"></a>LeetCode382 蓄水池抽样算法</h2><p>首先说一下<strong>蓄水池抽样算法</strong>：</p>\n<ul>\n<li>问题场景</li>\n</ul>\n<blockquote>\n<p>给你一个长度为N的链表。N很大，但你不知道N有多大。你的任务是从这N个元素中随机取出k个元素。你只能遍历这个链表一次。你的算法必须保证取出的元素恰好有k个，且它们是完全随机的（出现概率均等）。</p>\n</blockquote>\n<ul>\n<li>问题解决<br><strong>蓄水池抽样算法</strong></li>\n</ul>\n<blockquote>\n<p>该算法是针对从一个序列中随机抽取不重复的k个数，保证每个数被抽取到的概率为k/n这个问题而构建的。做法是： -<br>首先构建一个可放k个元素的蓄水池，将序列的前k个元素放入蓄水池中。<br>然后从第k+1个元素开始，以k/n的概率来决定该元素是否被替换到池子中。 当遍历完所有元素之后，就可以得到随机挑选出的k个元素。复杂度为O(n).</p>\n</blockquote>\n<p>伪代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Init : a reservoir with the size： k</span><br><span class=\"line\">for  i= k+1 to N</span><br><span class=\"line\">    M=random(1, i);</span><br><span class=\"line\">    if( M &lt; k)</span><br><span class=\"line\">        SWAP the Mth value and ith value</span><br><span class=\"line\">end for</span><br></pre></td></tr></table></figure>\n<ul>\n<li>证明每个数被取到的概率为k/n:</li>\n</ul>\n<ol>\n<li><p>对于第i个数(i &lt; k), 在前k步被选中的概率是1, 从第k+1步开始, i不被选中的概率为k/k+1, 那么读到第n个数时:</p>\n<blockquote>\n<p>第i个数(i &lt; k)被选中的概率 = 被选中的概率 * 以后每一步都不被换走的概率  </p>\n</blockquote>\n<p> 即:</p>\n<blockquote>\n<p>1 <em> k/(k+1) </em> (k+1)/(k+2) … (n-1)/n = k/n</p>\n</blockquote>\n</li>\n<li><p>对于第j个数(j &gt;= k): </p>\n<blockquote>\n<p>被选中的概率 = 在他出现时被选中的概率 * 在他出现以后不被换走的概率</p>\n</blockquote>\n<p> 即: </p>\n<blockquote>\n<p>k/j * j/(j+1) … (n-1)/n = k/n</p>\n</blockquote>\n<p> 综上得证。</p>\n</li>\n</ol>\n<ul>\n<li>Leetcode 382 解题报告：</li>\n</ul>\n<blockquote>\n<p><strong>382</strong>. Linked List Random Node<br>Total Accepted: 20928<br>Total Submissions: 45158<br>Difficulty: Medium<br>Contributors: Admin<br>Given a singly linked list, return a random node’s value from the linked list. Each node must have the same probability of being chosen.</p>\n</blockquote>\n<blockquote>\n<p>Follow up:<br>What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?</p>\n</blockquote>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Init a singly linked list [1,2,3].</span><br><span class=\"line\">ListNode head = new ListNode(1);</span><br><span class=\"line\">head.next = new ListNode(2);</span><br><span class=\"line\">head.next.next = new ListNode(3);</span><br><span class=\"line\">Solution solution = new Solution(head);</span><br><span class=\"line\"></span><br><span class=\"line\">// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.</span><br><span class=\"line\">solution.getRandom();</span><br></pre></td></tr></table></figure>\n<p>这个题就是上面所说的蓄水池长度为1的情况,Python代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, head)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @param head The linked list's head.</span></span><br><span class=\"line\"><span class=\"string\">        Note that the head is guaranteed to be not null, so it contains at least one node.</span></span><br><span class=\"line\"><span class=\"string\">        :type head: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.head = head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getRandom</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Returns a random node's value.</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        i = <span class=\"number\">1</span></span><br><span class=\"line\">        head = self.head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> head != <span class=\"literal\">None</span>:</span><br><span class=\"line\">            M = random.randrange(<span class=\"number\">0</span>, i)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> M == <span class=\"number\">0</span>:</span><br><span class=\"line\">                k = head.val</span><br><span class=\"line\">            head = head.next</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> k</span><br></pre></td></tr></table></figure>\n<p>由于题目中提到</p>\n<blockquote>\n<p>What if the linked list is extremely large</p>\n</blockquote>\n<p>而对于每个元素都要计算一次随机数, 非常耗时，所以有一个简化的版本，每100个数计算一次随机数, 代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, head)</span>:</span></span><br><span class=\"line\">        self.head = head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getRandom</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        node = self.head</span><br><span class=\"line\">        before = <span class=\"number\">0</span></span><br><span class=\"line\">        buffer = [<span class=\"literal\">None</span>] * <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> node:</span><br><span class=\"line\">            now = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> node <span class=\"keyword\">and</span> now &lt; <span class=\"number\">100</span>:</span><br><span class=\"line\">                buffer[now] = node</span><br><span class=\"line\">                node = node.next</span><br><span class=\"line\">                now += <span class=\"number\">1</span></span><br><span class=\"line\">            r = random.randrange(now + before)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> r &lt; now:</span><br><span class=\"line\">                pick = buffer[r]</span><br><span class=\"line\">            before += now</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pick.val</span><br></pre></td></tr></table></figure>\n<p>已经做到AC率 50% 以下了, 感觉题目虽然都不是很难，但是已经开始涉及我的知识盲区了orz, 所以接下来碰到一些没学过的东西也会记录下来=。=</p>\n"},{"title":"利用Python位运算简化时间/空间复杂度","date":"2017-02-24T08:33:08.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/leetcode_logo.png?raw=true"],"toc":true,"comment":true,"_content":"\n最近两天碰到两个用位运算解决的题目，恰好一个利用位运算简化了时间复杂度，另一个简化了空间复杂度，所以做个记录加深一下印象。\n第一个题目是LeetCode 421. Maximum XOR of Two Numbers in an Array:  \n**注：这题中提到的异或均是按位异或。\n> Given a non-empty array of numbers, a0, a1, a2, … , an-1, where 0 ≤ ai < 231.\n\n> Find the maximum result of ai XOR aj, where 0 ≤ i, j < n.\n\n> Could you do this in O(n) runtime?\n\n> Example:\n\n> Input: [3, 10, 5, 25, 2, 8]\n\n> Output: 28\n\n> Explanation: The maximum result is 5 ^ 25 = 28.\n\n这题的描述中明确指出了**do this in O(n) runtime** ，如果要两两异或比较大小的话很明显需要O(n^2)的时间复杂度。\n\n那怎么样才能用位运算解决这个问题呢？\n\n如果我们遇到的场景是这样：\n\n> 假定数组中所有的元素都可以用8位2进制数来表示，如果我们已经知道所有数前7位的最大异或值maxor，怎样求8位数的最大异或值？\n\n很容易想到8位数的最大异或值只可能是前7位后面跟上0或1， 所以我们先假设后面能跟上1，即**假设的**最大异或值为\n \n> maxornew =（maxor << 1）+ 1;\n\n我们要找到这个最大异或的值会不会出现，一种简单的办法是2个循环遍历数组，然后两两算出异或的值，看是否能找到一个结果与maxornew相同。但是这样会使时间复杂度变成O(n^2)，不满足题目的要求。\n但是按位异或有一个比较特殊的性质：\n\n> 若 x ^ y = z ,那么 x ^ z = y , y ^ z = x\n\n这样我们只用拿出数组中每一个八位二进制数， 与maxornew进行异或运算，再判断异或得到的结果是否在数组中，如果不在的话，最大的异或值就是(maxor<<1) ,这样时间复杂度就被简化成为了O(n)\n\n上面的说完了，这个题目中描述的问题也就迎刃而解了。题目中提到的numbers，由于在给出的函数声明中传入参数为List[int], LeetCode中这样的数一般认为是 32位的int。\n\n对numbers中每一个数取前n位(1<=n<=32)计算最大异或的值，并且按照上面计算第八位的方法计算下一位，就可以得到整个数组的最大异或值。\n\n```python\ndef findMaximumXOR(self, nums):\n    answer = 0\n    for i in range(32)[::-1]:\n        answer <<= 1\n        prefixes = {num >> i for num in nums}\n        answer += any(answer^1 ^ p in prefixes for p in prefixes)\n        #print bin(answer)[2:]\n    return answer\n```\n这题利用位运算将原本需要O(n^2)的时间复杂度简化成了O(n)\n\n============================================================================\n\n第二个题目是简化空间复杂度，LeetCode 137. Single Number II：\n\n> Given an array of integers, every element appears three times except for one, which appears exactly once. Find that single one.\n\n> Note:\n> Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? \n\n就是说一个数组中，除了其中一个数只出现一次，其他都出现了三次，找出这个只出现了一次的数。\n首先我想到的是一个时间复杂度为O(n),使用的额外空间也是O(n)的解法：\n\n```python\ndef singleNumber(self, nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    numdict = {}\n    for i in nums:\n        if i in numdict:\n            numdict[i]+=1\n        else:\n            numdict[i]=1\n    for i in nums:\n        if numdict[i]==1:\n            return i\n```\n简单来说就是遍历数组的同时记录每个数出现的次数，第二次遍历的时候找出出现了一次的数。\n\n如果要将空间复杂度简化成O(1), 使用位运算是一个很好的选择：\n1. 将所有数转换成32位的2进制表示\n2. 把每一位的值加起来对3取余\n3. 转换成十进制表示\n4. Python将负整数转换成二进制数的时候，直接是'-'加上这个数的绝对值的二进制表示，所以负号单独计算。\n代码如下：\n\n```python\nclass Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        sumlist = [0]*32\n        summary, negcnt = 0, 0\n        for i in nums:\n            negcnt += i < 0\n            i = abs(i)\n            bitwise = format(i, '032b')\n            for j in xrange(32):\n                sumlist[j] += int(bitwise[j])\n        for i in xrange(32):\n            summary += 2**(31-i)*(sumlist[i]%3)\n        return summary*[1,-1][negcnt%3]\n```\n\n和上面的方法比起来，额外空间简化成了常数， 即O(1)。\n\n不过话说回来，这是一种用时间换空间的做法，上面的做法时间是2n， 这个是32n，虽然复杂度都是O(n),但是实际运行时间差距还是比较大的。\n\n\n（ · x · ）~","source":"_posts/bitwise-operation-in-leetcode.md","raw":"title: 利用Python位运算简化时间/空间复杂度\ndate: 2017-02-24 16:33:08\ntags:\n- Python\n- Bitwise Operation\ncategories:\n- Leetcode\t\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/leetcode_logo.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n最近两天碰到两个用位运算解决的题目，恰好一个利用位运算简化了时间复杂度，另一个简化了空间复杂度，所以做个记录加深一下印象。\n第一个题目是LeetCode 421. Maximum XOR of Two Numbers in an Array:  \n**注：这题中提到的异或均是按位异或。\n> Given a non-empty array of numbers, a0, a1, a2, … , an-1, where 0 ≤ ai < 231.\n\n> Find the maximum result of ai XOR aj, where 0 ≤ i, j < n.\n\n> Could you do this in O(n) runtime?\n\n> Example:\n\n> Input: [3, 10, 5, 25, 2, 8]\n\n> Output: 28\n\n> Explanation: The maximum result is 5 ^ 25 = 28.\n\n这题的描述中明确指出了**do this in O(n) runtime** ，如果要两两异或比较大小的话很明显需要O(n^2)的时间复杂度。\n\n那怎么样才能用位运算解决这个问题呢？\n\n如果我们遇到的场景是这样：\n\n> 假定数组中所有的元素都可以用8位2进制数来表示，如果我们已经知道所有数前7位的最大异或值maxor，怎样求8位数的最大异或值？\n\n很容易想到8位数的最大异或值只可能是前7位后面跟上0或1， 所以我们先假设后面能跟上1，即**假设的**最大异或值为\n \n> maxornew =（maxor << 1）+ 1;\n\n我们要找到这个最大异或的值会不会出现，一种简单的办法是2个循环遍历数组，然后两两算出异或的值，看是否能找到一个结果与maxornew相同。但是这样会使时间复杂度变成O(n^2)，不满足题目的要求。\n但是按位异或有一个比较特殊的性质：\n\n> 若 x ^ y = z ,那么 x ^ z = y , y ^ z = x\n\n这样我们只用拿出数组中每一个八位二进制数， 与maxornew进行异或运算，再判断异或得到的结果是否在数组中，如果不在的话，最大的异或值就是(maxor<<1) ,这样时间复杂度就被简化成为了O(n)\n\n上面的说完了，这个题目中描述的问题也就迎刃而解了。题目中提到的numbers，由于在给出的函数声明中传入参数为List[int], LeetCode中这样的数一般认为是 32位的int。\n\n对numbers中每一个数取前n位(1<=n<=32)计算最大异或的值，并且按照上面计算第八位的方法计算下一位，就可以得到整个数组的最大异或值。\n\n```python\ndef findMaximumXOR(self, nums):\n    answer = 0\n    for i in range(32)[::-1]:\n        answer <<= 1\n        prefixes = {num >> i for num in nums}\n        answer += any(answer^1 ^ p in prefixes for p in prefixes)\n        #print bin(answer)[2:]\n    return answer\n```\n这题利用位运算将原本需要O(n^2)的时间复杂度简化成了O(n)\n\n============================================================================\n\n第二个题目是简化空间复杂度，LeetCode 137. Single Number II：\n\n> Given an array of integers, every element appears three times except for one, which appears exactly once. Find that single one.\n\n> Note:\n> Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? \n\n就是说一个数组中，除了其中一个数只出现一次，其他都出现了三次，找出这个只出现了一次的数。\n首先我想到的是一个时间复杂度为O(n),使用的额外空间也是O(n)的解法：\n\n```python\ndef singleNumber(self, nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    numdict = {}\n    for i in nums:\n        if i in numdict:\n            numdict[i]+=1\n        else:\n            numdict[i]=1\n    for i in nums:\n        if numdict[i]==1:\n            return i\n```\n简单来说就是遍历数组的同时记录每个数出现的次数，第二次遍历的时候找出出现了一次的数。\n\n如果要将空间复杂度简化成O(1), 使用位运算是一个很好的选择：\n1. 将所有数转换成32位的2进制表示\n2. 把每一位的值加起来对3取余\n3. 转换成十进制表示\n4. Python将负整数转换成二进制数的时候，直接是'-'加上这个数的绝对值的二进制表示，所以负号单独计算。\n代码如下：\n\n```python\nclass Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        sumlist = [0]*32\n        summary, negcnt = 0, 0\n        for i in nums:\n            negcnt += i < 0\n            i = abs(i)\n            bitwise = format(i, '032b')\n            for j in xrange(32):\n                sumlist[j] += int(bitwise[j])\n        for i in xrange(32):\n            summary += 2**(31-i)*(sumlist[i]%3)\n        return summary*[1,-1][negcnt%3]\n```\n\n和上面的方法比起来，额外空间简化成了常数， 即O(1)。\n\n不过话说回来，这是一种用时间换空间的做法，上面的做法时间是2n， 这个是32n，虽然复杂度都是O(n),但是实际运行时间差距还是比较大的。\n\n\n（ · x · ）~","slug":"bitwise-operation-in-leetcode","published":1,"updated":"2019-04-25T01:27:25.274Z","comments":1,"layout":"post","link":"","_id":"cjuw5c69o0007dhyfajnhyloi","content":"<p>最近两天碰到两个用位运算解决的题目，恰好一个利用位运算简化了时间复杂度，另一个简化了空间复杂度，所以做个记录加深一下印象。<br>第一个题目是LeetCode 421. Maximum XOR of Two Numbers in an Array:<br>**注：这题中提到的异或均是按位异或。</p>\n<blockquote>\n<p>Given a non-empty array of numbers, a0, a1, a2, … , an-1, where 0 ≤ ai &lt; 231.</p>\n</blockquote>\n<blockquote>\n<p>Find the maximum result of ai XOR aj, where 0 ≤ i, j &lt; n.</p>\n</blockquote>\n<blockquote>\n<p>Could you do this in O(n) runtime?</p>\n</blockquote>\n<blockquote>\n<p>Example:</p>\n</blockquote>\n<blockquote>\n<p>Input: [3, 10, 5, 25, 2, 8]</p>\n</blockquote>\n<blockquote>\n<p>Output: 28</p>\n</blockquote>\n<blockquote>\n<p>Explanation: The maximum result is 5 ^ 25 = 28.</p>\n</blockquote>\n<p>这题的描述中明确指出了<strong>do this in O(n) runtime</strong> ，如果要两两异或比较大小的话很明显需要O(n^2)的时间复杂度。</p>\n<p>那怎么样才能用位运算解决这个问题呢？</p>\n<p>如果我们遇到的场景是这样：</p>\n<blockquote>\n<p>假定数组中所有的元素都可以用8位2进制数来表示，如果我们已经知道所有数前7位的最大异或值maxor，怎样求8位数的最大异或值？</p>\n</blockquote>\n<p>很容易想到8位数的最大异或值只可能是前7位后面跟上0或1， 所以我们先假设后面能跟上1，即<strong>假设的</strong>最大异或值为</p>\n<blockquote>\n<p>maxornew =（maxor &lt;&lt; 1）+ 1;</p>\n</blockquote>\n<p>我们要找到这个最大异或的值会不会出现，一种简单的办法是2个循环遍历数组，然后两两算出异或的值，看是否能找到一个结果与maxornew相同。但是这样会使时间复杂度变成O(n^2)，不满足题目的要求。<br>但是按位异或有一个比较特殊的性质：</p>\n<blockquote>\n<p>若 x ^ y = z ,那么 x ^ z = y , y ^ z = x</p>\n</blockquote>\n<p>这样我们只用拿出数组中每一个八位二进制数， 与maxornew进行异或运算，再判断异或得到的结果是否在数组中，如果不在的话，最大的异或值就是(maxor&lt;&lt;1) ,这样时间复杂度就被简化成为了O(n)</p>\n<p>上面的说完了，这个题目中描述的问题也就迎刃而解了。题目中提到的numbers，由于在给出的函数声明中传入参数为List[int], LeetCode中这样的数一般认为是 32位的int。</p>\n<p>对numbers中每一个数取前n位(1&lt;=n&lt;=32)计算最大异或的值，并且按照上面计算第八位的方法计算下一位，就可以得到整个数组的最大异或值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findMaximumXOR</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">    answer = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">32</span>)[::<span class=\"number\">-1</span>]:</span><br><span class=\"line\">        answer &lt;&lt;= <span class=\"number\">1</span></span><br><span class=\"line\">        prefixes = &#123;num &gt;&gt; i <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums&#125;</span><br><span class=\"line\">        answer += any(answer^<span class=\"number\">1</span> ^ p <span class=\"keyword\">in</span> prefixes <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> prefixes)</span><br><span class=\"line\">        <span class=\"comment\">#print bin(answer)[2:]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n<p>这题利用位运算将原本需要O(n^2)的时间复杂度简化成了O(n)</p>\n<p>============================================================================</p>\n<p>第二个题目是简化空间复杂度，LeetCode 137. Single Number II：</p>\n<blockquote>\n<p>Given an array of integers, every element appears three times except for one, which appears exactly once. Find that single one.</p>\n</blockquote>\n<blockquote>\n<p>Note:<br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? </p>\n</blockquote>\n<p>就是说一个数组中，除了其中一个数只出现一次，其他都出现了三次，找出这个只出现了一次的数。<br>首先我想到的是一个时间复杂度为O(n),使用的额外空间也是O(n)的解法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">singleNumber</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">    :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    numdict = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> numdict:</span><br><span class=\"line\">            numdict[i]+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            numdict[i]=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> numdict[i]==<span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i</span><br></pre></td></tr></table></figure>\n<p>简单来说就是遍历数组的同时记录每个数出现的次数，第二次遍历的时候找出出现了一次的数。</p>\n<p>如果要将空间复杂度简化成O(1), 使用位运算是一个很好的选择：</p>\n<ol>\n<li>将所有数转换成32位的2进制表示</li>\n<li>把每一位的值加起来对3取余</li>\n<li>转换成十进制表示</li>\n<li>Python将负整数转换成二进制数的时候，直接是’-‘加上这个数的绝对值的二进制表示，所以负号单独计算。<br>代码如下：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">singleNumber</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        sumlist = [<span class=\"number\">0</span>]*<span class=\"number\">32</span></span><br><span class=\"line\">        summary, negcnt = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">            negcnt += i &lt; <span class=\"number\">0</span></span><br><span class=\"line\">            i = abs(i)</span><br><span class=\"line\">            bitwise = format(i, <span class=\"string\">'032b'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> xrange(<span class=\"number\">32</span>):</span><br><span class=\"line\">                sumlist[j] += int(bitwise[j])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">32</span>):</span><br><span class=\"line\">            summary += <span class=\"number\">2</span>**(<span class=\"number\">31</span>-i)*(sumlist[i]%<span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> summary*[<span class=\"number\">1</span>,<span class=\"number\">-1</span>][negcnt%<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<p>和上面的方法比起来，额外空间简化成了常数， 即O(1)。</p>\n<p>不过话说回来，这是一种用时间换空间的做法，上面的做法时间是2n， 这个是32n，虽然复杂度都是O(n),但是实际运行时间差距还是比较大的。</p>\n<p>（ · x · ）~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近两天碰到两个用位运算解决的题目，恰好一个利用位运算简化了时间复杂度，另一个简化了空间复杂度，所以做个记录加深一下印象。<br>第一个题目是LeetCode 421. Maximum XOR of Two Numbers in an Array:<br>**注：这题中提到的异或均是按位异或。</p>\n<blockquote>\n<p>Given a non-empty array of numbers, a0, a1, a2, … , an-1, where 0 ≤ ai &lt; 231.</p>\n</blockquote>\n<blockquote>\n<p>Find the maximum result of ai XOR aj, where 0 ≤ i, j &lt; n.</p>\n</blockquote>\n<blockquote>\n<p>Could you do this in O(n) runtime?</p>\n</blockquote>\n<blockquote>\n<p>Example:</p>\n</blockquote>\n<blockquote>\n<p>Input: [3, 10, 5, 25, 2, 8]</p>\n</blockquote>\n<blockquote>\n<p>Output: 28</p>\n</blockquote>\n<blockquote>\n<p>Explanation: The maximum result is 5 ^ 25 = 28.</p>\n</blockquote>\n<p>这题的描述中明确指出了<strong>do this in O(n) runtime</strong> ，如果要两两异或比较大小的话很明显需要O(n^2)的时间复杂度。</p>\n<p>那怎么样才能用位运算解决这个问题呢？</p>\n<p>如果我们遇到的场景是这样：</p>\n<blockquote>\n<p>假定数组中所有的元素都可以用8位2进制数来表示，如果我们已经知道所有数前7位的最大异或值maxor，怎样求8位数的最大异或值？</p>\n</blockquote>\n<p>很容易想到8位数的最大异或值只可能是前7位后面跟上0或1， 所以我们先假设后面能跟上1，即<strong>假设的</strong>最大异或值为</p>\n<blockquote>\n<p>maxornew =（maxor &lt;&lt; 1）+ 1;</p>\n</blockquote>\n<p>我们要找到这个最大异或的值会不会出现，一种简单的办法是2个循环遍历数组，然后两两算出异或的值，看是否能找到一个结果与maxornew相同。但是这样会使时间复杂度变成O(n^2)，不满足题目的要求。<br>但是按位异或有一个比较特殊的性质：</p>\n<blockquote>\n<p>若 x ^ y = z ,那么 x ^ z = y , y ^ z = x</p>\n</blockquote>\n<p>这样我们只用拿出数组中每一个八位二进制数， 与maxornew进行异或运算，再判断异或得到的结果是否在数组中，如果不在的话，最大的异或值就是(maxor&lt;&lt;1) ,这样时间复杂度就被简化成为了O(n)</p>\n<p>上面的说完了，这个题目中描述的问题也就迎刃而解了。题目中提到的numbers，由于在给出的函数声明中传入参数为List[int], LeetCode中这样的数一般认为是 32位的int。</p>\n<p>对numbers中每一个数取前n位(1&lt;=n&lt;=32)计算最大异或的值，并且按照上面计算第八位的方法计算下一位，就可以得到整个数组的最大异或值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findMaximumXOR</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">    answer = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">32</span>)[::<span class=\"number\">-1</span>]:</span><br><span class=\"line\">        answer &lt;&lt;= <span class=\"number\">1</span></span><br><span class=\"line\">        prefixes = &#123;num &gt;&gt; i <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums&#125;</span><br><span class=\"line\">        answer += any(answer^<span class=\"number\">1</span> ^ p <span class=\"keyword\">in</span> prefixes <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> prefixes)</span><br><span class=\"line\">        <span class=\"comment\">#print bin(answer)[2:]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n<p>这题利用位运算将原本需要O(n^2)的时间复杂度简化成了O(n)</p>\n<p>============================================================================</p>\n<p>第二个题目是简化空间复杂度，LeetCode 137. Single Number II：</p>\n<blockquote>\n<p>Given an array of integers, every element appears three times except for one, which appears exactly once. Find that single one.</p>\n</blockquote>\n<blockquote>\n<p>Note:<br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? </p>\n</blockquote>\n<p>就是说一个数组中，除了其中一个数只出现一次，其他都出现了三次，找出这个只出现了一次的数。<br>首先我想到的是一个时间复杂度为O(n),使用的额外空间也是O(n)的解法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">singleNumber</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">    :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    numdict = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> numdict:</span><br><span class=\"line\">            numdict[i]+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            numdict[i]=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> numdict[i]==<span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i</span><br></pre></td></tr></table></figure>\n<p>简单来说就是遍历数组的同时记录每个数出现的次数，第二次遍历的时候找出出现了一次的数。</p>\n<p>如果要将空间复杂度简化成O(1), 使用位运算是一个很好的选择：</p>\n<ol>\n<li>将所有数转换成32位的2进制表示</li>\n<li>把每一位的值加起来对3取余</li>\n<li>转换成十进制表示</li>\n<li>Python将负整数转换成二进制数的时候，直接是’-‘加上这个数的绝对值的二进制表示，所以负号单独计算。<br>代码如下：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">singleNumber</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        sumlist = [<span class=\"number\">0</span>]*<span class=\"number\">32</span></span><br><span class=\"line\">        summary, negcnt = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">            negcnt += i &lt; <span class=\"number\">0</span></span><br><span class=\"line\">            i = abs(i)</span><br><span class=\"line\">            bitwise = format(i, <span class=\"string\">'032b'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> xrange(<span class=\"number\">32</span>):</span><br><span class=\"line\">                sumlist[j] += int(bitwise[j])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">32</span>):</span><br><span class=\"line\">            summary += <span class=\"number\">2</span>**(<span class=\"number\">31</span>-i)*(sumlist[i]%<span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> summary*[<span class=\"number\">1</span>,<span class=\"number\">-1</span>][negcnt%<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<p>和上面的方法比起来，额外空间简化成了常数， 即O(1)。</p>\n<p>不过话说回来，这是一种用时间换空间的做法，上面的做法时间是2n， 这个是32n，虽然复杂度都是O(n),但是实际运行时间差距还是比较大的。</p>\n<p>（ · x · ）~</p>\n"},{"title":"Fluent Python 第十一章 从协议到抽象基类","date":"2018-07-28T10:00:00.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true"],"toc":true,"comment":true,"_content":"\n## Fluent Python ##\n### Chapter 11. Interfaces From Protocols to ABCs\n### 第十一章: 从协议到抽象基类\n\n本章主要讨论接口，从鸭子类型的动态协议到使接口更加明确，能验证实现是否符合规定的抽象基类（ABC）\n\n本章会专门讲解抽象基类。首先，本章说明抽象基类的常见用途：实现接口时作为超类使用。然后，说明抽象基类如何检查具体子类是否符合接口定义，以及如何使用注册机制声明一个类实现了某个接口，而不进行子类化操作。最后，说明如何让抽象基类自动“识别”任何符合接口的类——不进行子类化或注册。\n\n#### Python 中的接口和协议\n\nPython中，我们把协议定为非正式的接口， 协议也是Python这类动态语言实现多态的方式。\n\nPython 中接口的运作方式: Python 中没有interface 关键字， 并且除了抽象基类（ABC）,每个类都有接口，实现方式为：类实现或继承公开属性(方法或者数据属性)\n\n关于接口有一个实用的补充定义：对象公开方法的子集，让对象在系统中扮演特定角色。\n借口是实现特定角色的方法的集合，这就是协议。协议与继承没有关系，一个类可能实现多个接口使同一个实例扮演多个角色。\n\n协议不是正式的接口, 没有接口一致性的各种强制，因此一个类可以只实现部分接口。\n\n\n#### Python中的序列协议\n\nPython中数据模型的哲学是尽量支持基本协议， 下面的图展示了抽象基类Sequence的正式接口。\n\n![Figure-11-1](https://github.com/aldslvda/blog-images/blob/master/fluent-python-11.1.png?raw=true)\n\n如果没有实现\\_\\_iter\\_\\_和\\_\\_contains\\_\\_方法， Python会调用\\_\\_getitem\\_\\_方法， 设法让迭代和in运算符可用。几十一个对象只实现了\\_\\_getitem\\_\\_方法，也能进行迭代，为了迭代对象，解释器会尝试调用两个不同的方法。\n\n\n#### 使用猴子补丁在运行时实现协议\n\n> 得益于鸭子类型，如果遵守既定的协议，很有可能增加利用现有的标准库和第三方代码的可能性。\n> 猴子补丁: 在运行时修改类或者模块，而不改动源码。这种技术非常强大，但是打补丁的代码和被打补丁的程序需要耦合非常紧密，而且往往要处理没有文档的部分。\n\n\n\n协议可以支持猴子补丁， 恰恰说明了协议的动态性： 即使对象一开始没有实现所需的方法，后来用补丁的形式加进去也行。这也是鸭子类型思想的一个缩影。\n\n\n#### 关于抽象基类和白鹅类型\n\n> 白鹅类型： 只要cls是抽象基类， 即cls的元类是abc.ABCMeta, 就可以使用isinstance(obj, cls)\n- 抽象基类的本质就是几个特殊方法的集合\n- 可以用instance(obj, cls)检查类是否已经实现了抽象基类定义的api契约。\n- 需要注意的是 生产代码中尽量避免定义抽象基类，极容易因为设计不当造成滥用，滥用抽象基类会造成**灾难性的后果**\n- 抽象基类是封装框架引入一般性概念和抽象的。\n\n\n#### 定义抽象基类的子类\n\n要想实现子类，可以覆盖从抽象基类中继承的方法，以更高效的方式重新实现。例如\\_\\_contains\\_\\_方法会扫描序列，如果你定义的序列按顺序排列，那么就可以重新定义这个方法使用bisect函数二分查找。\n\n#### 标准库中的抽象基类\n\n##### collections.abc模块\nPython 标准库中有两个abc模块，一个是collections.abc， 另一个是abc.ABC，后者是所有抽象基类的依赖。\ncollections.abc类中有16个抽象基类，它们的继承关系如下图所示:\n\n![Figure-11-2](https://github.com/aldslvda/blog-images/blob/master/fluent-python-11.2.png?raw=true)\n\n- Iterable、Container 和 Sized\n    各个集合应该继承这三个抽象基类，或者至少实现兼容的协议。Iterable 通过\\_\\_iter\\_\\_方法支持迭代，Container 通过 \\_\\_contains\\_\\_ 方法支持 in 运算符，Sized通过 \\_\\_len\\_\\_ 方法支持 len() 函数。\n\n- Sequence、Mapping 和 Set\n　　这三个是主要的不可变集合类型，而且各自都有可变的子类。\n\n- MappingView\n　　在 Python 3 中，映射方法 .items()、.keys() 和 .values() 返回的对象分别是ItemsView 、KeysView 和 ValuesView 的实例。前两个类还从 Set 类继承了丰富的接口，包含 3.8.3 节所述的全部运算符。\n\n- Callable 和 Hashable\n　　这两个抽象基类与集合没有太大的关系，只不过因为 collections.abc 是标准库中定义抽象基类的第一个模块，而它们又太重要了，因此才把它们放到 collections.abc模块中。这两个抽象基类的主要作用是为内置函数 isinstance 提供支持，以一种安全的方式判断对象能不能调用或散列。若想检查是否能调用，可以使用内置的 callable() 函数；但是没有类似的 hashable() 函数，因此测试对象是否可散列，最好使用 isinstance(my_obj, Hashable)。\n\n- Iterator\n　　它是 Iterable 的子类。\n\n##### 抽象基类中的数字塔numbers\n\nnumbers包定义的是数字塔，包含的类如下，通过类名即可判断出他们的继承关系:\n\n- Number\n- Complex\n- Real\n- Rational\n- Integral\n\n### 本章小结\n\n本章介绍了Python中非正式接口(协议的高动态本性)，以及Python中接口的运作方式，同时介绍了Python中的抽象基类及其类别和用途。\n\n> 尽管抽象基类使得类型检查变得更容易了，但不应该在程序中过度使用它。Python 的核心在于它是一门动态语言，它带来了极大的灵活性。如果处处都强制实行类型约束，那么会使代码变得更加复杂，而本不应该如此。我们应该拥抱 Python 的灵活性.\n> \"如果觉得自己想创建新的抽象基类，先试着通过常规的鸭子类型来解决问题。”\n\n\n\n","source":"_posts/fluent-python-11.md","raw":"title: Fluent Python 第十一章 从协议到抽象基类\ndate: 2018-07-28 18:00:00\ntags:\n- Python\n- duck typing\n- protocal\n- abstract basic class\n- ABC\n- fluent python\n- interfaces\ncategories:\n- 读书笔记\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n## Fluent Python ##\n### Chapter 11. Interfaces From Protocols to ABCs\n### 第十一章: 从协议到抽象基类\n\n本章主要讨论接口，从鸭子类型的动态协议到使接口更加明确，能验证实现是否符合规定的抽象基类（ABC）\n\n本章会专门讲解抽象基类。首先，本章说明抽象基类的常见用途：实现接口时作为超类使用。然后，说明抽象基类如何检查具体子类是否符合接口定义，以及如何使用注册机制声明一个类实现了某个接口，而不进行子类化操作。最后，说明如何让抽象基类自动“识别”任何符合接口的类——不进行子类化或注册。\n\n#### Python 中的接口和协议\n\nPython中，我们把协议定为非正式的接口， 协议也是Python这类动态语言实现多态的方式。\n\nPython 中接口的运作方式: Python 中没有interface 关键字， 并且除了抽象基类（ABC）,每个类都有接口，实现方式为：类实现或继承公开属性(方法或者数据属性)\n\n关于接口有一个实用的补充定义：对象公开方法的子集，让对象在系统中扮演特定角色。\n借口是实现特定角色的方法的集合，这就是协议。协议与继承没有关系，一个类可能实现多个接口使同一个实例扮演多个角色。\n\n协议不是正式的接口, 没有接口一致性的各种强制，因此一个类可以只实现部分接口。\n\n\n#### Python中的序列协议\n\nPython中数据模型的哲学是尽量支持基本协议， 下面的图展示了抽象基类Sequence的正式接口。\n\n![Figure-11-1](https://github.com/aldslvda/blog-images/blob/master/fluent-python-11.1.png?raw=true)\n\n如果没有实现\\_\\_iter\\_\\_和\\_\\_contains\\_\\_方法， Python会调用\\_\\_getitem\\_\\_方法， 设法让迭代和in运算符可用。几十一个对象只实现了\\_\\_getitem\\_\\_方法，也能进行迭代，为了迭代对象，解释器会尝试调用两个不同的方法。\n\n\n#### 使用猴子补丁在运行时实现协议\n\n> 得益于鸭子类型，如果遵守既定的协议，很有可能增加利用现有的标准库和第三方代码的可能性。\n> 猴子补丁: 在运行时修改类或者模块，而不改动源码。这种技术非常强大，但是打补丁的代码和被打补丁的程序需要耦合非常紧密，而且往往要处理没有文档的部分。\n\n\n\n协议可以支持猴子补丁， 恰恰说明了协议的动态性： 即使对象一开始没有实现所需的方法，后来用补丁的形式加进去也行。这也是鸭子类型思想的一个缩影。\n\n\n#### 关于抽象基类和白鹅类型\n\n> 白鹅类型： 只要cls是抽象基类， 即cls的元类是abc.ABCMeta, 就可以使用isinstance(obj, cls)\n- 抽象基类的本质就是几个特殊方法的集合\n- 可以用instance(obj, cls)检查类是否已经实现了抽象基类定义的api契约。\n- 需要注意的是 生产代码中尽量避免定义抽象基类，极容易因为设计不当造成滥用，滥用抽象基类会造成**灾难性的后果**\n- 抽象基类是封装框架引入一般性概念和抽象的。\n\n\n#### 定义抽象基类的子类\n\n要想实现子类，可以覆盖从抽象基类中继承的方法，以更高效的方式重新实现。例如\\_\\_contains\\_\\_方法会扫描序列，如果你定义的序列按顺序排列，那么就可以重新定义这个方法使用bisect函数二分查找。\n\n#### 标准库中的抽象基类\n\n##### collections.abc模块\nPython 标准库中有两个abc模块，一个是collections.abc， 另一个是abc.ABC，后者是所有抽象基类的依赖。\ncollections.abc类中有16个抽象基类，它们的继承关系如下图所示:\n\n![Figure-11-2](https://github.com/aldslvda/blog-images/blob/master/fluent-python-11.2.png?raw=true)\n\n- Iterable、Container 和 Sized\n    各个集合应该继承这三个抽象基类，或者至少实现兼容的协议。Iterable 通过\\_\\_iter\\_\\_方法支持迭代，Container 通过 \\_\\_contains\\_\\_ 方法支持 in 运算符，Sized通过 \\_\\_len\\_\\_ 方法支持 len() 函数。\n\n- Sequence、Mapping 和 Set\n　　这三个是主要的不可变集合类型，而且各自都有可变的子类。\n\n- MappingView\n　　在 Python 3 中，映射方法 .items()、.keys() 和 .values() 返回的对象分别是ItemsView 、KeysView 和 ValuesView 的实例。前两个类还从 Set 类继承了丰富的接口，包含 3.8.3 节所述的全部运算符。\n\n- Callable 和 Hashable\n　　这两个抽象基类与集合没有太大的关系，只不过因为 collections.abc 是标准库中定义抽象基类的第一个模块，而它们又太重要了，因此才把它们放到 collections.abc模块中。这两个抽象基类的主要作用是为内置函数 isinstance 提供支持，以一种安全的方式判断对象能不能调用或散列。若想检查是否能调用，可以使用内置的 callable() 函数；但是没有类似的 hashable() 函数，因此测试对象是否可散列，最好使用 isinstance(my_obj, Hashable)。\n\n- Iterator\n　　它是 Iterable 的子类。\n\n##### 抽象基类中的数字塔numbers\n\nnumbers包定义的是数字塔，包含的类如下，通过类名即可判断出他们的继承关系:\n\n- Number\n- Complex\n- Real\n- Rational\n- Integral\n\n### 本章小结\n\n本章介绍了Python中非正式接口(协议的高动态本性)，以及Python中接口的运作方式，同时介绍了Python中的抽象基类及其类别和用途。\n\n> 尽管抽象基类使得类型检查变得更容易了，但不应该在程序中过度使用它。Python 的核心在于它是一门动态语言，它带来了极大的灵活性。如果处处都强制实行类型约束，那么会使代码变得更加复杂，而本不应该如此。我们应该拥抱 Python 的灵活性.\n> \"如果觉得自己想创建新的抽象基类，先试着通过常规的鸭子类型来解决问题。”\n\n\n\n","slug":"fluent-python-11","published":1,"updated":"2019-04-25T01:27:24.979Z","comments":1,"layout":"post","link":"","_id":"cjuw5c69p0008dhyft2llnkrx","content":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-11-Interfaces-From-Protocols-to-ABCs\"><a href=\"#Chapter-11-Interfaces-From-Protocols-to-ABCs\" class=\"headerlink\" title=\"Chapter 11. Interfaces From Protocols to ABCs\"></a>Chapter 11. Interfaces From Protocols to ABCs</h3><h3 id=\"第十一章-从协议到抽象基类\"><a href=\"#第十一章-从协议到抽象基类\" class=\"headerlink\" title=\"第十一章: 从协议到抽象基类\"></a>第十一章: 从协议到抽象基类</h3><p>本章主要讨论接口，从鸭子类型的动态协议到使接口更加明确，能验证实现是否符合规定的抽象基类（ABC）</p>\n<p>本章会专门讲解抽象基类。首先，本章说明抽象基类的常见用途：实现接口时作为超类使用。然后，说明抽象基类如何检查具体子类是否符合接口定义，以及如何使用注册机制声明一个类实现了某个接口，而不进行子类化操作。最后，说明如何让抽象基类自动“识别”任何符合接口的类——不进行子类化或注册。</p>\n<h4 id=\"Python-中的接口和协议\"><a href=\"#Python-中的接口和协议\" class=\"headerlink\" title=\"Python 中的接口和协议\"></a>Python 中的接口和协议</h4><p>Python中，我们把协议定为非正式的接口， 协议也是Python这类动态语言实现多态的方式。</p>\n<p>Python 中接口的运作方式: Python 中没有interface 关键字， 并且除了抽象基类（ABC）,每个类都有接口，实现方式为：类实现或继承公开属性(方法或者数据属性)</p>\n<p>关于接口有一个实用的补充定义：对象公开方法的子集，让对象在系统中扮演特定角色。<br>借口是实现特定角色的方法的集合，这就是协议。协议与继承没有关系，一个类可能实现多个接口使同一个实例扮演多个角色。</p>\n<p>协议不是正式的接口, 没有接口一致性的各种强制，因此一个类可以只实现部分接口。</p>\n<h4 id=\"Python中的序列协议\"><a href=\"#Python中的序列协议\" class=\"headerlink\" title=\"Python中的序列协议\"></a>Python中的序列协议</h4><p>Python中数据模型的哲学是尽量支持基本协议， 下面的图展示了抽象基类Sequence的正式接口。</p>\n<p><img src=\"https://github.com/aldslvda/blog-images/blob/master/fluent-python-11.1.png?raw=true\" alt=\"Figure-11-1\"></p>\n<p>如果没有实现__iter__和__contains__方法， Python会调用__getitem__方法， 设法让迭代和in运算符可用。几十一个对象只实现了__getitem__方法，也能进行迭代，为了迭代对象，解释器会尝试调用两个不同的方法。</p>\n<h4 id=\"使用猴子补丁在运行时实现协议\"><a href=\"#使用猴子补丁在运行时实现协议\" class=\"headerlink\" title=\"使用猴子补丁在运行时实现协议\"></a>使用猴子补丁在运行时实现协议</h4><blockquote>\n<p>得益于鸭子类型，如果遵守既定的协议，很有可能增加利用现有的标准库和第三方代码的可能性。<br>猴子补丁: 在运行时修改类或者模块，而不改动源码。这种技术非常强大，但是打补丁的代码和被打补丁的程序需要耦合非常紧密，而且往往要处理没有文档的部分。</p>\n</blockquote>\n<p>协议可以支持猴子补丁， 恰恰说明了协议的动态性： 即使对象一开始没有实现所需的方法，后来用补丁的形式加进去也行。这也是鸭子类型思想的一个缩影。</p>\n<h4 id=\"关于抽象基类和白鹅类型\"><a href=\"#关于抽象基类和白鹅类型\" class=\"headerlink\" title=\"关于抽象基类和白鹅类型\"></a>关于抽象基类和白鹅类型</h4><blockquote>\n<p>白鹅类型： 只要cls是抽象基类， 即cls的元类是abc.ABCMeta, 就可以使用isinstance(obj, cls)</p>\n<ul>\n<li>抽象基类的本质就是几个特殊方法的集合</li>\n<li>可以用instance(obj, cls)检查类是否已经实现了抽象基类定义的api契约。</li>\n<li>需要注意的是 生产代码中尽量避免定义抽象基类，极容易因为设计不当造成滥用，滥用抽象基类会造成<strong>灾难性的后果</strong></li>\n<li>抽象基类是封装框架引入一般性概念和抽象的。</li>\n</ul>\n</blockquote>\n<h4 id=\"定义抽象基类的子类\"><a href=\"#定义抽象基类的子类\" class=\"headerlink\" title=\"定义抽象基类的子类\"></a>定义抽象基类的子类</h4><p>要想实现子类，可以覆盖从抽象基类中继承的方法，以更高效的方式重新实现。例如__contains__方法会扫描序列，如果你定义的序列按顺序排列，那么就可以重新定义这个方法使用bisect函数二分查找。</p>\n<h4 id=\"标准库中的抽象基类\"><a href=\"#标准库中的抽象基类\" class=\"headerlink\" title=\"标准库中的抽象基类\"></a>标准库中的抽象基类</h4><h5 id=\"collections-abc模块\"><a href=\"#collections-abc模块\" class=\"headerlink\" title=\"collections.abc模块\"></a>collections.abc模块</h5><p>Python 标准库中有两个abc模块，一个是collections.abc， 另一个是abc.ABC，后者是所有抽象基类的依赖。<br>collections.abc类中有16个抽象基类，它们的继承关系如下图所示:</p>\n<p><img src=\"https://github.com/aldslvda/blog-images/blob/master/fluent-python-11.2.png?raw=true\" alt=\"Figure-11-2\"></p>\n<ul>\n<li><p>Iterable、Container 和 Sized<br>  各个集合应该继承这三个抽象基类，或者至少实现兼容的协议。Iterable 通过__iter__方法支持迭代，Container 通过 __contains__ 方法支持 in 运算符，Sized通过 __len__ 方法支持 len() 函数。</p>\n</li>\n<li><p>Sequence、Mapping 和 Set<br>　　这三个是主要的不可变集合类型，而且各自都有可变的子类。</p>\n</li>\n<li><p>MappingView<br>　　在 Python 3 中，映射方法 .items()、.keys() 和 .values() 返回的对象分别是ItemsView 、KeysView 和 ValuesView 的实例。前两个类还从 Set 类继承了丰富的接口，包含 3.8.3 节所述的全部运算符。</p>\n</li>\n<li><p>Callable 和 Hashable<br>　　这两个抽象基类与集合没有太大的关系，只不过因为 collections.abc 是标准库中定义抽象基类的第一个模块，而它们又太重要了，因此才把它们放到 collections.abc模块中。这两个抽象基类的主要作用是为内置函数 isinstance 提供支持，以一种安全的方式判断对象能不能调用或散列。若想检查是否能调用，可以使用内置的 callable() 函数；但是没有类似的 hashable() 函数，因此测试对象是否可散列，最好使用 isinstance(my_obj, Hashable)。</p>\n</li>\n<li><p>Iterator<br>　　它是 Iterable 的子类。</p>\n</li>\n</ul>\n<h5 id=\"抽象基类中的数字塔numbers\"><a href=\"#抽象基类中的数字塔numbers\" class=\"headerlink\" title=\"抽象基类中的数字塔numbers\"></a>抽象基类中的数字塔numbers</h5><p>numbers包定义的是数字塔，包含的类如下，通过类名即可判断出他们的继承关系:</p>\n<ul>\n<li>Number</li>\n<li>Complex</li>\n<li>Real</li>\n<li>Rational</li>\n<li>Integral</li>\n</ul>\n<h3 id=\"本章小结\"><a href=\"#本章小结\" class=\"headerlink\" title=\"本章小结\"></a>本章小结</h3><p>本章介绍了Python中非正式接口(协议的高动态本性)，以及Python中接口的运作方式，同时介绍了Python中的抽象基类及其类别和用途。</p>\n<blockquote>\n<p>尽管抽象基类使得类型检查变得更容易了，但不应该在程序中过度使用它。Python 的核心在于它是一门动态语言，它带来了极大的灵活性。如果处处都强制实行类型约束，那么会使代码变得更加复杂，而本不应该如此。我们应该拥抱 Python 的灵活性.<br>“如果觉得自己想创建新的抽象基类，先试着通过常规的鸭子类型来解决问题。”</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-11-Interfaces-From-Protocols-to-ABCs\"><a href=\"#Chapter-11-Interfaces-From-Protocols-to-ABCs\" class=\"headerlink\" title=\"Chapter 11. Interfaces From Protocols to ABCs\"></a>Chapter 11. Interfaces From Protocols to ABCs</h3><h3 id=\"第十一章-从协议到抽象基类\"><a href=\"#第十一章-从协议到抽象基类\" class=\"headerlink\" title=\"第十一章: 从协议到抽象基类\"></a>第十一章: 从协议到抽象基类</h3><p>本章主要讨论接口，从鸭子类型的动态协议到使接口更加明确，能验证实现是否符合规定的抽象基类（ABC）</p>\n<p>本章会专门讲解抽象基类。首先，本章说明抽象基类的常见用途：实现接口时作为超类使用。然后，说明抽象基类如何检查具体子类是否符合接口定义，以及如何使用注册机制声明一个类实现了某个接口，而不进行子类化操作。最后，说明如何让抽象基类自动“识别”任何符合接口的类——不进行子类化或注册。</p>\n<h4 id=\"Python-中的接口和协议\"><a href=\"#Python-中的接口和协议\" class=\"headerlink\" title=\"Python 中的接口和协议\"></a>Python 中的接口和协议</h4><p>Python中，我们把协议定为非正式的接口， 协议也是Python这类动态语言实现多态的方式。</p>\n<p>Python 中接口的运作方式: Python 中没有interface 关键字， 并且除了抽象基类（ABC）,每个类都有接口，实现方式为：类实现或继承公开属性(方法或者数据属性)</p>\n<p>关于接口有一个实用的补充定义：对象公开方法的子集，让对象在系统中扮演特定角色。<br>借口是实现特定角色的方法的集合，这就是协议。协议与继承没有关系，一个类可能实现多个接口使同一个实例扮演多个角色。</p>\n<p>协议不是正式的接口, 没有接口一致性的各种强制，因此一个类可以只实现部分接口。</p>\n<h4 id=\"Python中的序列协议\"><a href=\"#Python中的序列协议\" class=\"headerlink\" title=\"Python中的序列协议\"></a>Python中的序列协议</h4><p>Python中数据模型的哲学是尽量支持基本协议， 下面的图展示了抽象基类Sequence的正式接口。</p>\n<p><img src=\"https://github.com/aldslvda/blog-images/blob/master/fluent-python-11.1.png?raw=true\" alt=\"Figure-11-1\"></p>\n<p>如果没有实现__iter__和__contains__方法， Python会调用__getitem__方法， 设法让迭代和in运算符可用。几十一个对象只实现了__getitem__方法，也能进行迭代，为了迭代对象，解释器会尝试调用两个不同的方法。</p>\n<h4 id=\"使用猴子补丁在运行时实现协议\"><a href=\"#使用猴子补丁在运行时实现协议\" class=\"headerlink\" title=\"使用猴子补丁在运行时实现协议\"></a>使用猴子补丁在运行时实现协议</h4><blockquote>\n<p>得益于鸭子类型，如果遵守既定的协议，很有可能增加利用现有的标准库和第三方代码的可能性。<br>猴子补丁: 在运行时修改类或者模块，而不改动源码。这种技术非常强大，但是打补丁的代码和被打补丁的程序需要耦合非常紧密，而且往往要处理没有文档的部分。</p>\n</blockquote>\n<p>协议可以支持猴子补丁， 恰恰说明了协议的动态性： 即使对象一开始没有实现所需的方法，后来用补丁的形式加进去也行。这也是鸭子类型思想的一个缩影。</p>\n<h4 id=\"关于抽象基类和白鹅类型\"><a href=\"#关于抽象基类和白鹅类型\" class=\"headerlink\" title=\"关于抽象基类和白鹅类型\"></a>关于抽象基类和白鹅类型</h4><blockquote>\n<p>白鹅类型： 只要cls是抽象基类， 即cls的元类是abc.ABCMeta, 就可以使用isinstance(obj, cls)</p>\n<ul>\n<li>抽象基类的本质就是几个特殊方法的集合</li>\n<li>可以用instance(obj, cls)检查类是否已经实现了抽象基类定义的api契约。</li>\n<li>需要注意的是 生产代码中尽量避免定义抽象基类，极容易因为设计不当造成滥用，滥用抽象基类会造成<strong>灾难性的后果</strong></li>\n<li>抽象基类是封装框架引入一般性概念和抽象的。</li>\n</ul>\n</blockquote>\n<h4 id=\"定义抽象基类的子类\"><a href=\"#定义抽象基类的子类\" class=\"headerlink\" title=\"定义抽象基类的子类\"></a>定义抽象基类的子类</h4><p>要想实现子类，可以覆盖从抽象基类中继承的方法，以更高效的方式重新实现。例如__contains__方法会扫描序列，如果你定义的序列按顺序排列，那么就可以重新定义这个方法使用bisect函数二分查找。</p>\n<h4 id=\"标准库中的抽象基类\"><a href=\"#标准库中的抽象基类\" class=\"headerlink\" title=\"标准库中的抽象基类\"></a>标准库中的抽象基类</h4><h5 id=\"collections-abc模块\"><a href=\"#collections-abc模块\" class=\"headerlink\" title=\"collections.abc模块\"></a>collections.abc模块</h5><p>Python 标准库中有两个abc模块，一个是collections.abc， 另一个是abc.ABC，后者是所有抽象基类的依赖。<br>collections.abc类中有16个抽象基类，它们的继承关系如下图所示:</p>\n<p><img src=\"https://github.com/aldslvda/blog-images/blob/master/fluent-python-11.2.png?raw=true\" alt=\"Figure-11-2\"></p>\n<ul>\n<li><p>Iterable、Container 和 Sized<br>  各个集合应该继承这三个抽象基类，或者至少实现兼容的协议。Iterable 通过__iter__方法支持迭代，Container 通过 __contains__ 方法支持 in 运算符，Sized通过 __len__ 方法支持 len() 函数。</p>\n</li>\n<li><p>Sequence、Mapping 和 Set<br>　　这三个是主要的不可变集合类型，而且各自都有可变的子类。</p>\n</li>\n<li><p>MappingView<br>　　在 Python 3 中，映射方法 .items()、.keys() 和 .values() 返回的对象分别是ItemsView 、KeysView 和 ValuesView 的实例。前两个类还从 Set 类继承了丰富的接口，包含 3.8.3 节所述的全部运算符。</p>\n</li>\n<li><p>Callable 和 Hashable<br>　　这两个抽象基类与集合没有太大的关系，只不过因为 collections.abc 是标准库中定义抽象基类的第一个模块，而它们又太重要了，因此才把它们放到 collections.abc模块中。这两个抽象基类的主要作用是为内置函数 isinstance 提供支持，以一种安全的方式判断对象能不能调用或散列。若想检查是否能调用，可以使用内置的 callable() 函数；但是没有类似的 hashable() 函数，因此测试对象是否可散列，最好使用 isinstance(my_obj, Hashable)。</p>\n</li>\n<li><p>Iterator<br>　　它是 Iterable 的子类。</p>\n</li>\n</ul>\n<h5 id=\"抽象基类中的数字塔numbers\"><a href=\"#抽象基类中的数字塔numbers\" class=\"headerlink\" title=\"抽象基类中的数字塔numbers\"></a>抽象基类中的数字塔numbers</h5><p>numbers包定义的是数字塔，包含的类如下，通过类名即可判断出他们的继承关系:</p>\n<ul>\n<li>Number</li>\n<li>Complex</li>\n<li>Real</li>\n<li>Rational</li>\n<li>Integral</li>\n</ul>\n<h3 id=\"本章小结\"><a href=\"#本章小结\" class=\"headerlink\" title=\"本章小结\"></a>本章小结</h3><p>本章介绍了Python中非正式接口(协议的高动态本性)，以及Python中接口的运作方式，同时介绍了Python中的抽象基类及其类别和用途。</p>\n<blockquote>\n<p>尽管抽象基类使得类型检查变得更容易了，但不应该在程序中过度使用它。Python 的核心在于它是一门动态语言，它带来了极大的灵活性。如果处处都强制实行类型约束，那么会使代码变得更加复杂，而本不应该如此。我们应该拥抱 Python 的灵活性.<br>“如果觉得自己想创建新的抽象基类，先试着通过常规的鸭子类型来解决问题。”</p>\n</blockquote>\n"},{"title":"Fluent Python 第十三章 正确使用运算符重载","date":"2018-08-29T10:55:00.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true"],"toc":true,"comment":true,"_content":"\n## Fluent Python ##\n### Chapter 13. Operator Overloading: Doing It Right\n### 第十三章: 正确使用运算符重载\n\n运算符重载的作用是让用户定义的对象使用中缀运算符或一元运算符。宽泛一些来讲，Python中的函数调用（()）,属性访问（.）,和元素访问/切片（[]）也是运算符，不过本章只讨论一元运算符和中缀运算符。\n\n接下来我们会讨论这几个问题:\n\n- Python中如何处理运算符中不同类型的操作数\n- 使用压制类型或者显式类型检查处理不同类型的操作数\n- 中缀运算符如何表明自己无法处理操作数\n- 众多比较运算符(==, > ,<=)等的特殊行为\n- 增量赋值运算符的默认处理方式和重载方式\n\n\n#### 13.1 运算符重载基础\n\nPython 在运算符重载方面进行了一些限制，做好了灵活性、可用性和安全性方面的平衡。\n\n- 不能重载内置类型的运算符\n- 不能新建运算符，只能使用现有的\n- 某些运算符不能重载——is、and、or、not\n\n\n#### 13.2 一元运算符\n\nPython语言参考手册中，列出了3个一元运算符:\n\n- \\- 取负运算符，对应特殊方法 \\_\\_neg\\_\\_\n- \\+ 取正运算符，对应特殊方法 \\_\\_pos\\_\\_\n- ~  取反运算符，对应特殊方法 \\_\\_invert\\_\\_\n\nPython 中还有一个较为特殊的一元运算符abs(), 取绝对值操作符，对应的是特殊方法 \\_\\_abs\\_\\_\n\n支持一元运算符很简单，只需要实现相应的特殊方法。这些特殊方法只有一个参数self。需要遵循的基本规则是始终返回一个新对象，也就是说不能修改self， 而是要创建并返回合适类型的新实例。\n\n一般来说， \\-，\\+ 返回与self同一类型的实例。abs一般返回一个标量。对于~来说，很难说什么结果是合理的，例如ORM中SQL WHERE语句取反就应该返回反集。\n\n#### 13.3  为Vector重载向量加法运算符\\+\n之前的章节中我们实现过向量Vector 现在为它实现运算符重载\n\n> 序列应当支持\\+运算符(用于拼接)， 以及\\*运算符(用于重复复制)\n\n然而我们要做的是，为向量实现向量加法和向量乘法运算(点乘)\n\n我们想象中的向量加法应该实现下面两点:\n\n- 对于两个维度相同的向量， 分量分别相加\n- 对于两个维度不同的向量，分量少的尾部补零向量再相加\n\n基于以上两点，可以初步写出相应的特殊方法:\n\n```python\ndef __add__(self, other):\n    pairs = itertools.zip_longest(self, other, fillvalue=0.0)\n    return Vector(a+b for a,b in pairs)\n```\n\n**需要注意的点**： 实现医院运算符和中缀运算符的特殊方法一定不能修改操作数，这些操作符理应返回新对象，只有增量赋值表达式可能修改第一个操作数。\n\n为了支持涉及不同类型的运算， Python 为中缀运算符特殊方法提供了特殊的分派机制 ， 对于表达式a\\+b来说，解释器会执行以下几步操作\n\n- 如果a有\\_\\_add\\_\\_方法， 而且返回值不是NotImplemented, 调用a.\\_\\_add\\_\\_(b)\n- 如果没有\\_\\_add\\_\\_方法， 或者\\_\\_add\\_\\_方法返回NotImplemented, 检查b有没有\\_\\_radd\\_\\_， 如果有且返回不是NotImplemented，返回b.\\_\\_radd\\_\\_(a)\n- 如果b没有\\_\\_radd\\_\\_或者\\_\\_radd\\_\\_返回NotImplemented, 抛出TypeError, traceback 中会指明操作数不支持。\n\n具体的情况如下图所示:\n![Figure-13-1](https://github.com/aldslvda/blog-images/blob/master/fluent-python-13.1.png?raw=true)\n\n> NotImplemented和NotImplementedError是不同的， 前者是特殊的单例值，在运算符无法处理操作数时返回（**return**）给解释器，后者是一种异常，抽象类抛出（**raise**）这个异常提醒子类必须覆盖。\n>\n> NotImplemented 与Error的不同在于，返回NotImplemented时， 另一个操作数还有机会执行反向的运算方法。这是Python种运算符的一种分派机制。\n\n#### 13.4 重载标量乘法运算符\\*\n\n向量的标量积(scalar product) 有两种:\n-  向量与标量相乘， 结果是与原向量方向相同， 模\b\b是原向量模的标量倍\b的**向量**\n-  向量与向量相乘，结果是各个分量的积求和的**标量**\n\nNumPy等库目前的做法是，不重载这两种意义的*， 向量与向量相乘的情况用 numpy.dot()处理\n\n类似加号的重载， 我们为Vector 写好了\\_\\_mul\\_\\_和\\_\\_rmul\\_\\_方法。\n\n```python\ndef __mul__(self, scalar):\n    return Vector(n * scalar for n in self)\ndef __rmul__(self, scalar):\n    return self * scalar \n```\n\n> Python 3.5 以后的版本提供了@运算符， 计算两个向量相乘的标量积。特殊方法为\\_\\_matmul\\_\\_\n\n#### 13.5 比较运算符\n\nPython 解释器对众多比较运算符的处理与前文类似，不过有两点比较明显的区别：\n\n- 正向和反向调用使用的是同一系列方法。例如，对 == 来说，正向和反向调用都是 \\_\\_eq\\_\\_ 方法，只是把参数对调了；而正向的 \\_\\_gt\\_\\_ 方法调用的是反向的 \\_\\_lt\\_\\_ 方法，并把参数对调。\n- 对 == 和 != 来说，如果反向调用失败，Python 会比较对象的 ID，而不抛出TypeError。\n\n> Python3 中 \\_\\_ne\\_\\_的结果是对 \\_\\_eq\\_\\_ 方法取反的结果， 一些不合适的比较会返回TypeError而不比较对象ID\n\n#### 13.6 增量赋值运算符\n\n> 增量赋值不会修改不可变目标，而是新建实例然后重新绑定。\n> 需要指出的是， 不可变类型一定不能实现就地特殊方法，即修改实例本身的方法\n\n如果一个类没有实现就地运算符对应的特殊方法，增量赋值运算符只是语法糖：a += b 的作用与 a = a + b 完全一样。对不可变类型来说，这是预期的行为，而且，如果定义了\\_\\_add\\_\\_ 方法的话，不用编写额外的代码，+= 就能使用。\n然而，如果实现了就地运算符方法，例如 \\_\\_iadd\\_\\_，计算 a += b 的结果时会调用就地运算符方法。这种运算符的名称表明，它们会就地修改左操作数，而不会创建新对象作为结果。\n\n\n#### 13.7 小结\n\n本章主要介绍了Python中对运算符重载的做法， 限制和特性。\n\n\n\n\n","source":"_posts/fluent-python-13.md","raw":"title: Fluent Python 第十三章 正确使用运算符重载\ndate: 2018-08-29 18:55:00\ntags:\n- Operator Overloading\n- fluent python\ncategories:\n- 读书笔记\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n## Fluent Python ##\n### Chapter 13. Operator Overloading: Doing It Right\n### 第十三章: 正确使用运算符重载\n\n运算符重载的作用是让用户定义的对象使用中缀运算符或一元运算符。宽泛一些来讲，Python中的函数调用（()）,属性访问（.）,和元素访问/切片（[]）也是运算符，不过本章只讨论一元运算符和中缀运算符。\n\n接下来我们会讨论这几个问题:\n\n- Python中如何处理运算符中不同类型的操作数\n- 使用压制类型或者显式类型检查处理不同类型的操作数\n- 中缀运算符如何表明自己无法处理操作数\n- 众多比较运算符(==, > ,<=)等的特殊行为\n- 增量赋值运算符的默认处理方式和重载方式\n\n\n#### 13.1 运算符重载基础\n\nPython 在运算符重载方面进行了一些限制，做好了灵活性、可用性和安全性方面的平衡。\n\n- 不能重载内置类型的运算符\n- 不能新建运算符，只能使用现有的\n- 某些运算符不能重载——is、and、or、not\n\n\n#### 13.2 一元运算符\n\nPython语言参考手册中，列出了3个一元运算符:\n\n- \\- 取负运算符，对应特殊方法 \\_\\_neg\\_\\_\n- \\+ 取正运算符，对应特殊方法 \\_\\_pos\\_\\_\n- ~  取反运算符，对应特殊方法 \\_\\_invert\\_\\_\n\nPython 中还有一个较为特殊的一元运算符abs(), 取绝对值操作符，对应的是特殊方法 \\_\\_abs\\_\\_\n\n支持一元运算符很简单，只需要实现相应的特殊方法。这些特殊方法只有一个参数self。需要遵循的基本规则是始终返回一个新对象，也就是说不能修改self， 而是要创建并返回合适类型的新实例。\n\n一般来说， \\-，\\+ 返回与self同一类型的实例。abs一般返回一个标量。对于~来说，很难说什么结果是合理的，例如ORM中SQL WHERE语句取反就应该返回反集。\n\n#### 13.3  为Vector重载向量加法运算符\\+\n之前的章节中我们实现过向量Vector 现在为它实现运算符重载\n\n> 序列应当支持\\+运算符(用于拼接)， 以及\\*运算符(用于重复复制)\n\n然而我们要做的是，为向量实现向量加法和向量乘法运算(点乘)\n\n我们想象中的向量加法应该实现下面两点:\n\n- 对于两个维度相同的向量， 分量分别相加\n- 对于两个维度不同的向量，分量少的尾部补零向量再相加\n\n基于以上两点，可以初步写出相应的特殊方法:\n\n```python\ndef __add__(self, other):\n    pairs = itertools.zip_longest(self, other, fillvalue=0.0)\n    return Vector(a+b for a,b in pairs)\n```\n\n**需要注意的点**： 实现医院运算符和中缀运算符的特殊方法一定不能修改操作数，这些操作符理应返回新对象，只有增量赋值表达式可能修改第一个操作数。\n\n为了支持涉及不同类型的运算， Python 为中缀运算符特殊方法提供了特殊的分派机制 ， 对于表达式a\\+b来说，解释器会执行以下几步操作\n\n- 如果a有\\_\\_add\\_\\_方法， 而且返回值不是NotImplemented, 调用a.\\_\\_add\\_\\_(b)\n- 如果没有\\_\\_add\\_\\_方法， 或者\\_\\_add\\_\\_方法返回NotImplemented, 检查b有没有\\_\\_radd\\_\\_， 如果有且返回不是NotImplemented，返回b.\\_\\_radd\\_\\_(a)\n- 如果b没有\\_\\_radd\\_\\_或者\\_\\_radd\\_\\_返回NotImplemented, 抛出TypeError, traceback 中会指明操作数不支持。\n\n具体的情况如下图所示:\n![Figure-13-1](https://github.com/aldslvda/blog-images/blob/master/fluent-python-13.1.png?raw=true)\n\n> NotImplemented和NotImplementedError是不同的， 前者是特殊的单例值，在运算符无法处理操作数时返回（**return**）给解释器，后者是一种异常，抽象类抛出（**raise**）这个异常提醒子类必须覆盖。\n>\n> NotImplemented 与Error的不同在于，返回NotImplemented时， 另一个操作数还有机会执行反向的运算方法。这是Python种运算符的一种分派机制。\n\n#### 13.4 重载标量乘法运算符\\*\n\n向量的标量积(scalar product) 有两种:\n-  向量与标量相乘， 结果是与原向量方向相同， 模\b\b是原向量模的标量倍\b的**向量**\n-  向量与向量相乘，结果是各个分量的积求和的**标量**\n\nNumPy等库目前的做法是，不重载这两种意义的*， 向量与向量相乘的情况用 numpy.dot()处理\n\n类似加号的重载， 我们为Vector 写好了\\_\\_mul\\_\\_和\\_\\_rmul\\_\\_方法。\n\n```python\ndef __mul__(self, scalar):\n    return Vector(n * scalar for n in self)\ndef __rmul__(self, scalar):\n    return self * scalar \n```\n\n> Python 3.5 以后的版本提供了@运算符， 计算两个向量相乘的标量积。特殊方法为\\_\\_matmul\\_\\_\n\n#### 13.5 比较运算符\n\nPython 解释器对众多比较运算符的处理与前文类似，不过有两点比较明显的区别：\n\n- 正向和反向调用使用的是同一系列方法。例如，对 == 来说，正向和反向调用都是 \\_\\_eq\\_\\_ 方法，只是把参数对调了；而正向的 \\_\\_gt\\_\\_ 方法调用的是反向的 \\_\\_lt\\_\\_ 方法，并把参数对调。\n- 对 == 和 != 来说，如果反向调用失败，Python 会比较对象的 ID，而不抛出TypeError。\n\n> Python3 中 \\_\\_ne\\_\\_的结果是对 \\_\\_eq\\_\\_ 方法取反的结果， 一些不合适的比较会返回TypeError而不比较对象ID\n\n#### 13.6 增量赋值运算符\n\n> 增量赋值不会修改不可变目标，而是新建实例然后重新绑定。\n> 需要指出的是， 不可变类型一定不能实现就地特殊方法，即修改实例本身的方法\n\n如果一个类没有实现就地运算符对应的特殊方法，增量赋值运算符只是语法糖：a += b 的作用与 a = a + b 完全一样。对不可变类型来说，这是预期的行为，而且，如果定义了\\_\\_add\\_\\_ 方法的话，不用编写额外的代码，+= 就能使用。\n然而，如果实现了就地运算符方法，例如 \\_\\_iadd\\_\\_，计算 a += b 的结果时会调用就地运算符方法。这种运算符的名称表明，它们会就地修改左操作数，而不会创建新对象作为结果。\n\n\n#### 13.7 小结\n\n本章主要介绍了Python中对运算符重载的做法， 限制和特性。\n\n\n\n\n","slug":"fluent-python-13","published":1,"updated":"2019-04-25T01:27:24.933Z","comments":1,"layout":"post","link":"","_id":"cjuw5c69s000bdhyf5yttrd5a","content":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-13-Operator-Overloading-Doing-It-Right\"><a href=\"#Chapter-13-Operator-Overloading-Doing-It-Right\" class=\"headerlink\" title=\"Chapter 13. Operator Overloading: Doing It Right\"></a>Chapter 13. Operator Overloading: Doing It Right</h3><h3 id=\"第十三章-正确使用运算符重载\"><a href=\"#第十三章-正确使用运算符重载\" class=\"headerlink\" title=\"第十三章: 正确使用运算符重载\"></a>第十三章: 正确使用运算符重载</h3><p>运算符重载的作用是让用户定义的对象使用中缀运算符或一元运算符。宽泛一些来讲，Python中的函数调用（()）,属性访问（.）,和元素访问/切片（[]）也是运算符，不过本章只讨论一元运算符和中缀运算符。</p>\n<p>接下来我们会讨论这几个问题:</p>\n<ul>\n<li>Python中如何处理运算符中不同类型的操作数</li>\n<li>使用压制类型或者显式类型检查处理不同类型的操作数</li>\n<li>中缀运算符如何表明自己无法处理操作数</li>\n<li>众多比较运算符(==, &gt; ,&lt;=)等的特殊行为</li>\n<li>增量赋值运算符的默认处理方式和重载方式</li>\n</ul>\n<h4 id=\"13-1-运算符重载基础\"><a href=\"#13-1-运算符重载基础\" class=\"headerlink\" title=\"13.1 运算符重载基础\"></a>13.1 运算符重载基础</h4><p>Python 在运算符重载方面进行了一些限制，做好了灵活性、可用性和安全性方面的平衡。</p>\n<ul>\n<li>不能重载内置类型的运算符</li>\n<li>不能新建运算符，只能使用现有的</li>\n<li>某些运算符不能重载——is、and、or、not</li>\n</ul>\n<h4 id=\"13-2-一元运算符\"><a href=\"#13-2-一元运算符\" class=\"headerlink\" title=\"13.2 一元运算符\"></a>13.2 一元运算符</h4><p>Python语言参考手册中，列出了3个一元运算符:</p>\n<ul>\n<li>- 取负运算符，对应特殊方法 __neg__</li>\n<li>+ 取正运算符，对应特殊方法 __pos__</li>\n<li>~  取反运算符，对应特殊方法 __invert__</li>\n</ul>\n<p>Python 中还有一个较为特殊的一元运算符abs(), 取绝对值操作符，对应的是特殊方法 __abs__</p>\n<p>支持一元运算符很简单，只需要实现相应的特殊方法。这些特殊方法只有一个参数self。需要遵循的基本规则是始终返回一个新对象，也就是说不能修改self， 而是要创建并返回合适类型的新实例。</p>\n<p>一般来说， -，+ 返回与self同一类型的实例。abs一般返回一个标量。对于~来说，很难说什么结果是合理的，例如ORM中SQL WHERE语句取反就应该返回反集。</p>\n<h4 id=\"13-3-为Vector重载向量加法运算符\"><a href=\"#13-3-为Vector重载向量加法运算符\" class=\"headerlink\" title=\"13.3  为Vector重载向量加法运算符+\"></a>13.3  为Vector重载向量加法运算符+</h4><p>之前的章节中我们实现过向量Vector 现在为它实现运算符重载</p>\n<blockquote>\n<p>序列应当支持+运算符(用于拼接)， 以及*运算符(用于重复复制)</p>\n</blockquote>\n<p>然而我们要做的是，为向量实现向量加法和向量乘法运算(点乘)</p>\n<p>我们想象中的向量加法应该实现下面两点:</p>\n<ul>\n<li>对于两个维度相同的向量， 分量分别相加</li>\n<li>对于两个维度不同的向量，分量少的尾部补零向量再相加</li>\n</ul>\n<p>基于以上两点，可以初步写出相应的特殊方法:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__add__</span><span class=\"params\">(self, other)</span>:</span></span><br><span class=\"line\">    pairs = itertools.zip_longest(self, other, fillvalue=<span class=\"number\">0.0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Vector(a+b <span class=\"keyword\">for</span> a,b <span class=\"keyword\">in</span> pairs)</span><br></pre></td></tr></table></figure>\n<p><strong>需要注意的点</strong>： 实现医院运算符和中缀运算符的特殊方法一定不能修改操作数，这些操作符理应返回新对象，只有增量赋值表达式可能修改第一个操作数。</p>\n<p>为了支持涉及不同类型的运算， Python 为中缀运算符特殊方法提供了特殊的分派机制 ， 对于表达式a+b来说，解释器会执行以下几步操作</p>\n<ul>\n<li>如果a有__add__方法， 而且返回值不是NotImplemented, 调用a.__add__(b)</li>\n<li>如果没有__add__方法， 或者__add__方法返回NotImplemented, 检查b有没有__radd__， 如果有且返回不是NotImplemented，返回b.__radd__(a)</li>\n<li>如果b没有__radd__或者__radd__返回NotImplemented, 抛出TypeError, traceback 中会指明操作数不支持。</li>\n</ul>\n<p>具体的情况如下图所示:<br><img src=\"https://github.com/aldslvda/blog-images/blob/master/fluent-python-13.1.png?raw=true\" alt=\"Figure-13-1\"></p>\n<blockquote>\n<p>NotImplemented和NotImplementedError是不同的， 前者是特殊的单例值，在运算符无法处理操作数时返回（<strong>return</strong>）给解释器，后者是一种异常，抽象类抛出（<strong>raise</strong>）这个异常提醒子类必须覆盖。</p>\n<p>NotImplemented 与Error的不同在于，返回NotImplemented时， 另一个操作数还有机会执行反向的运算方法。这是Python种运算符的一种分派机制。</p>\n</blockquote>\n<h4 id=\"13-4-重载标量乘法运算符\"><a href=\"#13-4-重载标量乘法运算符\" class=\"headerlink\" title=\"13.4 重载标量乘法运算符*\"></a>13.4 重载标量乘法运算符*</h4><p>向量的标量积(scalar product) 有两种:</p>\n<ul>\n<li>向量与标量相乘， 结果是与原向量方向相同， 模\b\b是原向量模的标量倍\b的<strong>向量</strong></li>\n<li>向量与向量相乘，结果是各个分量的积求和的<strong>标量</strong></li>\n</ul>\n<p>NumPy等库目前的做法是，不重载这两种意义的*， 向量与向量相乘的情况用 numpy.dot()处理</p>\n<p>类似加号的重载， 我们为Vector 写好了__mul__和__rmul__方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__mul__</span><span class=\"params\">(self, scalar)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Vector(n * scalar <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> self)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__rmul__</span><span class=\"params\">(self, scalar)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self * scalar</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Python 3.5 以后的版本提供了@运算符， 计算两个向量相乘的标量积。特殊方法为__matmul__</p>\n</blockquote>\n<h4 id=\"13-5-比较运算符\"><a href=\"#13-5-比较运算符\" class=\"headerlink\" title=\"13.5 比较运算符\"></a>13.5 比较运算符</h4><p>Python 解释器对众多比较运算符的处理与前文类似，不过有两点比较明显的区别：</p>\n<ul>\n<li>正向和反向调用使用的是同一系列方法。例如，对 == 来说，正向和反向调用都是 __eq__ 方法，只是把参数对调了；而正向的 __gt__ 方法调用的是反向的 __lt__ 方法，并把参数对调。</li>\n<li>对 == 和 != 来说，如果反向调用失败，Python 会比较对象的 ID，而不抛出TypeError。</li>\n</ul>\n<blockquote>\n<p>Python3 中 __ne__的结果是对 __eq__ 方法取反的结果， 一些不合适的比较会返回TypeError而不比较对象ID</p>\n</blockquote>\n<h4 id=\"13-6-增量赋值运算符\"><a href=\"#13-6-增量赋值运算符\" class=\"headerlink\" title=\"13.6 增量赋值运算符\"></a>13.6 增量赋值运算符</h4><blockquote>\n<p>增量赋值不会修改不可变目标，而是新建实例然后重新绑定。<br>需要指出的是， 不可变类型一定不能实现就地特殊方法，即修改实例本身的方法</p>\n</blockquote>\n<p>如果一个类没有实现就地运算符对应的特殊方法，增量赋值运算符只是语法糖：a += b 的作用与 a = a + b 完全一样。对不可变类型来说，这是预期的行为，而且，如果定义了__add__ 方法的话，不用编写额外的代码，+= 就能使用。<br>然而，如果实现了就地运算符方法，例如 __iadd__，计算 a += b 的结果时会调用就地运算符方法。这种运算符的名称表明，它们会就地修改左操作数，而不会创建新对象作为结果。</p>\n<h4 id=\"13-7-小结\"><a href=\"#13-7-小结\" class=\"headerlink\" title=\"13.7 小结\"></a>13.7 小结</h4><p>本章主要介绍了Python中对运算符重载的做法， 限制和特性。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-13-Operator-Overloading-Doing-It-Right\"><a href=\"#Chapter-13-Operator-Overloading-Doing-It-Right\" class=\"headerlink\" title=\"Chapter 13. Operator Overloading: Doing It Right\"></a>Chapter 13. Operator Overloading: Doing It Right</h3><h3 id=\"第十三章-正确使用运算符重载\"><a href=\"#第十三章-正确使用运算符重载\" class=\"headerlink\" title=\"第十三章: 正确使用运算符重载\"></a>第十三章: 正确使用运算符重载</h3><p>运算符重载的作用是让用户定义的对象使用中缀运算符或一元运算符。宽泛一些来讲，Python中的函数调用（()）,属性访问（.）,和元素访问/切片（[]）也是运算符，不过本章只讨论一元运算符和中缀运算符。</p>\n<p>接下来我们会讨论这几个问题:</p>\n<ul>\n<li>Python中如何处理运算符中不同类型的操作数</li>\n<li>使用压制类型或者显式类型检查处理不同类型的操作数</li>\n<li>中缀运算符如何表明自己无法处理操作数</li>\n<li>众多比较运算符(==, &gt; ,&lt;=)等的特殊行为</li>\n<li>增量赋值运算符的默认处理方式和重载方式</li>\n</ul>\n<h4 id=\"13-1-运算符重载基础\"><a href=\"#13-1-运算符重载基础\" class=\"headerlink\" title=\"13.1 运算符重载基础\"></a>13.1 运算符重载基础</h4><p>Python 在运算符重载方面进行了一些限制，做好了灵活性、可用性和安全性方面的平衡。</p>\n<ul>\n<li>不能重载内置类型的运算符</li>\n<li>不能新建运算符，只能使用现有的</li>\n<li>某些运算符不能重载——is、and、or、not</li>\n</ul>\n<h4 id=\"13-2-一元运算符\"><a href=\"#13-2-一元运算符\" class=\"headerlink\" title=\"13.2 一元运算符\"></a>13.2 一元运算符</h4><p>Python语言参考手册中，列出了3个一元运算符:</p>\n<ul>\n<li>- 取负运算符，对应特殊方法 __neg__</li>\n<li>+ 取正运算符，对应特殊方法 __pos__</li>\n<li>~  取反运算符，对应特殊方法 __invert__</li>\n</ul>\n<p>Python 中还有一个较为特殊的一元运算符abs(), 取绝对值操作符，对应的是特殊方法 __abs__</p>\n<p>支持一元运算符很简单，只需要实现相应的特殊方法。这些特殊方法只有一个参数self。需要遵循的基本规则是始终返回一个新对象，也就是说不能修改self， 而是要创建并返回合适类型的新实例。</p>\n<p>一般来说， -，+ 返回与self同一类型的实例。abs一般返回一个标量。对于~来说，很难说什么结果是合理的，例如ORM中SQL WHERE语句取反就应该返回反集。</p>\n<h4 id=\"13-3-为Vector重载向量加法运算符\"><a href=\"#13-3-为Vector重载向量加法运算符\" class=\"headerlink\" title=\"13.3  为Vector重载向量加法运算符+\"></a>13.3  为Vector重载向量加法运算符+</h4><p>之前的章节中我们实现过向量Vector 现在为它实现运算符重载</p>\n<blockquote>\n<p>序列应当支持+运算符(用于拼接)， 以及*运算符(用于重复复制)</p>\n</blockquote>\n<p>然而我们要做的是，为向量实现向量加法和向量乘法运算(点乘)</p>\n<p>我们想象中的向量加法应该实现下面两点:</p>\n<ul>\n<li>对于两个维度相同的向量， 分量分别相加</li>\n<li>对于两个维度不同的向量，分量少的尾部补零向量再相加</li>\n</ul>\n<p>基于以上两点，可以初步写出相应的特殊方法:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__add__</span><span class=\"params\">(self, other)</span>:</span></span><br><span class=\"line\">    pairs = itertools.zip_longest(self, other, fillvalue=<span class=\"number\">0.0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Vector(a+b <span class=\"keyword\">for</span> a,b <span class=\"keyword\">in</span> pairs)</span><br></pre></td></tr></table></figure>\n<p><strong>需要注意的点</strong>： 实现医院运算符和中缀运算符的特殊方法一定不能修改操作数，这些操作符理应返回新对象，只有增量赋值表达式可能修改第一个操作数。</p>\n<p>为了支持涉及不同类型的运算， Python 为中缀运算符特殊方法提供了特殊的分派机制 ， 对于表达式a+b来说，解释器会执行以下几步操作</p>\n<ul>\n<li>如果a有__add__方法， 而且返回值不是NotImplemented, 调用a.__add__(b)</li>\n<li>如果没有__add__方法， 或者__add__方法返回NotImplemented, 检查b有没有__radd__， 如果有且返回不是NotImplemented，返回b.__radd__(a)</li>\n<li>如果b没有__radd__或者__radd__返回NotImplemented, 抛出TypeError, traceback 中会指明操作数不支持。</li>\n</ul>\n<p>具体的情况如下图所示:<br><img src=\"https://github.com/aldslvda/blog-images/blob/master/fluent-python-13.1.png?raw=true\" alt=\"Figure-13-1\"></p>\n<blockquote>\n<p>NotImplemented和NotImplementedError是不同的， 前者是特殊的单例值，在运算符无法处理操作数时返回（<strong>return</strong>）给解释器，后者是一种异常，抽象类抛出（<strong>raise</strong>）这个异常提醒子类必须覆盖。</p>\n<p>NotImplemented 与Error的不同在于，返回NotImplemented时， 另一个操作数还有机会执行反向的运算方法。这是Python种运算符的一种分派机制。</p>\n</blockquote>\n<h4 id=\"13-4-重载标量乘法运算符\"><a href=\"#13-4-重载标量乘法运算符\" class=\"headerlink\" title=\"13.4 重载标量乘法运算符*\"></a>13.4 重载标量乘法运算符*</h4><p>向量的标量积(scalar product) 有两种:</p>\n<ul>\n<li>向量与标量相乘， 结果是与原向量方向相同， 模\b\b是原向量模的标量倍\b的<strong>向量</strong></li>\n<li>向量与向量相乘，结果是各个分量的积求和的<strong>标量</strong></li>\n</ul>\n<p>NumPy等库目前的做法是，不重载这两种意义的*， 向量与向量相乘的情况用 numpy.dot()处理</p>\n<p>类似加号的重载， 我们为Vector 写好了__mul__和__rmul__方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__mul__</span><span class=\"params\">(self, scalar)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Vector(n * scalar <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> self)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__rmul__</span><span class=\"params\">(self, scalar)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self * scalar</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Python 3.5 以后的版本提供了@运算符， 计算两个向量相乘的标量积。特殊方法为__matmul__</p>\n</blockquote>\n<h4 id=\"13-5-比较运算符\"><a href=\"#13-5-比较运算符\" class=\"headerlink\" title=\"13.5 比较运算符\"></a>13.5 比较运算符</h4><p>Python 解释器对众多比较运算符的处理与前文类似，不过有两点比较明显的区别：</p>\n<ul>\n<li>正向和反向调用使用的是同一系列方法。例如，对 == 来说，正向和反向调用都是 __eq__ 方法，只是把参数对调了；而正向的 __gt__ 方法调用的是反向的 __lt__ 方法，并把参数对调。</li>\n<li>对 == 和 != 来说，如果反向调用失败，Python 会比较对象的 ID，而不抛出TypeError。</li>\n</ul>\n<blockquote>\n<p>Python3 中 __ne__的结果是对 __eq__ 方法取反的结果， 一些不合适的比较会返回TypeError而不比较对象ID</p>\n</blockquote>\n<h4 id=\"13-6-增量赋值运算符\"><a href=\"#13-6-增量赋值运算符\" class=\"headerlink\" title=\"13.6 增量赋值运算符\"></a>13.6 增量赋值运算符</h4><blockquote>\n<p>增量赋值不会修改不可变目标，而是新建实例然后重新绑定。<br>需要指出的是， 不可变类型一定不能实现就地特殊方法，即修改实例本身的方法</p>\n</blockquote>\n<p>如果一个类没有实现就地运算符对应的特殊方法，增量赋值运算符只是语法糖：a += b 的作用与 a = a + b 完全一样。对不可变类型来说，这是预期的行为，而且，如果定义了__add__ 方法的话，不用编写额外的代码，+= 就能使用。<br>然而，如果实现了就地运算符方法，例如 __iadd__，计算 a += b 的结果时会调用就地运算符方法。这种运算符的名称表明，它们会就地修改左操作数，而不会创建新对象作为结果。</p>\n<h4 id=\"13-7-小结\"><a href=\"#13-7-小结\" class=\"headerlink\" title=\"13.7 小结\"></a>13.7 小结</h4><p>本章主要介绍了Python中对运算符重载的做法， 限制和特性。</p>\n"},{"title":"fluent python 第二章小记","date":"2017-11-11T03:17:43.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true"],"toc":true,"comment":true,"_content":"\n## Fluent Python ##\n### Chapter 2. An Array of Sequences ###\n### 序列构成的数组 ###\n\n* **Python内置序列**：\n\t一种分类方式是根据存放数据的方式分类(指针/数值)\n\t- 容器序列：  \n\t\tlist, tuple, collections.deque.这类序列可以存放不同类型的数据，这类序列存放的都是对象的引用(指针)\n\t- 扁平序列：  \n\t\tstr, bytes, bytearray, memoryview, array.array.只能存放一种数据类型，相比容器序列，这类序列是将元素的值直接存放在序列对应的内存空间，而不是将元素当做单独的对象存放，这类序列更加紧凑，但是只能存放数字，字节和字符。\n\t另一种分类方式是根据序列存放的元素是否可变分类：\n\t- 可变序列：  \n\t\tlist, bytearray, array.array, collections.deque, memoryview\n\t- 不可变序列：\n\t\ttuple, str, and bytes\n\t序列是否可变可以通过下面的图直观展示：\n\t![Figure-2-1](https://raw.githubusercontent.com/aldslvda/fluent-python/master/2.An%20Array%20of%20Sequences/figure_2.1.png)\n\t图中列出的类都来自collections.abc(abc是 abstract base classes缩写)\n\t可以看到MutableSequence有很多方法继承自Sequence(箭头由子类指向超类，斜体指抽象类和抽象方法)。\n\t\n* **列表推导和生成器表达式**  \n\t**1.列表推导**    \n\t\n\t- 使用列表推导通常可以让你的Python代码更加简洁可读，大多数情况下也会更快，比如：   \n\t\n\t```python   \n\tlisti = [i**2 for i in xrange(10)]\n\t```\n\t\n\t- Python2中列表推导的表达式没有独立的作用域，Python3中得到了改善。\n\t- map/filter 可以与列表推导完成相同的工作。  \n\t\n\t```python\n\tsymbols = '$¢£¥€¤'\n\tbeyond_ascii = [ord(s) for s in symbols if ord(s) > 127]\n\tbeyond_ascii = list(filter(lambda c: c > 127, map(ord, symbols)))\t\n\t```  \n\t- 示例：使用列表推导求笛卡尔积：   \n\t\n\t```python\n\tcolors = ['black', 'white']\n\tsizes = ['S', 'M', 'L']\n\ttshirts = [(color, size) for color in colors for size in sizes]\t\n\t```\n\t**2.生成器表达式** \n\t\n\t- 生成器表达式背后遵守了迭代器协议，可以逐个地产出元素，而不是先建立一个完整的列表，然后再把这个列表传递到某个构造函数里。这样可以有效节省内存。\n\t- 示例：生成一个array:\n\t\n\t```python\n\tarray.array('I', (ord(symbol) for symbol in symbols))\n  \tarray('I', [36, 162, 163, 165, 8364, 164]) \n\t\n\t```\n  \t- 在计算笛卡尔积的这个问题中, 与列表推导不同的是，生成器表达式会在每次 for 循环运行时才生成一个组合, 而不是两个for循环生成一个含有所有元素的列表。避免了内存的额外占用。（这个不是很懂怎么做到的）\n  \t\n  \t**3.元组(tuple)**    \n  \t元组是对一组数据的记录，存放了一个数据和这个数据对应的位置，而不仅仅是“不可变的列表”，元组也是可以嵌套的, 当做不可变列表时，缺少那些使得自身变化的方法。   \n  \t\n  \t- for 循环可以分别提取元组里的元素，也叫作拆包（unpacking）。拆包的用法有很多：   \n  \t   1. 平行赋值：把一个可迭代对象里的元素，一并赋值到由对应的变量组成的元组中。     \n  \t   2. 不使用中间变量交换两个变量的值\n  \t   3. 用* 运算符把一个可迭代对象拆开作为函数的参数\n  \t   4. 让一个函数可以用元组的形式返回多个值   \n  \t拆包时可以用占位符_ 帮助处理不感兴趣的元素，也可以把注意力放在一部分元素上，用*处理剩下的元素。   \n  \t一个例子：\n  \t  \n  \t```python\n  \tt = (20, 8)\n  \tquotient, remainder = divmod(*t)\n  \t\n  \t```\t\n  **4.具名元组（namedtuple）**   \n  collections.namedtuple 是一个工厂函数，它可以用来构建一个带字段名的元组和一\n个有名字的类  \t\n  \n  - 一个简单的示例：   \n  \n  ```python\n  from collections import namedtuple\n  City = namedtuple('City', 'name country population coordinates')\n  tokyo = City('Tokyo', 'JP', 36.933, (35.689722, 139.691667))\n  \n  ```\n  \n  **5.切片**\n  Python中的序列类型都支持切片操作。   \n  \n  - 对对象进行切片:   \n    s[start:end:step] start:end:step 这种用法只能作为索引或下标用在[]中。   \n    使用时会调用s.\\_\\_getitem\\_\\_(slice(start,end,step))这个方法    \n    这里的start:end:step也可以替换成slice(start,end,step),这种方法可以给切片命名，使得代码更有可读性。\n    \n  - 省略(...)和多维切片，标准库中暂无用法，用于用户自定义类或者拓展，比如numpy。\n  - 切片也可以就地修改可变序列: 如果把切片放在赋值语句的左边，或把它作为 del 操作的对象，我们就可以对序列进行嫁接、切除或就地修改操作。\n  \n  **6. 序列的+和\\*操作**   \n  \n  - 如果在 a * n 这个语句中，序列 a 里的元素是对其他可变对象的引用的话,需要格外注意了,复制后的引用可能指向同一个对象，修改其中一个时，其他引用也会被修改。\n  例如：\n  \n  ```python\n  >>> s = [[1,1,1]]*3\n  >>> s\n[[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n  >>> s[0][0] = 2\n  >>> s\n[[2, 1, 1], [2, 1, 1], [2, 1, 1]]\n  ``` \n  \n  - 增量赋值（+=/\\*=）:\n    \n    1. += 背后的特殊方法是\\_\\_iadd\\_\\_(), 在a+=b中，如果a实现了\\_\\_iadd\\_\\_(),这个表达式会立刻改变a这个对象，如果没有实现这个方法,这个表达式就会完成a = a+b 的操作,即创建a+b这个对象，将变量a指向新的变量。   \n       *=也类似，不过背后的特殊方法是__imul__()\n    2. 一个特殊的例子：\n    \n    ```python\n    >>> t = (1, 2, [30, 40])\n    >>> t[2] += [50, 60]\n    Traceback (most recent call last):\n  \tFile \"<stdin>\", line 1, in <module>\nTypeError: 'tuple' object does not support item assignment\n>>> t\n(1, 2, [30, 40, 50, 60])\n    ```   \n  **7. sort方法和sorted函数**   \n  list.sort函数会就地修改列表，返回值为None.   \n  sorted函数会新建一个排好序的列表作为返回值  \n  他们都接收两个参数reverse(是否反转) 和key(排序所用的值)\n  \n  **8. bisect用于管理已排序的序列**   \n  bisect 模块包含两个主要函数，bisect 和 insort，两个函数都利用二分查找算法来在有序序列中查找或插入元素。\t\n  bisect(haystack,needle)    \n  haystack.insert(index, needle)   \n  bisort(seq, num)\n  \n  **9. 当列表不是首选时**\n  \n  - 数组（array）:如果列表只包含纯数字，array.array比list高效\n  - 内存视图、NumPy SciPy, 双向队列（collections.deque）","source":"_posts/fluent-python-2.md","raw":"title: fluent python 第二章小记\ndate: 2017-11-11 11:17:43\ntags:\n- Python\n- sequence\n- fluent python\ncategories:\n- 读书笔记\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n## Fluent Python ##\n### Chapter 2. An Array of Sequences ###\n### 序列构成的数组 ###\n\n* **Python内置序列**：\n\t一种分类方式是根据存放数据的方式分类(指针/数值)\n\t- 容器序列：  \n\t\tlist, tuple, collections.deque.这类序列可以存放不同类型的数据，这类序列存放的都是对象的引用(指针)\n\t- 扁平序列：  \n\t\tstr, bytes, bytearray, memoryview, array.array.只能存放一种数据类型，相比容器序列，这类序列是将元素的值直接存放在序列对应的内存空间，而不是将元素当做单独的对象存放，这类序列更加紧凑，但是只能存放数字，字节和字符。\n\t另一种分类方式是根据序列存放的元素是否可变分类：\n\t- 可变序列：  \n\t\tlist, bytearray, array.array, collections.deque, memoryview\n\t- 不可变序列：\n\t\ttuple, str, and bytes\n\t序列是否可变可以通过下面的图直观展示：\n\t![Figure-2-1](https://raw.githubusercontent.com/aldslvda/fluent-python/master/2.An%20Array%20of%20Sequences/figure_2.1.png)\n\t图中列出的类都来自collections.abc(abc是 abstract base classes缩写)\n\t可以看到MutableSequence有很多方法继承自Sequence(箭头由子类指向超类，斜体指抽象类和抽象方法)。\n\t\n* **列表推导和生成器表达式**  \n\t**1.列表推导**    \n\t\n\t- 使用列表推导通常可以让你的Python代码更加简洁可读，大多数情况下也会更快，比如：   \n\t\n\t```python   \n\tlisti = [i**2 for i in xrange(10)]\n\t```\n\t\n\t- Python2中列表推导的表达式没有独立的作用域，Python3中得到了改善。\n\t- map/filter 可以与列表推导完成相同的工作。  \n\t\n\t```python\n\tsymbols = '$¢£¥€¤'\n\tbeyond_ascii = [ord(s) for s in symbols if ord(s) > 127]\n\tbeyond_ascii = list(filter(lambda c: c > 127, map(ord, symbols)))\t\n\t```  \n\t- 示例：使用列表推导求笛卡尔积：   \n\t\n\t```python\n\tcolors = ['black', 'white']\n\tsizes = ['S', 'M', 'L']\n\ttshirts = [(color, size) for color in colors for size in sizes]\t\n\t```\n\t**2.生成器表达式** \n\t\n\t- 生成器表达式背后遵守了迭代器协议，可以逐个地产出元素，而不是先建立一个完整的列表，然后再把这个列表传递到某个构造函数里。这样可以有效节省内存。\n\t- 示例：生成一个array:\n\t\n\t```python\n\tarray.array('I', (ord(symbol) for symbol in symbols))\n  \tarray('I', [36, 162, 163, 165, 8364, 164]) \n\t\n\t```\n  \t- 在计算笛卡尔积的这个问题中, 与列表推导不同的是，生成器表达式会在每次 for 循环运行时才生成一个组合, 而不是两个for循环生成一个含有所有元素的列表。避免了内存的额外占用。（这个不是很懂怎么做到的）\n  \t\n  \t**3.元组(tuple)**    \n  \t元组是对一组数据的记录，存放了一个数据和这个数据对应的位置，而不仅仅是“不可变的列表”，元组也是可以嵌套的, 当做不可变列表时，缺少那些使得自身变化的方法。   \n  \t\n  \t- for 循环可以分别提取元组里的元素，也叫作拆包（unpacking）。拆包的用法有很多：   \n  \t   1. 平行赋值：把一个可迭代对象里的元素，一并赋值到由对应的变量组成的元组中。     \n  \t   2. 不使用中间变量交换两个变量的值\n  \t   3. 用* 运算符把一个可迭代对象拆开作为函数的参数\n  \t   4. 让一个函数可以用元组的形式返回多个值   \n  \t拆包时可以用占位符_ 帮助处理不感兴趣的元素，也可以把注意力放在一部分元素上，用*处理剩下的元素。   \n  \t一个例子：\n  \t  \n  \t```python\n  \tt = (20, 8)\n  \tquotient, remainder = divmod(*t)\n  \t\n  \t```\t\n  **4.具名元组（namedtuple）**   \n  collections.namedtuple 是一个工厂函数，它可以用来构建一个带字段名的元组和一\n个有名字的类  \t\n  \n  - 一个简单的示例：   \n  \n  ```python\n  from collections import namedtuple\n  City = namedtuple('City', 'name country population coordinates')\n  tokyo = City('Tokyo', 'JP', 36.933, (35.689722, 139.691667))\n  \n  ```\n  \n  **5.切片**\n  Python中的序列类型都支持切片操作。   \n  \n  - 对对象进行切片:   \n    s[start:end:step] start:end:step 这种用法只能作为索引或下标用在[]中。   \n    使用时会调用s.\\_\\_getitem\\_\\_(slice(start,end,step))这个方法    \n    这里的start:end:step也可以替换成slice(start,end,step),这种方法可以给切片命名，使得代码更有可读性。\n    \n  - 省略(...)和多维切片，标准库中暂无用法，用于用户自定义类或者拓展，比如numpy。\n  - 切片也可以就地修改可变序列: 如果把切片放在赋值语句的左边，或把它作为 del 操作的对象，我们就可以对序列进行嫁接、切除或就地修改操作。\n  \n  **6. 序列的+和\\*操作**   \n  \n  - 如果在 a * n 这个语句中，序列 a 里的元素是对其他可变对象的引用的话,需要格外注意了,复制后的引用可能指向同一个对象，修改其中一个时，其他引用也会被修改。\n  例如：\n  \n  ```python\n  >>> s = [[1,1,1]]*3\n  >>> s\n[[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n  >>> s[0][0] = 2\n  >>> s\n[[2, 1, 1], [2, 1, 1], [2, 1, 1]]\n  ``` \n  \n  - 增量赋值（+=/\\*=）:\n    \n    1. += 背后的特殊方法是\\_\\_iadd\\_\\_(), 在a+=b中，如果a实现了\\_\\_iadd\\_\\_(),这个表达式会立刻改变a这个对象，如果没有实现这个方法,这个表达式就会完成a = a+b 的操作,即创建a+b这个对象，将变量a指向新的变量。   \n       *=也类似，不过背后的特殊方法是__imul__()\n    2. 一个特殊的例子：\n    \n    ```python\n    >>> t = (1, 2, [30, 40])\n    >>> t[2] += [50, 60]\n    Traceback (most recent call last):\n  \tFile \"<stdin>\", line 1, in <module>\nTypeError: 'tuple' object does not support item assignment\n>>> t\n(1, 2, [30, 40, 50, 60])\n    ```   \n  **7. sort方法和sorted函数**   \n  list.sort函数会就地修改列表，返回值为None.   \n  sorted函数会新建一个排好序的列表作为返回值  \n  他们都接收两个参数reverse(是否反转) 和key(排序所用的值)\n  \n  **8. bisect用于管理已排序的序列**   \n  bisect 模块包含两个主要函数，bisect 和 insort，两个函数都利用二分查找算法来在有序序列中查找或插入元素。\t\n  bisect(haystack,needle)    \n  haystack.insert(index, needle)   \n  bisort(seq, num)\n  \n  **9. 当列表不是首选时**\n  \n  - 数组（array）:如果列表只包含纯数字，array.array比list高效\n  - 内存视图、NumPy SciPy, 双向队列（collections.deque）","slug":"fluent-python-2","published":1,"updated":"2019-04-25T01:27:25.904Z","comments":1,"layout":"post","link":"","_id":"cjuw5c69v000cdhyf1ky72dql","content":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-2-An-Array-of-Sequences\"><a href=\"#Chapter-2-An-Array-of-Sequences\" class=\"headerlink\" title=\"Chapter 2. An Array of Sequences\"></a>Chapter 2. An Array of Sequences</h3><h3 id=\"序列构成的数组\"><a href=\"#序列构成的数组\" class=\"headerlink\" title=\"序列构成的数组\"></a>序列构成的数组</h3><ul>\n<li><p><strong>Python内置序列</strong>：<br>  一种分类方式是根据存放数据的方式分类(指针/数值)</p>\n<ul>\n<li>容器序列：<br>  list, tuple, collections.deque.这类序列可以存放不同类型的数据，这类序列存放的都是对象的引用(指针)</li>\n<li>扁平序列：<br>  str, bytes, bytearray, memoryview, array.array.只能存放一种数据类型，相比容器序列，这类序列是将元素的值直接存放在序列对应的内存空间，而不是将元素当做单独的对象存放，这类序列更加紧凑，但是只能存放数字，字节和字符。<br>另一种分类方式是根据序列存放的元素是否可变分类：</li>\n<li>可变序列：<br>  list, bytearray, array.array, collections.deque, memoryview</li>\n<li>不可变序列：<br>  tuple, str, and bytes<br>序列是否可变可以通过下面的图直观展示：<br><img src=\"https://raw.githubusercontent.com/aldslvda/fluent-python/master/2.An%20Array%20of%20Sequences/figure_2.1.png\" alt=\"Figure-2-1\"><br>图中列出的类都来自collections.abc(abc是 abstract base classes缩写)<br>可以看到MutableSequence有很多方法继承自Sequence(箭头由子类指向超类，斜体指抽象类和抽象方法)。</li>\n</ul>\n</li>\n<li><p><strong>列表推导和生成器表达式</strong><br>  <strong>1.列表推导</strong>    </p>\n<ul>\n<li><p>使用列表推导通常可以让你的Python代码更加简洁可读，大多数情况下也会更快，比如：   </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listi = [i**<span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">10</span>)]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>- Python2中列表推导的表达式没有独立的作用域，Python3中得到了改善。\n- map/filter 可以与列表推导完成相同的工作。  \n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">symbols = <span class=\"string\">'$¢£¥€¤'</span></span><br><span class=\"line\">beyond_ascii = [ord(s) <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> symbols <span class=\"keyword\">if</span> ord(s) &gt; <span class=\"number\">127</span>]</span><br><span class=\"line\">beyond_ascii = list(filter(<span class=\"keyword\">lambda</span> c: c &gt; <span class=\"number\">127</span>, map(ord, symbols)))\t</span><br><span class=\"line\">```  </span><br><span class=\"line\">- 示例：使用列表推导求笛卡尔积：   </span><br><span class=\"line\"></span><br><span class=\"line\">```python</span><br><span class=\"line\">colors = [<span class=\"string\">'black'</span>, <span class=\"string\">'white'</span>]</span><br><span class=\"line\">sizes = [<span class=\"string\">'S'</span>, <span class=\"string\">'M'</span>, <span class=\"string\">'L'</span>]</span><br><span class=\"line\">tshirts = [(color, size) <span class=\"keyword\">for</span> color <span class=\"keyword\">in</span> colors <span class=\"keyword\">for</span> size <span class=\"keyword\">in</span> sizes]</span><br></pre></td></tr></table></figure>\n\n**2.生成器表达式** \n\n- 生成器表达式背后遵守了迭代器协议，可以逐个地产出元素，而不是先建立一个完整的列表，然后再把这个列表传递到某个构造函数里。这样可以有效节省内存。\n- 示例：生成一个array:\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.array(<span class=\"string\">'I'</span>, (ord(symbol) <span class=\"keyword\">for</span> symbol <span class=\"keyword\">in</span> symbols))</span><br><span class=\"line\"> \tarray(<span class=\"string\">'I'</span>, [<span class=\"number\">36</span>, <span class=\"number\">162</span>, <span class=\"number\">163</span>, <span class=\"number\">165</span>, <span class=\"number\">8364</span>, <span class=\"number\">164</span>])</span><br></pre></td></tr></table></figure>\n\n  - 在计算笛卡尔积的这个问题中, 与列表推导不同的是，生成器表达式会在每次 for 循环运行时才生成一个组合, 而不是两个for循环生成一个含有所有元素的列表。避免了内存的额外占用。（这个不是很懂怎么做到的）\n\n  **3.元组(tuple)**    \n  元组是对一组数据的记录，存放了一个数据和这个数据对应的位置，而不仅仅是“不可变的列表”，元组也是可以嵌套的, 当做不可变列表时，缺少那些使得自身变化的方法。   \n\n  - for 循环可以分别提取元组里的元素，也叫作拆包（unpacking）。拆包的用法有很多：   \n     1. 平行赋值：把一个可迭代对象里的元素，一并赋值到由对应的变量组成的元组中。     \n     2. 不使用中间变量交换两个变量的值\n     3. 用* 运算符把一个可迭代对象拆开作为函数的参数\n     4. 让一个函数可以用元组的形式返回多个值   \n  拆包时可以用占位符_ 帮助处理不感兴趣的元素，也可以把注意力放在一部分元素上，用*处理剩下的元素。   \n  一个例子：\n\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  \tt = (<span class=\"number\">20</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">  \tquotient, remainder = divmod(*t)</span><br><span class=\"line\">  \t</span><br><span class=\"line\">  \t```\t</span><br><span class=\"line\">  **<span class=\"number\">4.</span>具名元组（namedtuple）**   </span><br><span class=\"line\">  collections.namedtuple 是一个工厂函数，它可以用来构建一个带字段名的元组和一</span><br><span class=\"line\">个有名字的类  \t</span><br><span class=\"line\">  </span><br><span class=\"line\">  - 一个简单的示例：   </span><br><span class=\"line\">  </span><br><span class=\"line\">  ```python</span><br><span class=\"line\">  <span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> namedtuple</span><br><span class=\"line\">  City = namedtuple(<span class=\"string\">'City'</span>, <span class=\"string\">'name country population coordinates'</span>)</span><br><span class=\"line\">  tokyo = City(<span class=\"string\">'Tokyo'</span>, <span class=\"string\">'JP'</span>, <span class=\"number\">36.933</span>, (<span class=\"number\">35.689722</span>, <span class=\"number\">139.691667</span>))</span><br></pre></td></tr></table></figure>\n</code></pre><p>  <strong>5.切片</strong><br>  Python中的序列类型都支持切片操作。   </p>\n<ul>\n<li><p>对对象进行切片:<br>s[start:end:step] start:end:step 这种用法只能作为索引或下标用在[]中。<br>使用时会调用s.__getitem__(slice(start,end,step))这个方法<br>这里的start:end:step也可以替换成slice(start,end,step),这种方法可以给切片命名，使得代码更有可读性。</p>\n</li>\n<li><p>省略(…)和多维切片，标准库中暂无用法，用于用户自定义类或者拓展，比如numpy。</p>\n</li>\n<li><p>切片也可以就地修改可变序列: 如果把切片放在赋值语句的左边，或把它作为 del 操作的对象，我们就可以对序列进行嫁接、切除或就地修改操作。</p>\n<p><strong>6. 序列的+和*操作</strong>   </p>\n</li>\n<li><p>如果在 a * n 这个语句中，序列 a 里的元素是对其他可变对象的引用的话,需要格外注意了,复制后的引用可能指向同一个对象，修改其中一个时，其他引用也会被修改。<br>例如：</p>\n<pre><code class=\"python\"><span class=\"meta\">&gt;&gt;&gt; </span>s = [[<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>]]*<span class=\"number\">3</span>\n<span class=\"meta\">&gt;&gt;&gt; </span>s\n[[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>], [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>], [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]]\n<span class=\"meta\">&gt;&gt;&gt; </span>s[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">2</span>\n<span class=\"meta\">&gt;&gt;&gt; </span>s\n[[<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]]\n</code></pre>\n</li>\n<li><p>增量赋值（+=/*=）:</p>\n<ol>\n<li>+= 背后的特殊方法是__iadd__(), 在a+=b中，如果a实现了__iadd__(),这个表达式会立刻改变a这个对象，如果没有实现这个方法,这个表达式就会完成a = a+b 的操作,即创建a+b这个对象，将变量a指向新的变量。<br>*=也类似，不过背后的特殊方法是<strong>imul</strong>()</li>\n<li>一个特殊的例子：</li>\n</ol>\n<pre><code class=\"python\"><span class=\"meta\">&gt;&gt;&gt; </span>t = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">30</span>, <span class=\"number\">40</span>])\n<span class=\"meta\">&gt;&gt;&gt; </span>t[<span class=\"number\">2</span>] += [<span class=\"number\">50</span>, <span class=\"number\">60</span>]\nTraceback (most recent call last):\n  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;\nTypeError: <span class=\"string\">'tuple'</span> object does <span class=\"keyword\">not</span> support item assignment\n<span class=\"meta\">&gt;&gt;&gt; </span>t\n(<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>, <span class=\"number\">60</span>])\n</code></pre>\n<p><strong>7. sort方法和sorted函数</strong><br>list.sort函数会就地修改列表，返回值为None.<br>sorted函数会新建一个排好序的列表作为返回值<br>他们都接收两个参数reverse(是否反转) 和key(排序所用的值)</p>\n<p><strong>8. bisect用于管理已排序的序列</strong><br>bisect 模块包含两个主要函数，bisect 和 insort，两个函数都利用二分查找算法来在有序序列中查找或插入元素。<br>bisect(haystack,needle)<br>haystack.insert(index, needle)<br>bisort(seq, num)</p>\n<p><strong>9. 当列表不是首选时</strong></p>\n</li>\n<li><p>数组（array）:如果列表只包含纯数字，array.array比list高效</p>\n</li>\n<li>内存视图、NumPy SciPy, 双向队列（collections.deque）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-2-An-Array-of-Sequences\"><a href=\"#Chapter-2-An-Array-of-Sequences\" class=\"headerlink\" title=\"Chapter 2. An Array of Sequences\"></a>Chapter 2. An Array of Sequences</h3><h3 id=\"序列构成的数组\"><a href=\"#序列构成的数组\" class=\"headerlink\" title=\"序列构成的数组\"></a>序列构成的数组</h3><ul>\n<li><p><strong>Python内置序列</strong>：<br>  一种分类方式是根据存放数据的方式分类(指针/数值)</p>\n<ul>\n<li>容器序列：<br>  list, tuple, collections.deque.这类序列可以存放不同类型的数据，这类序列存放的都是对象的引用(指针)</li>\n<li>扁平序列：<br>  str, bytes, bytearray, memoryview, array.array.只能存放一种数据类型，相比容器序列，这类序列是将元素的值直接存放在序列对应的内存空间，而不是将元素当做单独的对象存放，这类序列更加紧凑，但是只能存放数字，字节和字符。<br>另一种分类方式是根据序列存放的元素是否可变分类：</li>\n<li>可变序列：<br>  list, bytearray, array.array, collections.deque, memoryview</li>\n<li>不可变序列：<br>  tuple, str, and bytes<br>序列是否可变可以通过下面的图直观展示：<br><img src=\"https://raw.githubusercontent.com/aldslvda/fluent-python/master/2.An%20Array%20of%20Sequences/figure_2.1.png\" alt=\"Figure-2-1\"><br>图中列出的类都来自collections.abc(abc是 abstract base classes缩写)<br>可以看到MutableSequence有很多方法继承自Sequence(箭头由子类指向超类，斜体指抽象类和抽象方法)。</li>\n</ul>\n</li>\n<li><p><strong>列表推导和生成器表达式</strong><br>  <strong>1.列表推导</strong>    </p>\n<ul>\n<li><p>使用列表推导通常可以让你的Python代码更加简洁可读，大多数情况下也会更快，比如：   </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listi = [i**<span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">10</span>)]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>- Python2中列表推导的表达式没有独立的作用域，Python3中得到了改善。\n- map/filter 可以与列表推导完成相同的工作。  \n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">symbols = <span class=\"string\">'$¢£¥€¤'</span></span><br><span class=\"line\">beyond_ascii = [ord(s) <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> symbols <span class=\"keyword\">if</span> ord(s) &gt; <span class=\"number\">127</span>]</span><br><span class=\"line\">beyond_ascii = list(filter(<span class=\"keyword\">lambda</span> c: c &gt; <span class=\"number\">127</span>, map(ord, symbols)))\t</span><br><span class=\"line\">```  </span><br><span class=\"line\">- 示例：使用列表推导求笛卡尔积：   </span><br><span class=\"line\"></span><br><span class=\"line\">```python</span><br><span class=\"line\">colors = [<span class=\"string\">'black'</span>, <span class=\"string\">'white'</span>]</span><br><span class=\"line\">sizes = [<span class=\"string\">'S'</span>, <span class=\"string\">'M'</span>, <span class=\"string\">'L'</span>]</span><br><span class=\"line\">tshirts = [(color, size) <span class=\"keyword\">for</span> color <span class=\"keyword\">in</span> colors <span class=\"keyword\">for</span> size <span class=\"keyword\">in</span> sizes]</span><br></pre></td></tr></table></figure>\n\n**2.生成器表达式** \n\n- 生成器表达式背后遵守了迭代器协议，可以逐个地产出元素，而不是先建立一个完整的列表，然后再把这个列表传递到某个构造函数里。这样可以有效节省内存。\n- 示例：生成一个array:\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.array(<span class=\"string\">'I'</span>, (ord(symbol) <span class=\"keyword\">for</span> symbol <span class=\"keyword\">in</span> symbols))</span><br><span class=\"line\"> \tarray(<span class=\"string\">'I'</span>, [<span class=\"number\">36</span>, <span class=\"number\">162</span>, <span class=\"number\">163</span>, <span class=\"number\">165</span>, <span class=\"number\">8364</span>, <span class=\"number\">164</span>])</span><br></pre></td></tr></table></figure>\n\n  - 在计算笛卡尔积的这个问题中, 与列表推导不同的是，生成器表达式会在每次 for 循环运行时才生成一个组合, 而不是两个for循环生成一个含有所有元素的列表。避免了内存的额外占用。（这个不是很懂怎么做到的）\n\n  **3.元组(tuple)**    \n  元组是对一组数据的记录，存放了一个数据和这个数据对应的位置，而不仅仅是“不可变的列表”，元组也是可以嵌套的, 当做不可变列表时，缺少那些使得自身变化的方法。   \n\n  - for 循环可以分别提取元组里的元素，也叫作拆包（unpacking）。拆包的用法有很多：   \n     1. 平行赋值：把一个可迭代对象里的元素，一并赋值到由对应的变量组成的元组中。     \n     2. 不使用中间变量交换两个变量的值\n     3. 用* 运算符把一个可迭代对象拆开作为函数的参数\n     4. 让一个函数可以用元组的形式返回多个值   \n  拆包时可以用占位符_ 帮助处理不感兴趣的元素，也可以把注意力放在一部分元素上，用*处理剩下的元素。   \n  一个例子：\n\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  \tt = (<span class=\"number\">20</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">  \tquotient, remainder = divmod(*t)</span><br><span class=\"line\">  \t</span><br><span class=\"line\">  \t```\t</span><br><span class=\"line\">  **<span class=\"number\">4.</span>具名元组（namedtuple）**   </span><br><span class=\"line\">  collections.namedtuple 是一个工厂函数，它可以用来构建一个带字段名的元组和一</span><br><span class=\"line\">个有名字的类  \t</span><br><span class=\"line\">  </span><br><span class=\"line\">  - 一个简单的示例：   </span><br><span class=\"line\">  </span><br><span class=\"line\">  ```python</span><br><span class=\"line\">  <span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> namedtuple</span><br><span class=\"line\">  City = namedtuple(<span class=\"string\">'City'</span>, <span class=\"string\">'name country population coordinates'</span>)</span><br><span class=\"line\">  tokyo = City(<span class=\"string\">'Tokyo'</span>, <span class=\"string\">'JP'</span>, <span class=\"number\">36.933</span>, (<span class=\"number\">35.689722</span>, <span class=\"number\">139.691667</span>))</span><br></pre></td></tr></table></figure>\n</code></pre><p>  <strong>5.切片</strong><br>  Python中的序列类型都支持切片操作。   </p>\n<ul>\n<li><p>对对象进行切片:<br>s[start:end:step] start:end:step 这种用法只能作为索引或下标用在[]中。<br>使用时会调用s.__getitem__(slice(start,end,step))这个方法<br>这里的start:end:step也可以替换成slice(start,end,step),这种方法可以给切片命名，使得代码更有可读性。</p>\n</li>\n<li><p>省略(…)和多维切片，标准库中暂无用法，用于用户自定义类或者拓展，比如numpy。</p>\n</li>\n<li><p>切片也可以就地修改可变序列: 如果把切片放在赋值语句的左边，或把它作为 del 操作的对象，我们就可以对序列进行嫁接、切除或就地修改操作。</p>\n<p><strong>6. 序列的+和*操作</strong>   </p>\n</li>\n<li><p>如果在 a * n 这个语句中，序列 a 里的元素是对其他可变对象的引用的话,需要格外注意了,复制后的引用可能指向同一个对象，修改其中一个时，其他引用也会被修改。<br>例如：</p>\n<pre><code class=\"python\"><span class=\"meta\">&gt;&gt;&gt; </span>s = [[<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>]]*<span class=\"number\">3</span>\n<span class=\"meta\">&gt;&gt;&gt; </span>s\n[[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>], [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>], [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]]\n<span class=\"meta\">&gt;&gt;&gt; </span>s[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">2</span>\n<span class=\"meta\">&gt;&gt;&gt; </span>s\n[[<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]]\n</code></pre>\n</li>\n<li><p>增量赋值（+=/*=）:</p>\n<ol>\n<li>+= 背后的特殊方法是__iadd__(), 在a+=b中，如果a实现了__iadd__(),这个表达式会立刻改变a这个对象，如果没有实现这个方法,这个表达式就会完成a = a+b 的操作,即创建a+b这个对象，将变量a指向新的变量。<br>*=也类似，不过背后的特殊方法是<strong>imul</strong>()</li>\n<li>一个特殊的例子：</li>\n</ol>\n<pre><code class=\"python\"><span class=\"meta\">&gt;&gt;&gt; </span>t = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">30</span>, <span class=\"number\">40</span>])\n<span class=\"meta\">&gt;&gt;&gt; </span>t[<span class=\"number\">2</span>] += [<span class=\"number\">50</span>, <span class=\"number\">60</span>]\nTraceback (most recent call last):\n  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;\nTypeError: <span class=\"string\">'tuple'</span> object does <span class=\"keyword\">not</span> support item assignment\n<span class=\"meta\">&gt;&gt;&gt; </span>t\n(<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>, <span class=\"number\">60</span>])\n</code></pre>\n<p><strong>7. sort方法和sorted函数</strong><br>list.sort函数会就地修改列表，返回值为None.<br>sorted函数会新建一个排好序的列表作为返回值<br>他们都接收两个参数reverse(是否反转) 和key(排序所用的值)</p>\n<p><strong>8. bisect用于管理已排序的序列</strong><br>bisect 模块包含两个主要函数，bisect 和 insort，两个函数都利用二分查找算法来在有序序列中查找或插入元素。<br>bisect(haystack,needle)<br>haystack.insert(index, needle)<br>bisort(seq, num)</p>\n<p><strong>9. 当列表不是首选时</strong></p>\n</li>\n<li><p>数组（array）:如果列表只包含纯数字，array.array比list高效</p>\n</li>\n<li>内存视图、NumPy SciPy, 双向队列（collections.deque）</li>\n</ul>\n"},{"title":"Fluent Python 第十二章 继承的优缺点","date":"2018-07-28T19:55:00.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true"],"toc":true,"comment":true,"_content":"\n\n## Fluent Python ##\n### Chapter 12. Inheritance: For Good or For Worse\n### 第十二章: 继承的优缺点\n\n> 推出继承的初衷是让新手顺利使用只有专家才能设计出来的框架。\n>                                      —— Alan Kay\n\n本章讨论继承和子类化，重点是说明对Python而言尤为重要的两个细节：\n- 子类化内置类型的缺点\n- 多重继承和方法解析顺序\n\n#### 12.1 子类化内置类型的麻烦之处\n\nPython中的内置类型子类化有一个重要的注意事项：内置类型(使用C语言编写)**不会**调用用户定义的类覆盖的特殊方法。\n\n内置类型的这种行为违背了面向对象编程的一个基本原则：从实例所属的类搜索方法，这是一个十分糟糕的局面。\n\n所以在子类化的时候，不应该选择内置类型，而应该选择collections中的类进行继承。\n\n#### 12.2 多重继承和方法解析顺序\n\n任何实现多重继承的语言都要处理潜在的命名冲突，这种冲突是由不相关的祖先类同名的方法引起的，称为“菱形问题”。  \n\n![Figure-12-1](https://github.com/aldslvda/blog-images/blob/master/fluent-python-12.1.png?raw=true)\n\npython能区分子类调用的是哪一个方法，是因为Python会按照特定的顺序遍历继承图，这个顺序叫做方法解析顺序(Method Resolution Order，MRO), Python中的类都有一个名为\\_\\_mro\\_\\_的属性，它的值是一个元组，按照方法戒子顺序列出各个超类，从当前类一直向上，直到object类。例如tenserflow中的Variable类\n\n```python\n>>> import tensorflow as tf\n>>> tf.Variable.__mro__\n>>> (<class 'tensorflow.python.ops.variables.Variable'>, <class 'tensorflow.python.training.checkpointable.base.CheckpointableBase'>, <class 'object'>)\n\n```\n\n如果把方法调用委托给超类，可以有下面两种选择:\n- 使用super()函数如Foo_son.super().bar(), 这个方法的好处在于安全，不会过时。适合使用的场景: 调用框架或者不受自己控制的类层次结构中的方法\n- 如果想要绕过方法解析, 直接调用超类的某个方法，可以直接使用超类类名代替super()函数，如Foo.bar()\n\n方法解析顺序不仅考虑继承图，还考虑子类声明中列出超类的顺序。也就是说，如果把 D 类声明为 class D(C, B):，那么 D 类的\\_\\_mro\\_\\_ 属性就是：先搜索 C 类，再搜索 B 类。\n\n#### 12.3 多重继承的真实应用\n\n标准库中，GUI工具包Tkinter把多重继承用到了极致。\n![Figure-12-2](https://github.com/aldslvda/blog-images/blob/master/fluent-python-12.2.png?raw=true)\n\n其中几个类：\n- Toplevel：表示 Tkinter 应用程序中顶层窗口的类。\n- Widget：窗口中所有可见对象的超类。\n- Button：普通的按钮小组件。\n- Entry：单行可编辑文本字段。\n- Text：多行可编辑文本字段\n\n\n但由于Tkinter开发时间比较久远，很多使用多重继承不能称作是最佳的实践。后面会对Tkinter使用多重继承的**可取之处**和**不当之处**进行讨论\n\n\n#### 12.4 处理多重继承\n\n> ……我们需要一种更好的、全新的继承理论（目前仍是如此）。例如，继承和实例化（一种继承方式）混淆了语用（比如为了节省空间而重构代码）和语义（用途太多了，比如特殊化、普遍化、形态，等等）。\n>                                                             ——Alan Kay\n\n如上面引用的一段话， 继承有很多用途，而多重继承增加了可选方案和复杂度。使用多重继承容易得出令人费解和脆弱的设计。\n\n暂时还没有针对多重继承完整的理论，下面是避免把类图搅乱的一些建议。\n\n- 把接口继承和实现继承区分开来\n    使用多重继承是，一定要明确**为什么**创建子类。一般原因可能有：\n    - 继承接口，创建子类型， 实现“是什么”\n    - 继承实现，通过继承避免代码复用\n    其实这两条经常同时出现，不过只要可能的话，一定要明确区分。前者是支撑框架的支柱，后者是实现细节，通常可以换用组合和委托模式。\n\n- 使用抽象基类显式表示接口\n    如果类的作用是定义接口，应该明确定为抽象基类\n\n- 通过混入(mixin)重用代码\n    如果一个类的作用是为多个不相关的子类提供方法实现，从而实现重用，但不体现“是什么”关系，应该把那个类明确地定义为混入类（mixin class）。从概念上讲，混入不定义新类型，只是**打包方法，便于重用**。混入类绝对**不能**实例化，而且具体类不能**只**继承混入类。混入类应该提供某方面的特定行为，只实现少量关系非常紧密的方法。\n\n- 在名称中明确指明混入\n    混入类应该以Mixin 作为后缀(在django的GenericViews中尤为常见)\n\n- 抽象基类可以作为混入，反之不成立。\n    抽象基类可以实现具体方法，因此也可以作为混入使用。抽象基类可以作为其他类的唯一基类，而混入决不能作为唯一的超类，除非继承另一个更具体的混入。\n    抽象基类中实现的具体方法只能与抽象基类及其超类中的方法协作。\n\n- 不要子类化多个具体类\n    具体类的超类中除了一个具体超类之外，其余的都应该是抽象基类或混入。\n\n- 为用户提供聚合类\n    如果抽象基类或混入的组合对客户代码非常有用，那就提供一个类，使用易于理解的方式把它们结合起来。 Grady Booch 把这种类称为聚合类（aggregate class）。\n    *聚合类恰如其名，只做聚合，不额外实现类方法*\n\n- “优先使用对象组合，而不是类继承”\n    优先使用组合能让设计更灵活。组合和委托可以代替混入，把行为提供给不同的类，但是不能取代接口继承去定义类型层次结构。\n\n\n#### 12.5  小结\n\n本章着重探讨了多重继承这把双刃剑。讲述了Python中的MRO（方法解析顺序），探讨了多重继承实现的一些可以称之为准则的最佳实践标准。","source":"_posts/fluent-python-12.md","raw":"title: Fluent Python 第十二章 继承的优缺点\ndate: 2018-07-29 03:55:00\ntags:\n- Python\n- inheritance\n- multiple inheritance\n- mro\n- fluent python\ncategories:\n- 读书笔记\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n\n## Fluent Python ##\n### Chapter 12. Inheritance: For Good or For Worse\n### 第十二章: 继承的优缺点\n\n> 推出继承的初衷是让新手顺利使用只有专家才能设计出来的框架。\n>                                      —— Alan Kay\n\n本章讨论继承和子类化，重点是说明对Python而言尤为重要的两个细节：\n- 子类化内置类型的缺点\n- 多重继承和方法解析顺序\n\n#### 12.1 子类化内置类型的麻烦之处\n\nPython中的内置类型子类化有一个重要的注意事项：内置类型(使用C语言编写)**不会**调用用户定义的类覆盖的特殊方法。\n\n内置类型的这种行为违背了面向对象编程的一个基本原则：从实例所属的类搜索方法，这是一个十分糟糕的局面。\n\n所以在子类化的时候，不应该选择内置类型，而应该选择collections中的类进行继承。\n\n#### 12.2 多重继承和方法解析顺序\n\n任何实现多重继承的语言都要处理潜在的命名冲突，这种冲突是由不相关的祖先类同名的方法引起的，称为“菱形问题”。  \n\n![Figure-12-1](https://github.com/aldslvda/blog-images/blob/master/fluent-python-12.1.png?raw=true)\n\npython能区分子类调用的是哪一个方法，是因为Python会按照特定的顺序遍历继承图，这个顺序叫做方法解析顺序(Method Resolution Order，MRO), Python中的类都有一个名为\\_\\_mro\\_\\_的属性，它的值是一个元组，按照方法戒子顺序列出各个超类，从当前类一直向上，直到object类。例如tenserflow中的Variable类\n\n```python\n>>> import tensorflow as tf\n>>> tf.Variable.__mro__\n>>> (<class 'tensorflow.python.ops.variables.Variable'>, <class 'tensorflow.python.training.checkpointable.base.CheckpointableBase'>, <class 'object'>)\n\n```\n\n如果把方法调用委托给超类，可以有下面两种选择:\n- 使用super()函数如Foo_son.super().bar(), 这个方法的好处在于安全，不会过时。适合使用的场景: 调用框架或者不受自己控制的类层次结构中的方法\n- 如果想要绕过方法解析, 直接调用超类的某个方法，可以直接使用超类类名代替super()函数，如Foo.bar()\n\n方法解析顺序不仅考虑继承图，还考虑子类声明中列出超类的顺序。也就是说，如果把 D 类声明为 class D(C, B):，那么 D 类的\\_\\_mro\\_\\_ 属性就是：先搜索 C 类，再搜索 B 类。\n\n#### 12.3 多重继承的真实应用\n\n标准库中，GUI工具包Tkinter把多重继承用到了极致。\n![Figure-12-2](https://github.com/aldslvda/blog-images/blob/master/fluent-python-12.2.png?raw=true)\n\n其中几个类：\n- Toplevel：表示 Tkinter 应用程序中顶层窗口的类。\n- Widget：窗口中所有可见对象的超类。\n- Button：普通的按钮小组件。\n- Entry：单行可编辑文本字段。\n- Text：多行可编辑文本字段\n\n\n但由于Tkinter开发时间比较久远，很多使用多重继承不能称作是最佳的实践。后面会对Tkinter使用多重继承的**可取之处**和**不当之处**进行讨论\n\n\n#### 12.4 处理多重继承\n\n> ……我们需要一种更好的、全新的继承理论（目前仍是如此）。例如，继承和实例化（一种继承方式）混淆了语用（比如为了节省空间而重构代码）和语义（用途太多了，比如特殊化、普遍化、形态，等等）。\n>                                                             ——Alan Kay\n\n如上面引用的一段话， 继承有很多用途，而多重继承增加了可选方案和复杂度。使用多重继承容易得出令人费解和脆弱的设计。\n\n暂时还没有针对多重继承完整的理论，下面是避免把类图搅乱的一些建议。\n\n- 把接口继承和实现继承区分开来\n    使用多重继承是，一定要明确**为什么**创建子类。一般原因可能有：\n    - 继承接口，创建子类型， 实现“是什么”\n    - 继承实现，通过继承避免代码复用\n    其实这两条经常同时出现，不过只要可能的话，一定要明确区分。前者是支撑框架的支柱，后者是实现细节，通常可以换用组合和委托模式。\n\n- 使用抽象基类显式表示接口\n    如果类的作用是定义接口，应该明确定为抽象基类\n\n- 通过混入(mixin)重用代码\n    如果一个类的作用是为多个不相关的子类提供方法实现，从而实现重用，但不体现“是什么”关系，应该把那个类明确地定义为混入类（mixin class）。从概念上讲，混入不定义新类型，只是**打包方法，便于重用**。混入类绝对**不能**实例化，而且具体类不能**只**继承混入类。混入类应该提供某方面的特定行为，只实现少量关系非常紧密的方法。\n\n- 在名称中明确指明混入\n    混入类应该以Mixin 作为后缀(在django的GenericViews中尤为常见)\n\n- 抽象基类可以作为混入，反之不成立。\n    抽象基类可以实现具体方法，因此也可以作为混入使用。抽象基类可以作为其他类的唯一基类，而混入决不能作为唯一的超类，除非继承另一个更具体的混入。\n    抽象基类中实现的具体方法只能与抽象基类及其超类中的方法协作。\n\n- 不要子类化多个具体类\n    具体类的超类中除了一个具体超类之外，其余的都应该是抽象基类或混入。\n\n- 为用户提供聚合类\n    如果抽象基类或混入的组合对客户代码非常有用，那就提供一个类，使用易于理解的方式把它们结合起来。 Grady Booch 把这种类称为聚合类（aggregate class）。\n    *聚合类恰如其名，只做聚合，不额外实现类方法*\n\n- “优先使用对象组合，而不是类继承”\n    优先使用组合能让设计更灵活。组合和委托可以代替混入，把行为提供给不同的类，但是不能取代接口继承去定义类型层次结构。\n\n\n#### 12.5  小结\n\n本章着重探讨了多重继承这把双刃剑。讲述了Python中的MRO（方法解析顺序），探讨了多重继承实现的一些可以称之为准则的最佳实践标准。","slug":"fluent-python-12","published":1,"updated":"2019-04-25T01:27:25.927Z","comments":1,"layout":"post","link":"","_id":"cjuw5c69z000gdhyfrfktj815","content":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-12-Inheritance-For-Good-or-For-Worse\"><a href=\"#Chapter-12-Inheritance-For-Good-or-For-Worse\" class=\"headerlink\" title=\"Chapter 12. Inheritance: For Good or For Worse\"></a>Chapter 12. Inheritance: For Good or For Worse</h3><h3 id=\"第十二章-继承的优缺点\"><a href=\"#第十二章-继承的优缺点\" class=\"headerlink\" title=\"第十二章: 继承的优缺点\"></a>第十二章: 继承的优缺点</h3><blockquote>\n<p>推出继承的初衷是让新手顺利使用只有专家才能设计出来的框架。<br>                                     —— Alan Kay</p>\n</blockquote>\n<p>本章讨论继承和子类化，重点是说明对Python而言尤为重要的两个细节：</p>\n<ul>\n<li>子类化内置类型的缺点</li>\n<li>多重继承和方法解析顺序</li>\n</ul>\n<h4 id=\"12-1-子类化内置类型的麻烦之处\"><a href=\"#12-1-子类化内置类型的麻烦之处\" class=\"headerlink\" title=\"12.1 子类化内置类型的麻烦之处\"></a>12.1 子类化内置类型的麻烦之处</h4><p>Python中的内置类型子类化有一个重要的注意事项：内置类型(使用C语言编写)<strong>不会</strong>调用用户定义的类覆盖的特殊方法。</p>\n<p>内置类型的这种行为违背了面向对象编程的一个基本原则：从实例所属的类搜索方法，这是一个十分糟糕的局面。</p>\n<p>所以在子类化的时候，不应该选择内置类型，而应该选择collections中的类进行继承。</p>\n<h4 id=\"12-2-多重继承和方法解析顺序\"><a href=\"#12-2-多重继承和方法解析顺序\" class=\"headerlink\" title=\"12.2 多重继承和方法解析顺序\"></a>12.2 多重继承和方法解析顺序</h4><p>任何实现多重继承的语言都要处理潜在的命名冲突，这种冲突是由不相关的祖先类同名的方法引起的，称为“菱形问题”。  </p>\n<p><img src=\"https://github.com/aldslvda/blog-images/blob/master/fluent-python-12.1.png?raw=true\" alt=\"Figure-12-1\"></p>\n<p>python能区分子类调用的是哪一个方法，是因为Python会按照特定的顺序遍历继承图，这个顺序叫做方法解析顺序(Method Resolution Order，MRO), Python中的类都有一个名为__mro__的属性，它的值是一个元组，按照方法戒子顺序列出各个超类，从当前类一直向上，直到object类。例如tenserflow中的Variable类</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tf.Variable.__mro__</span><br><span class=\"line\">&gt;&gt;&gt; (&lt;class 'tensorflow.python.ops.variables.Variable'&gt;, &lt;class 'tensorflow.python.training.checkpointable.base.CheckpointableBase'&gt;, &lt;class 'object'&gt;)</span><br></pre></td></tr></table></figure>\n<p>如果把方法调用委托给超类，可以有下面两种选择:</p>\n<ul>\n<li>使用super()函数如Foo_son.super().bar(), 这个方法的好处在于安全，不会过时。适合使用的场景: 调用框架或者不受自己控制的类层次结构中的方法</li>\n<li>如果想要绕过方法解析, 直接调用超类的某个方法，可以直接使用超类类名代替super()函数，如Foo.bar()</li>\n</ul>\n<p>方法解析顺序不仅考虑继承图，还考虑子类声明中列出超类的顺序。也就是说，如果把 D 类声明为 class D(C, B):，那么 D 类的__mro__ 属性就是：先搜索 C 类，再搜索 B 类。</p>\n<h4 id=\"12-3-多重继承的真实应用\"><a href=\"#12-3-多重继承的真实应用\" class=\"headerlink\" title=\"12.3 多重继承的真实应用\"></a>12.3 多重继承的真实应用</h4><p>标准库中，GUI工具包Tkinter把多重继承用到了极致。<br><img src=\"https://github.com/aldslvda/blog-images/blob/master/fluent-python-12.2.png?raw=true\" alt=\"Figure-12-2\"></p>\n<p>其中几个类：</p>\n<ul>\n<li>Toplevel：表示 Tkinter 应用程序中顶层窗口的类。</li>\n<li>Widget：窗口中所有可见对象的超类。</li>\n<li>Button：普通的按钮小组件。</li>\n<li>Entry：单行可编辑文本字段。</li>\n<li>Text：多行可编辑文本字段</li>\n</ul>\n<p>但由于Tkinter开发时间比较久远，很多使用多重继承不能称作是最佳的实践。后面会对Tkinter使用多重继承的<strong>可取之处</strong>和<strong>不当之处</strong>进行讨论</p>\n<h4 id=\"12-4-处理多重继承\"><a href=\"#12-4-处理多重继承\" class=\"headerlink\" title=\"12.4 处理多重继承\"></a>12.4 处理多重继承</h4><blockquote>\n<p>……我们需要一种更好的、全新的继承理论（目前仍是如此）。例如，继承和实例化（一种继承方式）混淆了语用（比如为了节省空间而重构代码）和语义（用途太多了，比如特殊化、普遍化、形态，等等）。<br>                                                            ——Alan Kay</p>\n</blockquote>\n<p>如上面引用的一段话， 继承有很多用途，而多重继承增加了可选方案和复杂度。使用多重继承容易得出令人费解和脆弱的设计。</p>\n<p>暂时还没有针对多重继承完整的理论，下面是避免把类图搅乱的一些建议。</p>\n<ul>\n<li><p>把接口继承和实现继承区分开来<br>  使用多重继承是，一定要明确<strong>为什么</strong>创建子类。一般原因可能有：</p>\n<ul>\n<li>继承接口，创建子类型， 实现“是什么”</li>\n<li>继承实现，通过继承避免代码复用<br>其实这两条经常同时出现，不过只要可能的话，一定要明确区分。前者是支撑框架的支柱，后者是实现细节，通常可以换用组合和委托模式。</li>\n</ul>\n</li>\n<li><p>使用抽象基类显式表示接口<br>  如果类的作用是定义接口，应该明确定为抽象基类</p>\n</li>\n<li><p>通过混入(mixin)重用代码<br>  如果一个类的作用是为多个不相关的子类提供方法实现，从而实现重用，但不体现“是什么”关系，应该把那个类明确地定义为混入类（mixin class）。从概念上讲，混入不定义新类型，只是<strong>打包方法，便于重用</strong>。混入类绝对<strong>不能</strong>实例化，而且具体类不能<strong>只</strong>继承混入类。混入类应该提供某方面的特定行为，只实现少量关系非常紧密的方法。</p>\n</li>\n<li><p>在名称中明确指明混入<br>  混入类应该以Mixin 作为后缀(在django的GenericViews中尤为常见)</p>\n</li>\n<li><p>抽象基类可以作为混入，反之不成立。<br>  抽象基类可以实现具体方法，因此也可以作为混入使用。抽象基类可以作为其他类的唯一基类，而混入决不能作为唯一的超类，除非继承另一个更具体的混入。<br>  抽象基类中实现的具体方法只能与抽象基类及其超类中的方法协作。</p>\n</li>\n<li><p>不要子类化多个具体类<br>  具体类的超类中除了一个具体超类之外，其余的都应该是抽象基类或混入。</p>\n</li>\n<li><p>为用户提供聚合类<br>  如果抽象基类或混入的组合对客户代码非常有用，那就提供一个类，使用易于理解的方式把它们结合起来。 Grady Booch 把这种类称为聚合类（aggregate class）。<br>  <em>聚合类恰如其名，只做聚合，不额外实现类方法</em></p>\n</li>\n<li><p>“优先使用对象组合，而不是类继承”<br>  优先使用组合能让设计更灵活。组合和委托可以代替混入，把行为提供给不同的类，但是不能取代接口继承去定义类型层次结构。</p>\n</li>\n</ul>\n<h4 id=\"12-5-小结\"><a href=\"#12-5-小结\" class=\"headerlink\" title=\"12.5  小结\"></a>12.5  小结</h4><p>本章着重探讨了多重继承这把双刃剑。讲述了Python中的MRO（方法解析顺序），探讨了多重继承实现的一些可以称之为准则的最佳实践标准。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-12-Inheritance-For-Good-or-For-Worse\"><a href=\"#Chapter-12-Inheritance-For-Good-or-For-Worse\" class=\"headerlink\" title=\"Chapter 12. Inheritance: For Good or For Worse\"></a>Chapter 12. Inheritance: For Good or For Worse</h3><h3 id=\"第十二章-继承的优缺点\"><a href=\"#第十二章-继承的优缺点\" class=\"headerlink\" title=\"第十二章: 继承的优缺点\"></a>第十二章: 继承的优缺点</h3><blockquote>\n<p>推出继承的初衷是让新手顺利使用只有专家才能设计出来的框架。<br>                                     —— Alan Kay</p>\n</blockquote>\n<p>本章讨论继承和子类化，重点是说明对Python而言尤为重要的两个细节：</p>\n<ul>\n<li>子类化内置类型的缺点</li>\n<li>多重继承和方法解析顺序</li>\n</ul>\n<h4 id=\"12-1-子类化内置类型的麻烦之处\"><a href=\"#12-1-子类化内置类型的麻烦之处\" class=\"headerlink\" title=\"12.1 子类化内置类型的麻烦之处\"></a>12.1 子类化内置类型的麻烦之处</h4><p>Python中的内置类型子类化有一个重要的注意事项：内置类型(使用C语言编写)<strong>不会</strong>调用用户定义的类覆盖的特殊方法。</p>\n<p>内置类型的这种行为违背了面向对象编程的一个基本原则：从实例所属的类搜索方法，这是一个十分糟糕的局面。</p>\n<p>所以在子类化的时候，不应该选择内置类型，而应该选择collections中的类进行继承。</p>\n<h4 id=\"12-2-多重继承和方法解析顺序\"><a href=\"#12-2-多重继承和方法解析顺序\" class=\"headerlink\" title=\"12.2 多重继承和方法解析顺序\"></a>12.2 多重继承和方法解析顺序</h4><p>任何实现多重继承的语言都要处理潜在的命名冲突，这种冲突是由不相关的祖先类同名的方法引起的，称为“菱形问题”。  </p>\n<p><img src=\"https://github.com/aldslvda/blog-images/blob/master/fluent-python-12.1.png?raw=true\" alt=\"Figure-12-1\"></p>\n<p>python能区分子类调用的是哪一个方法，是因为Python会按照特定的顺序遍历继承图，这个顺序叫做方法解析顺序(Method Resolution Order，MRO), Python中的类都有一个名为__mro__的属性，它的值是一个元组，按照方法戒子顺序列出各个超类，从当前类一直向上，直到object类。例如tenserflow中的Variable类</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tf.Variable.__mro__</span><br><span class=\"line\">&gt;&gt;&gt; (&lt;class 'tensorflow.python.ops.variables.Variable'&gt;, &lt;class 'tensorflow.python.training.checkpointable.base.CheckpointableBase'&gt;, &lt;class 'object'&gt;)</span><br></pre></td></tr></table></figure>\n<p>如果把方法调用委托给超类，可以有下面两种选择:</p>\n<ul>\n<li>使用super()函数如Foo_son.super().bar(), 这个方法的好处在于安全，不会过时。适合使用的场景: 调用框架或者不受自己控制的类层次结构中的方法</li>\n<li>如果想要绕过方法解析, 直接调用超类的某个方法，可以直接使用超类类名代替super()函数，如Foo.bar()</li>\n</ul>\n<p>方法解析顺序不仅考虑继承图，还考虑子类声明中列出超类的顺序。也就是说，如果把 D 类声明为 class D(C, B):，那么 D 类的__mro__ 属性就是：先搜索 C 类，再搜索 B 类。</p>\n<h4 id=\"12-3-多重继承的真实应用\"><a href=\"#12-3-多重继承的真实应用\" class=\"headerlink\" title=\"12.3 多重继承的真实应用\"></a>12.3 多重继承的真实应用</h4><p>标准库中，GUI工具包Tkinter把多重继承用到了极致。<br><img src=\"https://github.com/aldslvda/blog-images/blob/master/fluent-python-12.2.png?raw=true\" alt=\"Figure-12-2\"></p>\n<p>其中几个类：</p>\n<ul>\n<li>Toplevel：表示 Tkinter 应用程序中顶层窗口的类。</li>\n<li>Widget：窗口中所有可见对象的超类。</li>\n<li>Button：普通的按钮小组件。</li>\n<li>Entry：单行可编辑文本字段。</li>\n<li>Text：多行可编辑文本字段</li>\n</ul>\n<p>但由于Tkinter开发时间比较久远，很多使用多重继承不能称作是最佳的实践。后面会对Tkinter使用多重继承的<strong>可取之处</strong>和<strong>不当之处</strong>进行讨论</p>\n<h4 id=\"12-4-处理多重继承\"><a href=\"#12-4-处理多重继承\" class=\"headerlink\" title=\"12.4 处理多重继承\"></a>12.4 处理多重继承</h4><blockquote>\n<p>……我们需要一种更好的、全新的继承理论（目前仍是如此）。例如，继承和实例化（一种继承方式）混淆了语用（比如为了节省空间而重构代码）和语义（用途太多了，比如特殊化、普遍化、形态，等等）。<br>                                                            ——Alan Kay</p>\n</blockquote>\n<p>如上面引用的一段话， 继承有很多用途，而多重继承增加了可选方案和复杂度。使用多重继承容易得出令人费解和脆弱的设计。</p>\n<p>暂时还没有针对多重继承完整的理论，下面是避免把类图搅乱的一些建议。</p>\n<ul>\n<li><p>把接口继承和实现继承区分开来<br>  使用多重继承是，一定要明确<strong>为什么</strong>创建子类。一般原因可能有：</p>\n<ul>\n<li>继承接口，创建子类型， 实现“是什么”</li>\n<li>继承实现，通过继承避免代码复用<br>其实这两条经常同时出现，不过只要可能的话，一定要明确区分。前者是支撑框架的支柱，后者是实现细节，通常可以换用组合和委托模式。</li>\n</ul>\n</li>\n<li><p>使用抽象基类显式表示接口<br>  如果类的作用是定义接口，应该明确定为抽象基类</p>\n</li>\n<li><p>通过混入(mixin)重用代码<br>  如果一个类的作用是为多个不相关的子类提供方法实现，从而实现重用，但不体现“是什么”关系，应该把那个类明确地定义为混入类（mixin class）。从概念上讲，混入不定义新类型，只是<strong>打包方法，便于重用</strong>。混入类绝对<strong>不能</strong>实例化，而且具体类不能<strong>只</strong>继承混入类。混入类应该提供某方面的特定行为，只实现少量关系非常紧密的方法。</p>\n</li>\n<li><p>在名称中明确指明混入<br>  混入类应该以Mixin 作为后缀(在django的GenericViews中尤为常见)</p>\n</li>\n<li><p>抽象基类可以作为混入，反之不成立。<br>  抽象基类可以实现具体方法，因此也可以作为混入使用。抽象基类可以作为其他类的唯一基类，而混入决不能作为唯一的超类，除非继承另一个更具体的混入。<br>  抽象基类中实现的具体方法只能与抽象基类及其超类中的方法协作。</p>\n</li>\n<li><p>不要子类化多个具体类<br>  具体类的超类中除了一个具体超类之外，其余的都应该是抽象基类或混入。</p>\n</li>\n<li><p>为用户提供聚合类<br>  如果抽象基类或混入的组合对客户代码非常有用，那就提供一个类，使用易于理解的方式把它们结合起来。 Grady Booch 把这种类称为聚合类（aggregate class）。<br>  <em>聚合类恰如其名，只做聚合，不额外实现类方法</em></p>\n</li>\n<li><p>“优先使用对象组合，而不是类继承”<br>  优先使用组合能让设计更灵活。组合和委托可以代替混入，把行为提供给不同的类，但是不能取代接口继承去定义类型层次结构。</p>\n</li>\n</ul>\n<h4 id=\"12-5-小结\"><a href=\"#12-5-小结\" class=\"headerlink\" title=\"12.5  小结\"></a>12.5  小结</h4><p>本章着重探讨了多重继承这把双刃剑。讲述了Python中的MRO（方法解析顺序），探讨了多重继承实现的一些可以称之为准则的最佳实践标准。</p>\n"},{"title":"fluent python 第一章小记","date":"2017-07-14T10:32:42.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true"],"toc":true,"comment":true,"_content":"\n## Fluent Python ##\n### Chapter 1. The Python Data Model ###\n### Python数据模型 ###\n* 特殊方法：magic method/dunder method (double underscores (i.e., \\_\\_getitem__()))\n* 特殊方法使对象能**实现，支持基本的语言框架并与之交互**,例如：\n\t- Iteration 迭代\n\t- Collections 集合\n\t- Attribute access 访问属性\n\t- Operator overloading 运算符重载\n\t- Function and method invocation 函数和方法调用\n\t- Object creation and destruction 对象的创建和销毁\n\t- String representation and formatting 字符串表示和格式化\n\t- Managed contexts (i.e., with blocks) 管理上下文  \n* namedtuple的使用：   \n\n    ```python  \n    >>> import collections\n    >>> Card = collections.namedtuple('Card', ['x','y'])    \n    >>> card = Card(11,22)  \n    >>> print card.x\n    11\n    >>> print card.y\n    22 \n    >>> x, y = card\n    >>> print x,y\n    11 22   \n\t```\n\n* 使用特殊方法的好处：\n\t- 类的使用者不需要记忆**随意定义**的标准方法名。（例如：怎样获取对象中元素的数量，.size()? .length()? 如果用特殊方法\\_\\_len__()可以直接调用len(object)）\n\t- 类的使用者更容易从Python庞大的标准库中获益，并且可以避免重造轮子（例如：random.choice函数）  \n\t- \\_\\_getitem__()方法使得类可以进行迭代(iterable),可以进行切片(index slicing)\n\n* 使用特殊方法需要注意的：\n\t- 特殊方法不是给人用的，而是给Python解释器用的，一般我们用len(my_obj)而不是my\\_obj.\\_\\_len\\_\\_()\n\t- 对于list, str, bytearray之类的内置类型，使用len()时，CPython 解释器直接返回PyVarObject的ob_size这个属性的值，这比调用__len__()方法快得多。PyVarObject是一个代表所有可变长度对象的C语言结构体。\n\t- 一般对特殊方法的调用都是隐式的，比如for语句隐式地调用了__iter__()函数\n\t- 通过内置的函数（例如 len、iter、str，等等）来使用特殊方法是最好的选择。这些内置函数不仅会调用特殊方法，通常还提供额外的好处(上面提到过)，而且对于一些内置的类来说，调用函数的速度更快。\n\t- 不要随意使用特殊方法的命名方式命名一般的方法，可能会造成混淆。\n* 特殊方法使用的举例([构造向量](https://github.com/aldslvda/fluent-python/blob/master/1.The%20Python%20Data%20Model/1-2/numeric_types.py))：\n\t- 对象的字符串表示：如果没有实现\\_\\_repr\\_\\_这个特殊方法，控制台就会出现 <Vector object at 0x10e100070>这样的表示，而如果我们实现了这个方法，控制台就能将对象的详细信息打印出来。    \n\t  \\_\\_repr\\_\\_方法中可以使用%r 获取不同类型属性的标准字符串表示，比如Vector(1, 2) 或 Vector('1', '2')    \n\t  \\_\\_repr\\_\\_ 需要尽可能没有歧义，并且提示如何使用类创建相同的变量    \n\t  与\\_\\_str\\_\\_的不同之处在于， \\_\\_str\\_\\_在str()函数或者 print对象时会被调用，\\_\\_str\\_\\_用于展示适合展示给终端用户的信息。如果二者只能选其中一个创建，那么\\_\\_repr\\_\\_是比较好的选择，因为Python解释器在找不到\\_\\_str\\_\\_时会调用\\_\\_repr\\_\\_作为替代。([StackOverflow](https://stackoverflow.com/questions/1436703/difference-between-str-and-repr-in-python))    \n\t- 算术运算：上面的向量对象使用\\_\\_add\\_\\_和\\_\\_mul\\_\\_实现了+和*运算。这两个运算的实现都是构造了新的对象，而不是对原来的对象进行改动。实际上这也是中缀运算的基本要求。\n\t- 布尔运算: Python中的对象在需要的场景(比如if, while)可以作为bool值使用。  \n\t  一般用户自定义的对象都被默认为True，但是如果对象实现了\\_\\_bool\\_\\_或者\\_\\_len\\_\\_，情况就不一样了。如果实现了\\_\\_bool\\_\\_,对象的布尔值视为bool()的返回值；如果没有实现\\_\\_bool\\_\\_而实现了\\_\\_len\\_\\_，那么len()为0的对象就被视为False。    \n\t  \n* 特殊方法一览：\n\tThe Python Language Reference的[“Data Model”](https://docs.python.org/3/reference/datamodel.html)这一章节列出了83个特殊方法，其中有47个用于实现算术运算，位运算和比较。\n\n* 小结：\n\t- 通过实现特殊函数，自定义的对象可以表现得更像是内置的对象，同时使得对象的使用更加便捷，更加Pythonic\n\t- Python自定义对象的一个基本要求是提供自身的可用的字符串表示。一个用途是开发者用于debug和打印log，另一个用法是终端用户查看对象的信息。这两个功能分别用\\_\\_repr\\_\\_和\\_\\_str\\_\\_实现\n\t- 对序列类型的对象的模拟是特殊方法使用最广泛的场景，比如前面提到的[FrenchDeck](https://github.com/aldslvda/fluent-python/blob/master/1.The%20Python%20Data%20Model/1-1/card_deck.py)\n\t- Python 的运算符重载这一模式提供了丰富的数值类型，除了内置的类型之外，还有\ndecimal.Decimal 和 fractions.Fraction。这些都支持中缀运算。\n\n","source":"_posts/fluent-python-chapter1-note.md","raw":"title: fluent python 第一章小记\ndate: 2017-07-14 18:32:42\ntags:\n- Python\n- magic method\n- fluent python\ncategories:\n- 读书笔记\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n## Fluent Python ##\n### Chapter 1. The Python Data Model ###\n### Python数据模型 ###\n* 特殊方法：magic method/dunder method (double underscores (i.e., \\_\\_getitem__()))\n* 特殊方法使对象能**实现，支持基本的语言框架并与之交互**,例如：\n\t- Iteration 迭代\n\t- Collections 集合\n\t- Attribute access 访问属性\n\t- Operator overloading 运算符重载\n\t- Function and method invocation 函数和方法调用\n\t- Object creation and destruction 对象的创建和销毁\n\t- String representation and formatting 字符串表示和格式化\n\t- Managed contexts (i.e., with blocks) 管理上下文  \n* namedtuple的使用：   \n\n    ```python  \n    >>> import collections\n    >>> Card = collections.namedtuple('Card', ['x','y'])    \n    >>> card = Card(11,22)  \n    >>> print card.x\n    11\n    >>> print card.y\n    22 \n    >>> x, y = card\n    >>> print x,y\n    11 22   \n\t```\n\n* 使用特殊方法的好处：\n\t- 类的使用者不需要记忆**随意定义**的标准方法名。（例如：怎样获取对象中元素的数量，.size()? .length()? 如果用特殊方法\\_\\_len__()可以直接调用len(object)）\n\t- 类的使用者更容易从Python庞大的标准库中获益，并且可以避免重造轮子（例如：random.choice函数）  \n\t- \\_\\_getitem__()方法使得类可以进行迭代(iterable),可以进行切片(index slicing)\n\n* 使用特殊方法需要注意的：\n\t- 特殊方法不是给人用的，而是给Python解释器用的，一般我们用len(my_obj)而不是my\\_obj.\\_\\_len\\_\\_()\n\t- 对于list, str, bytearray之类的内置类型，使用len()时，CPython 解释器直接返回PyVarObject的ob_size这个属性的值，这比调用__len__()方法快得多。PyVarObject是一个代表所有可变长度对象的C语言结构体。\n\t- 一般对特殊方法的调用都是隐式的，比如for语句隐式地调用了__iter__()函数\n\t- 通过内置的函数（例如 len、iter、str，等等）来使用特殊方法是最好的选择。这些内置函数不仅会调用特殊方法，通常还提供额外的好处(上面提到过)，而且对于一些内置的类来说，调用函数的速度更快。\n\t- 不要随意使用特殊方法的命名方式命名一般的方法，可能会造成混淆。\n* 特殊方法使用的举例([构造向量](https://github.com/aldslvda/fluent-python/blob/master/1.The%20Python%20Data%20Model/1-2/numeric_types.py))：\n\t- 对象的字符串表示：如果没有实现\\_\\_repr\\_\\_这个特殊方法，控制台就会出现 <Vector object at 0x10e100070>这样的表示，而如果我们实现了这个方法，控制台就能将对象的详细信息打印出来。    \n\t  \\_\\_repr\\_\\_方法中可以使用%r 获取不同类型属性的标准字符串表示，比如Vector(1, 2) 或 Vector('1', '2')    \n\t  \\_\\_repr\\_\\_ 需要尽可能没有歧义，并且提示如何使用类创建相同的变量    \n\t  与\\_\\_str\\_\\_的不同之处在于， \\_\\_str\\_\\_在str()函数或者 print对象时会被调用，\\_\\_str\\_\\_用于展示适合展示给终端用户的信息。如果二者只能选其中一个创建，那么\\_\\_repr\\_\\_是比较好的选择，因为Python解释器在找不到\\_\\_str\\_\\_时会调用\\_\\_repr\\_\\_作为替代。([StackOverflow](https://stackoverflow.com/questions/1436703/difference-between-str-and-repr-in-python))    \n\t- 算术运算：上面的向量对象使用\\_\\_add\\_\\_和\\_\\_mul\\_\\_实现了+和*运算。这两个运算的实现都是构造了新的对象，而不是对原来的对象进行改动。实际上这也是中缀运算的基本要求。\n\t- 布尔运算: Python中的对象在需要的场景(比如if, while)可以作为bool值使用。  \n\t  一般用户自定义的对象都被默认为True，但是如果对象实现了\\_\\_bool\\_\\_或者\\_\\_len\\_\\_，情况就不一样了。如果实现了\\_\\_bool\\_\\_,对象的布尔值视为bool()的返回值；如果没有实现\\_\\_bool\\_\\_而实现了\\_\\_len\\_\\_，那么len()为0的对象就被视为False。    \n\t  \n* 特殊方法一览：\n\tThe Python Language Reference的[“Data Model”](https://docs.python.org/3/reference/datamodel.html)这一章节列出了83个特殊方法，其中有47个用于实现算术运算，位运算和比较。\n\n* 小结：\n\t- 通过实现特殊函数，自定义的对象可以表现得更像是内置的对象，同时使得对象的使用更加便捷，更加Pythonic\n\t- Python自定义对象的一个基本要求是提供自身的可用的字符串表示。一个用途是开发者用于debug和打印log，另一个用法是终端用户查看对象的信息。这两个功能分别用\\_\\_repr\\_\\_和\\_\\_str\\_\\_实现\n\t- 对序列类型的对象的模拟是特殊方法使用最广泛的场景，比如前面提到的[FrenchDeck](https://github.com/aldslvda/fluent-python/blob/master/1.The%20Python%20Data%20Model/1-1/card_deck.py)\n\t- Python 的运算符重载这一模式提供了丰富的数值类型，除了内置的类型之外，还有\ndecimal.Decimal 和 fractions.Fraction。这些都支持中缀运算。\n\n","slug":"fluent-python-chapter1-note","published":1,"updated":"2019-04-25T01:27:24.910Z","comments":1,"layout":"post","link":"","_id":"cjuw5c6a1000idhyfqe8tfl72","content":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-1-The-Python-Data-Model\"><a href=\"#Chapter-1-The-Python-Data-Model\" class=\"headerlink\" title=\"Chapter 1. The Python Data Model\"></a>Chapter 1. The Python Data Model</h3><h3 id=\"Python数据模型\"><a href=\"#Python数据模型\" class=\"headerlink\" title=\"Python数据模型\"></a>Python数据模型</h3><ul>\n<li>特殊方法：magic method/dunder method (double underscores (i.e., __getitem__()))</li>\n<li>特殊方法使对象能<strong>实现，支持基本的语言框架并与之交互</strong>,例如：<ul>\n<li>Iteration 迭代</li>\n<li>Collections 集合</li>\n<li>Attribute access 访问属性</li>\n<li>Operator overloading 运算符重载</li>\n<li>Function and method invocation 函数和方法调用</li>\n<li>Object creation and destruction 对象的创建和销毁</li>\n<li>String representation and formatting 字符串表示和格式化</li>\n<li>Managed contexts (i.e., with blocks) 管理上下文  </li>\n</ul>\n</li>\n<li><p>namedtuple的使用：   </p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> collections</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Card = collections.namedtuple(<span class=\"string\">'Card'</span>, [<span class=\"string\">'x'</span>,<span class=\"string\">'y'</span>])    </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>card = Card(<span class=\"number\">11</span>,<span class=\"number\">22</span>)  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> card.x</span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> card.y</span><br><span class=\"line\"><span class=\"number\">22</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x, y = card</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> x,y</span><br><span class=\"line\"><span class=\"number\">11</span> <span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用特殊方法的好处：</p>\n<ul>\n<li>类的使用者不需要记忆<strong>随意定义</strong>的标准方法名。（例如：怎样获取对象中元素的数量，.size()? .length()? 如果用特殊方法__len__()可以直接调用len(object)）</li>\n<li>类的使用者更容易从Python庞大的标准库中获益，并且可以避免重造轮子（例如：random.choice函数）  </li>\n<li>__getitem__()方法使得类可以进行迭代(iterable),可以进行切片(index slicing)</li>\n</ul>\n</li>\n<li><p>使用特殊方法需要注意的：</p>\n<ul>\n<li>特殊方法不是给人用的，而是给Python解释器用的，一般我们用len(my_obj)而不是my_obj.__len__()</li>\n<li>对于list, str, bytearray之类的内置类型，使用len()时，CPython 解释器直接返回PyVarObject的ob_size这个属性的值，这比调用<strong>len</strong>()方法快得多。PyVarObject是一个代表所有可变长度对象的C语言结构体。</li>\n<li>一般对特殊方法的调用都是隐式的，比如for语句隐式地调用了<strong>iter</strong>()函数</li>\n<li>通过内置的函数（例如 len、iter、str，等等）来使用特殊方法是最好的选择。这些内置函数不仅会调用特殊方法，通常还提供额外的好处(上面提到过)，而且对于一些内置的类来说，调用函数的速度更快。</li>\n<li>不要随意使用特殊方法的命名方式命名一般的方法，可能会造成混淆。</li>\n</ul>\n</li>\n<li><p>特殊方法使用的举例(<a href=\"https://github.com/aldslvda/fluent-python/blob/master/1.The%20Python%20Data%20Model/1-2/numeric_types.py\" target=\"_blank\" rel=\"noopener\">构造向量</a>)：</p>\n<ul>\n<li>对象的字符串表示：如果没有实现__repr__这个特殊方法，控制台就会出现 <vector object at 0x10e100070>这样的表示，而如果我们实现了这个方法，控制台就能将对象的详细信息打印出来。<br>__repr__方法中可以使用%r 获取不同类型属性的标准字符串表示，比如Vector(1, 2) 或 Vector(‘1’, ‘2’)<br>__repr__ 需要尽可能没有歧义，并且提示如何使用类创建相同的变量<br>与__str__的不同之处在于， __str__在str()函数或者 print对象时会被调用，__str__用于展示适合展示给终端用户的信息。如果二者只能选其中一个创建，那么__repr__是比较好的选择，因为Python解释器在找不到__str__时会调用__repr__作为替代。(<a href=\"https://stackoverflow.com/questions/1436703/difference-between-str-and-repr-in-python\" target=\"_blank\" rel=\"noopener\">StackOverflow</a>)    </vector></li>\n<li>算术运算：上面的向量对象使用__add__和__mul__实现了+和*运算。这两个运算的实现都是构造了新的对象，而不是对原来的对象进行改动。实际上这也是中缀运算的基本要求。</li>\n<li>布尔运算: Python中的对象在需要的场景(比如if, while)可以作为bool值使用。<br>一般用户自定义的对象都被默认为True，但是如果对象实现了__bool__或者__len__，情况就不一样了。如果实现了__bool__,对象的布尔值视为bool()的返回值；如果没有实现__bool__而实现了__len__，那么len()为0的对象就被视为False。    </li>\n</ul>\n</li>\n<li><p>特殊方法一览：<br>  The Python Language Reference的<a href=\"https://docs.python.org/3/reference/datamodel.html\" target=\"_blank\" rel=\"noopener\">“Data Model”</a>这一章节列出了83个特殊方法，其中有47个用于实现算术运算，位运算和比较。</p>\n</li>\n<li><p>小结：</p>\n<ul>\n<li>通过实现特殊函数，自定义的对象可以表现得更像是内置的对象，同时使得对象的使用更加便捷，更加Pythonic</li>\n<li>Python自定义对象的一个基本要求是提供自身的可用的字符串表示。一个用途是开发者用于debug和打印log，另一个用法是终端用户查看对象的信息。这两个功能分别用__repr__和__str__实现</li>\n<li>对序列类型的对象的模拟是特殊方法使用最广泛的场景，比如前面提到的<a href=\"https://github.com/aldslvda/fluent-python/blob/master/1.The%20Python%20Data%20Model/1-1/card_deck.py\" target=\"_blank\" rel=\"noopener\">FrenchDeck</a></li>\n<li>Python 的运算符重载这一模式提供了丰富的数值类型，除了内置的类型之外，还有<br>decimal.Decimal 和 fractions.Fraction。这些都支持中缀运算。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-1-The-Python-Data-Model\"><a href=\"#Chapter-1-The-Python-Data-Model\" class=\"headerlink\" title=\"Chapter 1. The Python Data Model\"></a>Chapter 1. The Python Data Model</h3><h3 id=\"Python数据模型\"><a href=\"#Python数据模型\" class=\"headerlink\" title=\"Python数据模型\"></a>Python数据模型</h3><ul>\n<li>特殊方法：magic method/dunder method (double underscores (i.e., __getitem__()))</li>\n<li>特殊方法使对象能<strong>实现，支持基本的语言框架并与之交互</strong>,例如：<ul>\n<li>Iteration 迭代</li>\n<li>Collections 集合</li>\n<li>Attribute access 访问属性</li>\n<li>Operator overloading 运算符重载</li>\n<li>Function and method invocation 函数和方法调用</li>\n<li>Object creation and destruction 对象的创建和销毁</li>\n<li>String representation and formatting 字符串表示和格式化</li>\n<li>Managed contexts (i.e., with blocks) 管理上下文  </li>\n</ul>\n</li>\n<li><p>namedtuple的使用：   </p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> collections</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Card = collections.namedtuple(<span class=\"string\">'Card'</span>, [<span class=\"string\">'x'</span>,<span class=\"string\">'y'</span>])    </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>card = Card(<span class=\"number\">11</span>,<span class=\"number\">22</span>)  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> card.x</span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> card.y</span><br><span class=\"line\"><span class=\"number\">22</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x, y = card</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> x,y</span><br><span class=\"line\"><span class=\"number\">11</span> <span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用特殊方法的好处：</p>\n<ul>\n<li>类的使用者不需要记忆<strong>随意定义</strong>的标准方法名。（例如：怎样获取对象中元素的数量，.size()? .length()? 如果用特殊方法__len__()可以直接调用len(object)）</li>\n<li>类的使用者更容易从Python庞大的标准库中获益，并且可以避免重造轮子（例如：random.choice函数）  </li>\n<li>__getitem__()方法使得类可以进行迭代(iterable),可以进行切片(index slicing)</li>\n</ul>\n</li>\n<li><p>使用特殊方法需要注意的：</p>\n<ul>\n<li>特殊方法不是给人用的，而是给Python解释器用的，一般我们用len(my_obj)而不是my_obj.__len__()</li>\n<li>对于list, str, bytearray之类的内置类型，使用len()时，CPython 解释器直接返回PyVarObject的ob_size这个属性的值，这比调用<strong>len</strong>()方法快得多。PyVarObject是一个代表所有可变长度对象的C语言结构体。</li>\n<li>一般对特殊方法的调用都是隐式的，比如for语句隐式地调用了<strong>iter</strong>()函数</li>\n<li>通过内置的函数（例如 len、iter、str，等等）来使用特殊方法是最好的选择。这些内置函数不仅会调用特殊方法，通常还提供额外的好处(上面提到过)，而且对于一些内置的类来说，调用函数的速度更快。</li>\n<li>不要随意使用特殊方法的命名方式命名一般的方法，可能会造成混淆。</li>\n</ul>\n</li>\n<li><p>特殊方法使用的举例(<a href=\"https://github.com/aldslvda/fluent-python/blob/master/1.The%20Python%20Data%20Model/1-2/numeric_types.py\" target=\"_blank\" rel=\"noopener\">构造向量</a>)：</p>\n<ul>\n<li>对象的字符串表示：如果没有实现__repr__这个特殊方法，控制台就会出现 <vector object at 0x10e100070>这样的表示，而如果我们实现了这个方法，控制台就能将对象的详细信息打印出来。<br>__repr__方法中可以使用%r 获取不同类型属性的标准字符串表示，比如Vector(1, 2) 或 Vector(‘1’, ‘2’)<br>__repr__ 需要尽可能没有歧义，并且提示如何使用类创建相同的变量<br>与__str__的不同之处在于， __str__在str()函数或者 print对象时会被调用，__str__用于展示适合展示给终端用户的信息。如果二者只能选其中一个创建，那么__repr__是比较好的选择，因为Python解释器在找不到__str__时会调用__repr__作为替代。(<a href=\"https://stackoverflow.com/questions/1436703/difference-between-str-and-repr-in-python\" target=\"_blank\" rel=\"noopener\">StackOverflow</a>)    </vector></li>\n<li>算术运算：上面的向量对象使用__add__和__mul__实现了+和*运算。这两个运算的实现都是构造了新的对象，而不是对原来的对象进行改动。实际上这也是中缀运算的基本要求。</li>\n<li>布尔运算: Python中的对象在需要的场景(比如if, while)可以作为bool值使用。<br>一般用户自定义的对象都被默认为True，但是如果对象实现了__bool__或者__len__，情况就不一样了。如果实现了__bool__,对象的布尔值视为bool()的返回值；如果没有实现__bool__而实现了__len__，那么len()为0的对象就被视为False。    </li>\n</ul>\n</li>\n<li><p>特殊方法一览：<br>  The Python Language Reference的<a href=\"https://docs.python.org/3/reference/datamodel.html\" target=\"_blank\" rel=\"noopener\">“Data Model”</a>这一章节列出了83个特殊方法，其中有47个用于实现算术运算，位运算和比较。</p>\n</li>\n<li><p>小结：</p>\n<ul>\n<li>通过实现特殊函数，自定义的对象可以表现得更像是内置的对象，同时使得对象的使用更加便捷，更加Pythonic</li>\n<li>Python自定义对象的一个基本要求是提供自身的可用的字符串表示。一个用途是开发者用于debug和打印log，另一个用法是终端用户查看对象的信息。这两个功能分别用__repr__和__str__实现</li>\n<li>对序列类型的对象的模拟是特殊方法使用最广泛的场景，比如前面提到的<a href=\"https://github.com/aldslvda/fluent-python/blob/master/1.The%20Python%20Data%20Model/1-1/card_deck.py\" target=\"_blank\" rel=\"noopener\">FrenchDeck</a></li>\n<li>Python 的运算符重载这一模式提供了丰富的数值类型，除了内置的类型之外，还有<br>decimal.Decimal 和 fractions.Fraction。这些都支持中缀运算。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"2017，新的开始","date":"2017-01-02T04:11:27.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/nichijou_logo1.jpeg?raw=true"],"toc":true,"comment":true,"_content":"\n## 2017，新的开始\n#### 试试用Pelican开个github page\n2017还是到了，总归要有点新气象 ，之前一直想要找个地方写点总结 , 一直以来都没找到好的地方，听说github好像也能开个人页面，就搞了一个玩玩233333   \n\n虽然不知道能不能坚持。。。（xD\n\n```python\nprint 'Hello, My blog!'\n```\nxixi\n\n ","source":"_posts/hello.md","raw":"title: 2017，新的开始\ndate: 2017-01-02 12:11:27\ntags:\n- flag\ncategories:\n- 生活记录\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/nichijou_logo1.jpeg?raw=true\"\ntoc: true\ncomment: true\n---\n\n## 2017，新的开始\n#### 试试用Pelican开个github page\n2017还是到了，总归要有点新气象 ，之前一直想要找个地方写点总结 , 一直以来都没找到好的地方，听说github好像也能开个人页面，就搞了一个玩玩233333   \n\n虽然不知道能不能坚持。。。（xD\n\n```python\nprint 'Hello, My blog!'\n```\nxixi\n\n ","slug":"hello","published":1,"updated":"2019-04-25T01:27:25.981Z","comments":1,"layout":"post","link":"","_id":"cjuw5c6a3000mdhyfn49h0msc","content":"<h2 id=\"2017，新的开始\"><a href=\"#2017，新的开始\" class=\"headerlink\" title=\"2017，新的开始\"></a>2017，新的开始</h2><h4 id=\"试试用Pelican开个github-page\"><a href=\"#试试用Pelican开个github-page\" class=\"headerlink\" title=\"试试用Pelican开个github page\"></a>试试用Pelican开个github page</h4><p>2017还是到了，总归要有点新气象 ，之前一直想要找个地方写点总结 , 一直以来都没找到好的地方，听说github好像也能开个人页面，就搞了一个玩玩233333   </p>\n<p>虽然不知道能不能坚持。。。（xD</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Hello, My blog!'</span></span><br></pre></td></tr></table></figure>\n<p>xixi</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"2017，新的开始\"><a href=\"#2017，新的开始\" class=\"headerlink\" title=\"2017，新的开始\"></a>2017，新的开始</h2><h4 id=\"试试用Pelican开个github-page\"><a href=\"#试试用Pelican开个github-page\" class=\"headerlink\" title=\"试试用Pelican开个github page\"></a>试试用Pelican开个github page</h4><p>2017还是到了，总归要有点新气象 ，之前一直想要找个地方写点总结 , 一直以来都没找到好的地方，听说github好像也能开个人页面，就搞了一个玩玩233333   </p>\n<p>虽然不知道能不能坚持。。。（xD</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Hello, My blog!'</span></span><br></pre></td></tr></table></figure>\n<p>xixi</p>\n"},{"title":"jetbrain系列软件破解","date":"2017-09-26T08:40:06.000Z","toc":true,"comment":true,"_content":"破解方式如图\n\n![示例](https://github.com/aldslvda/blog-images/blob/master/idea_crack.png?raw=true)","source":"_posts/jetbrain_crack.md","raw":"title: jetbrain系列软件破解\ndate: 2017-09-26 16:40:06\ntags:\n- software\n- crack\n- jetbrains\ncategories:\n- 技术分享\ntoc: true\ncomment: true\n---\n破解方式如图\n\n![示例](https://github.com/aldslvda/blog-images/blob/master/idea_crack.png?raw=true)","slug":"jetbrain_crack","published":1,"updated":"2019-04-25T01:27:25.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuw5c6a4000odhyf2i26figm","content":"<p>破解方式如图</p>\n<p><img src=\"https://github.com/aldslvda/blog-images/blob/master/idea_crack.png?raw=true\" alt=\"示例\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>破解方式如图</p>\n<p><img src=\"https://github.com/aldslvda/blog-images/blob/master/idea_crack.png?raw=true\" alt=\"示例\"></p>\n"},{"title":"VPS升级内核，开启TCP BBR 实现高效单边加速","date":"2017-04-13T17:47:02.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/google_tcp_bbr.png?raw=true"],"toc":true,"comment":true,"_content":"\n## 1. 从锐速到BBR\n自从锐速发布以来，这款牛逼的单边加速神器的确为一些线路不太优秀的服务器带来了更优秀的体验。  \n但是由于过高的价格和不再低端售卖。导致了我们除了使用这个软件的破解版之外，并没办法得到一个免费好用的单边加速功能。  \n而由于破解**并不完美**，使得在使用中会出现一些无法解决的问题，比如随着运行时间变久，加速效果越来越差（体验中的问题就是youtube观看视频从流畅1080p到不流畅480p。。。。）  \n但是去年下半年谷歌为我们带来了新的TCP拥塞控制算法*BBR（Bottleneck Bandwidth and RTT)*。 目前在 Linux Kernel 4.9 及之后的版本中加入了该算法，所以我们只要升级内核就可以使用BBR开启单边加速了。\n\n## 2. 升级Ubuntu内核\n上面说到 BBR只被 Linux Kernel 4.9 以后的版本支持，而VPS多用一些比较稳定的旧版内核。所以我们要做的第一步就是升级内核:  \n\n- 首先查看自己的系统内核：\n\n```bash\n$uname -a\n```\n\n如果 系统版本是4.9及以后, 升级内核这一步就可以跳过拉~  \n\n- 到ubuntu官方[内核源](http://kernel.ubuntu.com/~kernel-ppa/mainline/)找到最新的内核：   \n  比如：\n  \n  > http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.11-rc6/linux-image-4.11.0-041100rc6-generic_4.11.0-041100rc6.201704091331_amd64.deb\n  \n- 找到之后下载这个deb包：\n\n```bash\n$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.11-rc6/linux-image-4.11.0-041100rc6-generic_4.11.0-041100rc6.201704091331_amd64.deb\n```\n- 安装内核：\n\n```bash\n$ dpkg -i linux-image-4.11.0-041100rc6-generic_4.11.0-041100rc6.201704091331_amd64.deb\n```\n- 查看已安装的内核：\n\n```bash\n$ dpkg-l|grep linux-image\n```\n- （可选）卸载旧版内核：\n\n```bash\n$ apt-get purge ${old_linux_image}\n```\n- 更新 grub 文件并重启\n\n```bash\n$ update-grub\n$ reboot\n```\n- 重启之后就是新内核拉~\n\n## 3. 开启 BBR 加速\n\n- 修改系统配置文件 sysctl.config\n\n```bash\n$ echo\"net.core.default_qdisc=fq\">>/etc/sysctl.conf\n$ echo\"net.ipv4.tcp_congestion_control=bbr\">>/etc/sysctl.conf\n```\n\n- 保存并应用修改\n\n```bash\n$ sysctl-p\n```\n\n- 查看是否生效：\n\n```bash\n$ sysctl net.ipv4.tcp_available_congestion_control\n```\n如果输出如下：  \n\n> net.ipv4.tcp*_*available*_*congestion_control=bbr cubic ren\n表明开启成功\n\n## 4. 关闭 TCP BBR\n执行下面的命令修改系统配置：\n\n```bash\nsed-i'/net\\.core\\.default_qdisc=fq/d'/etc/sysctl.conf\nsed-i'/net\\.ipv4\\.tcp_congestion_control=bbr/d'/etc/sysctl.conf\nsysctl-p\nreboot\n```\n执行完上面的代码，即 **修改配置-重启VPS** 之后就可以关闭BBR加速了。\n\n\n","source":"_posts/ubuntu_tcp_bbr.md","raw":"title: VPS升级内核，开启TCP BBR 实现高效单边加速\ndate: 2017-04-14 09:47:02+08:00\ntags:\n- ubuntu\n- vps\n- tcp-bbr\ncategories:\n- 技术分享\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/google_tcp_bbr.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n## 1. 从锐速到BBR\n自从锐速发布以来，这款牛逼的单边加速神器的确为一些线路不太优秀的服务器带来了更优秀的体验。  \n但是由于过高的价格和不再低端售卖。导致了我们除了使用这个软件的破解版之外，并没办法得到一个免费好用的单边加速功能。  \n而由于破解**并不完美**，使得在使用中会出现一些无法解决的问题，比如随着运行时间变久，加速效果越来越差（体验中的问题就是youtube观看视频从流畅1080p到不流畅480p。。。。）  \n但是去年下半年谷歌为我们带来了新的TCP拥塞控制算法*BBR（Bottleneck Bandwidth and RTT)*。 目前在 Linux Kernel 4.9 及之后的版本中加入了该算法，所以我们只要升级内核就可以使用BBR开启单边加速了。\n\n## 2. 升级Ubuntu内核\n上面说到 BBR只被 Linux Kernel 4.9 以后的版本支持，而VPS多用一些比较稳定的旧版内核。所以我们要做的第一步就是升级内核:  \n\n- 首先查看自己的系统内核：\n\n```bash\n$uname -a\n```\n\n如果 系统版本是4.9及以后, 升级内核这一步就可以跳过拉~  \n\n- 到ubuntu官方[内核源](http://kernel.ubuntu.com/~kernel-ppa/mainline/)找到最新的内核：   \n  比如：\n  \n  > http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.11-rc6/linux-image-4.11.0-041100rc6-generic_4.11.0-041100rc6.201704091331_amd64.deb\n  \n- 找到之后下载这个deb包：\n\n```bash\n$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.11-rc6/linux-image-4.11.0-041100rc6-generic_4.11.0-041100rc6.201704091331_amd64.deb\n```\n- 安装内核：\n\n```bash\n$ dpkg -i linux-image-4.11.0-041100rc6-generic_4.11.0-041100rc6.201704091331_amd64.deb\n```\n- 查看已安装的内核：\n\n```bash\n$ dpkg-l|grep linux-image\n```\n- （可选）卸载旧版内核：\n\n```bash\n$ apt-get purge ${old_linux_image}\n```\n- 更新 grub 文件并重启\n\n```bash\n$ update-grub\n$ reboot\n```\n- 重启之后就是新内核拉~\n\n## 3. 开启 BBR 加速\n\n- 修改系统配置文件 sysctl.config\n\n```bash\n$ echo\"net.core.default_qdisc=fq\">>/etc/sysctl.conf\n$ echo\"net.ipv4.tcp_congestion_control=bbr\">>/etc/sysctl.conf\n```\n\n- 保存并应用修改\n\n```bash\n$ sysctl-p\n```\n\n- 查看是否生效：\n\n```bash\n$ sysctl net.ipv4.tcp_available_congestion_control\n```\n如果输出如下：  \n\n> net.ipv4.tcp*_*available*_*congestion_control=bbr cubic ren\n表明开启成功\n\n## 4. 关闭 TCP BBR\n执行下面的命令修改系统配置：\n\n```bash\nsed-i'/net\\.core\\.default_qdisc=fq/d'/etc/sysctl.conf\nsed-i'/net\\.ipv4\\.tcp_congestion_control=bbr/d'/etc/sysctl.conf\nsysctl-p\nreboot\n```\n执行完上面的代码，即 **修改配置-重启VPS** 之后就可以关闭BBR加速了。\n\n\n","slug":"ubuntu_tcp_bbr","published":1,"updated":"2019-04-25T01:27:25.000Z","comments":1,"layout":"post","link":"","_id":"cjuw5c6a6000tdhyfwa2wevr2","content":"<h2 id=\"1-从锐速到BBR\"><a href=\"#1-从锐速到BBR\" class=\"headerlink\" title=\"1. 从锐速到BBR\"></a>1. 从锐速到BBR</h2><p>自从锐速发布以来，这款牛逼的单边加速神器的确为一些线路不太优秀的服务器带来了更优秀的体验。<br>但是由于过高的价格和不再低端售卖。导致了我们除了使用这个软件的破解版之外，并没办法得到一个免费好用的单边加速功能。<br>而由于破解<strong>并不完美</strong>，使得在使用中会出现一些无法解决的问题，比如随着运行时间变久，加速效果越来越差（体验中的问题就是youtube观看视频从流畅1080p到不流畅480p。。。。）<br>但是去年下半年谷歌为我们带来了新的TCP拥塞控制算法<em>BBR（Bottleneck Bandwidth and RTT)</em>。 目前在 Linux Kernel 4.9 及之后的版本中加入了该算法，所以我们只要升级内核就可以使用BBR开启单边加速了。</p>\n<h2 id=\"2-升级Ubuntu内核\"><a href=\"#2-升级Ubuntu内核\" class=\"headerlink\" title=\"2. 升级Ubuntu内核\"></a>2. 升级Ubuntu内核</h2><p>上面说到 BBR只被 Linux Kernel 4.9 以后的版本支持，而VPS多用一些比较稳定的旧版内核。所以我们要做的第一步就是升级内核:  </p>\n<ul>\n<li>首先查看自己的系统内核：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$uname</span> -a</span><br></pre></td></tr></table></figure>\n<p>如果 系统版本是4.9及以后, 升级内核这一步就可以跳过拉~  </p>\n<ul>\n<li><p>到ubuntu官方<a href=\"http://kernel.ubuntu.com/~kernel-ppa/mainline/\" target=\"_blank\" rel=\"noopener\">内核源</a>找到最新的内核：<br>比如：</p>\n<blockquote>\n<p><a href=\"http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.11-rc6/linux-image-4.11.0-041100rc6-generic_4.11.0-041100rc6.201704091331_amd64.deb\" target=\"_blank\" rel=\"noopener\">http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.11-rc6/linux-image-4.11.0-041100rc6-generic_4.11.0-041100rc6.201704091331_amd64.deb</a></p>\n</blockquote>\n</li>\n<li><p>找到之后下载这个deb包：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.11-rc6/linux-image-4.11.0-041100rc6-generic_4.11.0-041100rc6.201704091331_amd64.deb</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装内核：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dpkg -i linux-image-4.11.0-041100rc6-generic_4.11.0-041100rc6.201704091331_amd64.deb</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看已安装的内核：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dpkg<span class=\"_\">-l</span>|grep linux-image</span><br></pre></td></tr></table></figure>\n<ul>\n<li>（可选）卸载旧版内核：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apt-get purge <span class=\"variable\">$&#123;old_linux_image&#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>更新 grub 文件并重启</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ update-grub</span><br><span class=\"line\">$ reboot</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重启之后就是新内核拉~</li>\n</ul>\n<h2 id=\"3-开启-BBR-加速\"><a href=\"#3-开启-BBR-加速\" class=\"headerlink\" title=\"3. 开启 BBR 加速\"></a>3. 开启 BBR 加速</h2><ul>\n<li>修改系统配置文件 sysctl.config</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span><span class=\"string\">\"net.core.default_qdisc=fq\"</span>&gt;&gt;/etc/sysctl.conf</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span><span class=\"string\">\"net.ipv4.tcp_congestion_control=bbr\"</span>&gt;&gt;/etc/sysctl.conf</span><br></pre></td></tr></table></figure>\n<ul>\n<li>保存并应用修改</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysctl-p</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看是否生效：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure>\n<p>如果输出如下：  </p>\n<blockquote>\n<p>net.ipv4.tcp<em>_</em>available<em>_</em>congestion_control=bbr cubic ren<br>表明开启成功</p>\n</blockquote>\n<h2 id=\"4-关闭-TCP-BBR\"><a href=\"#4-关闭-TCP-BBR\" class=\"headerlink\" title=\"4. 关闭 TCP BBR\"></a>4. 关闭 TCP BBR</h2><p>执行下面的命令修改系统配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed-i<span class=\"string\">'/net\\.core\\.default_qdisc=fq/d'</span>/etc/sysctl.conf</span><br><span class=\"line\">sed-i<span class=\"string\">'/net\\.ipv4\\.tcp_congestion_control=bbr/d'</span>/etc/sysctl.conf</span><br><span class=\"line\">sysctl-p</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n<p>执行完上面的代码，即 <strong>修改配置-重启VPS</strong> 之后就可以关闭BBR加速了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-从锐速到BBR\"><a href=\"#1-从锐速到BBR\" class=\"headerlink\" title=\"1. 从锐速到BBR\"></a>1. 从锐速到BBR</h2><p>自从锐速发布以来，这款牛逼的单边加速神器的确为一些线路不太优秀的服务器带来了更优秀的体验。<br>但是由于过高的价格和不再低端售卖。导致了我们除了使用这个软件的破解版之外，并没办法得到一个免费好用的单边加速功能。<br>而由于破解<strong>并不完美</strong>，使得在使用中会出现一些无法解决的问题，比如随着运行时间变久，加速效果越来越差（体验中的问题就是youtube观看视频从流畅1080p到不流畅480p。。。。）<br>但是去年下半年谷歌为我们带来了新的TCP拥塞控制算法<em>BBR（Bottleneck Bandwidth and RTT)</em>。 目前在 Linux Kernel 4.9 及之后的版本中加入了该算法，所以我们只要升级内核就可以使用BBR开启单边加速了。</p>\n<h2 id=\"2-升级Ubuntu内核\"><a href=\"#2-升级Ubuntu内核\" class=\"headerlink\" title=\"2. 升级Ubuntu内核\"></a>2. 升级Ubuntu内核</h2><p>上面说到 BBR只被 Linux Kernel 4.9 以后的版本支持，而VPS多用一些比较稳定的旧版内核。所以我们要做的第一步就是升级内核:  </p>\n<ul>\n<li>首先查看自己的系统内核：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$uname</span> -a</span><br></pre></td></tr></table></figure>\n<p>如果 系统版本是4.9及以后, 升级内核这一步就可以跳过拉~  </p>\n<ul>\n<li><p>到ubuntu官方<a href=\"http://kernel.ubuntu.com/~kernel-ppa/mainline/\" target=\"_blank\" rel=\"noopener\">内核源</a>找到最新的内核：<br>比如：</p>\n<blockquote>\n<p><a href=\"http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.11-rc6/linux-image-4.11.0-041100rc6-generic_4.11.0-041100rc6.201704091331_amd64.deb\" target=\"_blank\" rel=\"noopener\">http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.11-rc6/linux-image-4.11.0-041100rc6-generic_4.11.0-041100rc6.201704091331_amd64.deb</a></p>\n</blockquote>\n</li>\n<li><p>找到之后下载这个deb包：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.11-rc6/linux-image-4.11.0-041100rc6-generic_4.11.0-041100rc6.201704091331_amd64.deb</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装内核：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dpkg -i linux-image-4.11.0-041100rc6-generic_4.11.0-041100rc6.201704091331_amd64.deb</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看已安装的内核：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dpkg<span class=\"_\">-l</span>|grep linux-image</span><br></pre></td></tr></table></figure>\n<ul>\n<li>（可选）卸载旧版内核：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apt-get purge <span class=\"variable\">$&#123;old_linux_image&#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>更新 grub 文件并重启</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ update-grub</span><br><span class=\"line\">$ reboot</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重启之后就是新内核拉~</li>\n</ul>\n<h2 id=\"3-开启-BBR-加速\"><a href=\"#3-开启-BBR-加速\" class=\"headerlink\" title=\"3. 开启 BBR 加速\"></a>3. 开启 BBR 加速</h2><ul>\n<li>修改系统配置文件 sysctl.config</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span><span class=\"string\">\"net.core.default_qdisc=fq\"</span>&gt;&gt;/etc/sysctl.conf</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span><span class=\"string\">\"net.ipv4.tcp_congestion_control=bbr\"</span>&gt;&gt;/etc/sysctl.conf</span><br></pre></td></tr></table></figure>\n<ul>\n<li>保存并应用修改</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysctl-p</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看是否生效：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure>\n<p>如果输出如下：  </p>\n<blockquote>\n<p>net.ipv4.tcp<em>_</em>available<em>_</em>congestion_control=bbr cubic ren<br>表明开启成功</p>\n</blockquote>\n<h2 id=\"4-关闭-TCP-BBR\"><a href=\"#4-关闭-TCP-BBR\" class=\"headerlink\" title=\"4. 关闭 TCP BBR\"></a>4. 关闭 TCP BBR</h2><p>执行下面的命令修改系统配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed-i<span class=\"string\">'/net\\.core\\.default_qdisc=fq/d'</span>/etc/sysctl.conf</span><br><span class=\"line\">sed-i<span class=\"string\">'/net\\.ipv4\\.tcp_congestion_control=bbr/d'</span>/etc/sysctl.conf</span><br><span class=\"line\">sysctl-p</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n<p>执行完上面的代码，即 <strong>修改配置-重启VPS</strong> 之后就可以关闭BBR加速了。</p>\n"},{"title":"Fluent Python第六章:使用一等函数实现设计模式(2) —— 命令模式","date":"2017-12-19T09:01:13.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true"],"toc":true,"comment":true,"_content":"\n## Fluent Python ##\n### Chapter 6. Design Patterns with First-Class Functions ###\n### 第六章. 使用一等函数实现设计模式(2) —— 命令模式\n这一章中会讲到设计模式的定义和适用场景，以及利用Python的一等函数特性对设计模式的实现。\n\n这篇博文中讨论命令模式。\n\n#### 命令模式\n![命令模式的UML类图](https://github.com/aldslvda/blog-images/blob/master/fluent-python-6.2.png?raw=true)\n\n上面的UML类图所描述的场景是\"菜单驱动的文本编辑器\",使用命令模式实现。各个命令可以有不同的接收者（实现操作的对象）。对 PasteCommand 来说，接收者是Document。对 OpenCommand 来说，接收者是应用程序。\n\n命令模式的目的是解耦调用操作的对象（调用者）和提供实现的对象（接收者）。在上面所举的示例中，调用者是图形应用程序中的菜单项，而接收者是被编辑的文档或应用程序自身。\n\n这个模式的做法是，在二者之间放一个 Command 对象，让它实现只有一个方法（execute）的接口，调用接收者中的方法执行所需的操作。这样，调用者无需了解接收者的接口，而且不同的接收者可以适应不同的 Command 子类。调用者有一个具体的命令，通过调用 execute 方法执行。注意，UML图中的 MacroCommand 可能保存一系列命令，它的 execute() 方法会在各个命令上调用相同的方法。\n\n如何利用Python的一等对象性质对这个设计模式进行优化呢？之前讲到策略模式时我们提到过:\n\n>  使用函数代替没有状态的类的对象\n\n这样我们可以不为调用者提供Command对象，而是提供一个函数command。调用者不用调用command.excute(),使用command()就行。而MacroCommand可以实现成可调用的对象(实现\\_\\_call\\_\\_方法)，维护一个函数列表供以后调用。\n\n```python   \nclass MacroCommand:\n    \"\"\"一个执行一组命令的命令\"\"\"\n    def __init__(self, commands):\n        self.commands = list(commands)\n    def __call__(self):\n        for command in self.commands:\n            command()\n```\n\n如果需要支持撤销操作(命令模式的定义中要求支持), 上面的代码可能远远不够，这时也可以使用Python提供的一些替代品:   \n\n- 为上面的可调用示例添加属性来保存状态\n- 使用函数闭包在调用之间保存函数的内部状态\n\n这里采用的方式与“策略”模式所用的类似：把实现单方法接口的类的实例替换成可调用对象。毕竟，每个Python 可调用对象都实现了单方法接口，这个方法就是 __call__。\n\n#### 总结\n\n通过对策略模式和命令模式的实现，我们看到了Python的一等对象特性的使用方式:\n\n>  设计模式或API 要求组件实现单方法接口，而那个方法的名称很宽泛，例如“execute”“run”或“doIt”。在 Python 中，这些模式或 API 通常可以使用一等函数或其他可调用的对象实现，从而减少样板(重复的)代码。\n\n#### 关于Python语言的设计模式读物\n在阅读本章之前，我也去找过设计模式相关书籍，基本都是使用Java/C#实现的，Python相关的设计模式书籍确实乏善可陈。   \nFluent-Python推荐的设计模式读物:    \n\n- 《Python Cookbook（第 3 版）中文版》（David Beazley 和 Brian K. Jones 著）的“8.21 实现访问者模式”使用优雅的方式实现了“访问者”模式，其中的 NodeVisitor 类把方法当作一等对象处理。\n- Learning Python Design Patterns（Gennadiy Zlobin 著，Packt 出版社）\n- 《Python 高级编程》（Tarek Ziadé著）是市面上最好的 Python 中级书，第 14 章“有用的设计模式”从 Python 程序员的视角介绍了 7 种经典模式。\n- [Failed Project: Python 3 Patterns,Recipes and Idioms](http://www.mindviewinc.com/Books/Python3Patterns/Index.php)(Last updated  2015-08-04)\n- 《Head First 设计模式》(这本我买了。。。。围绕Java讲的)\n- 《Ruby 设计模式》（Russ Olsen 著）一书有很多见解也适用于 Python。\n- 《设计模式：可复用面向对象软件的基础》一书是必读的。光是“引言”就值回书钱了(书里这么写的)\n","source":"_posts/fluent-python-6-2.md","raw":"title: Fluent Python第六章:使用一等函数实现设计模式(2) —— 命令模式\ndate: 2017-12-19 17:01:13\ntags:\n- Python\n- design pattern\n- The Command pattern\n- fluent python\ncategories:\n- 读书笔记\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n## Fluent Python ##\n### Chapter 6. Design Patterns with First-Class Functions ###\n### 第六章. 使用一等函数实现设计模式(2) —— 命令模式\n这一章中会讲到设计模式的定义和适用场景，以及利用Python的一等函数特性对设计模式的实现。\n\n这篇博文中讨论命令模式。\n\n#### 命令模式\n![命令模式的UML类图](https://github.com/aldslvda/blog-images/blob/master/fluent-python-6.2.png?raw=true)\n\n上面的UML类图所描述的场景是\"菜单驱动的文本编辑器\",使用命令模式实现。各个命令可以有不同的接收者（实现操作的对象）。对 PasteCommand 来说，接收者是Document。对 OpenCommand 来说，接收者是应用程序。\n\n命令模式的目的是解耦调用操作的对象（调用者）和提供实现的对象（接收者）。在上面所举的示例中，调用者是图形应用程序中的菜单项，而接收者是被编辑的文档或应用程序自身。\n\n这个模式的做法是，在二者之间放一个 Command 对象，让它实现只有一个方法（execute）的接口，调用接收者中的方法执行所需的操作。这样，调用者无需了解接收者的接口，而且不同的接收者可以适应不同的 Command 子类。调用者有一个具体的命令，通过调用 execute 方法执行。注意，UML图中的 MacroCommand 可能保存一系列命令，它的 execute() 方法会在各个命令上调用相同的方法。\n\n如何利用Python的一等对象性质对这个设计模式进行优化呢？之前讲到策略模式时我们提到过:\n\n>  使用函数代替没有状态的类的对象\n\n这样我们可以不为调用者提供Command对象，而是提供一个函数command。调用者不用调用command.excute(),使用command()就行。而MacroCommand可以实现成可调用的对象(实现\\_\\_call\\_\\_方法)，维护一个函数列表供以后调用。\n\n```python   \nclass MacroCommand:\n    \"\"\"一个执行一组命令的命令\"\"\"\n    def __init__(self, commands):\n        self.commands = list(commands)\n    def __call__(self):\n        for command in self.commands:\n            command()\n```\n\n如果需要支持撤销操作(命令模式的定义中要求支持), 上面的代码可能远远不够，这时也可以使用Python提供的一些替代品:   \n\n- 为上面的可调用示例添加属性来保存状态\n- 使用函数闭包在调用之间保存函数的内部状态\n\n这里采用的方式与“策略”模式所用的类似：把实现单方法接口的类的实例替换成可调用对象。毕竟，每个Python 可调用对象都实现了单方法接口，这个方法就是 __call__。\n\n#### 总结\n\n通过对策略模式和命令模式的实现，我们看到了Python的一等对象特性的使用方式:\n\n>  设计模式或API 要求组件实现单方法接口，而那个方法的名称很宽泛，例如“execute”“run”或“doIt”。在 Python 中，这些模式或 API 通常可以使用一等函数或其他可调用的对象实现，从而减少样板(重复的)代码。\n\n#### 关于Python语言的设计模式读物\n在阅读本章之前，我也去找过设计模式相关书籍，基本都是使用Java/C#实现的，Python相关的设计模式书籍确实乏善可陈。   \nFluent-Python推荐的设计模式读物:    \n\n- 《Python Cookbook（第 3 版）中文版》（David Beazley 和 Brian K. Jones 著）的“8.21 实现访问者模式”使用优雅的方式实现了“访问者”模式，其中的 NodeVisitor 类把方法当作一等对象处理。\n- Learning Python Design Patterns（Gennadiy Zlobin 著，Packt 出版社）\n- 《Python 高级编程》（Tarek Ziadé著）是市面上最好的 Python 中级书，第 14 章“有用的设计模式”从 Python 程序员的视角介绍了 7 种经典模式。\n- [Failed Project: Python 3 Patterns,Recipes and Idioms](http://www.mindviewinc.com/Books/Python3Patterns/Index.php)(Last updated  2015-08-04)\n- 《Head First 设计模式》(这本我买了。。。。围绕Java讲的)\n- 《Ruby 设计模式》（Russ Olsen 著）一书有很多见解也适用于 Python。\n- 《设计模式：可复用面向对象软件的基础》一书是必读的。光是“引言”就值回书钱了(书里这么写的)\n","slug":"fluent-python-6-2","published":1,"updated":"2019-04-25T01:27:25.339Z","comments":1,"layout":"post","link":"","_id":"cjuw5c6a8000vdhyf73dmqsyc","content":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-6-Design-Patterns-with-First-Class-Functions\"><a href=\"#Chapter-6-Design-Patterns-with-First-Class-Functions\" class=\"headerlink\" title=\"Chapter 6. Design Patterns with First-Class Functions\"></a>Chapter 6. Design Patterns with First-Class Functions</h3><h3 id=\"第六章-使用一等函数实现设计模式-2-——-命令模式\"><a href=\"#第六章-使用一等函数实现设计模式-2-——-命令模式\" class=\"headerlink\" title=\"第六章. 使用一等函数实现设计模式(2) —— 命令模式\"></a>第六章. 使用一等函数实现设计模式(2) —— 命令模式</h3><p>这一章中会讲到设计模式的定义和适用场景，以及利用Python的一等函数特性对设计模式的实现。</p>\n<p>这篇博文中讨论命令模式。</p>\n<h4 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h4><p><img src=\"https://github.com/aldslvda/blog-images/blob/master/fluent-python-6.2.png?raw=true\" alt=\"命令模式的UML类图\"></p>\n<p>上面的UML类图所描述的场景是”菜单驱动的文本编辑器”,使用命令模式实现。各个命令可以有不同的接收者（实现操作的对象）。对 PasteCommand 来说，接收者是Document。对 OpenCommand 来说，接收者是应用程序。</p>\n<p>命令模式的目的是解耦调用操作的对象（调用者）和提供实现的对象（接收者）。在上面所举的示例中，调用者是图形应用程序中的菜单项，而接收者是被编辑的文档或应用程序自身。</p>\n<p>这个模式的做法是，在二者之间放一个 Command 对象，让它实现只有一个方法（execute）的接口，调用接收者中的方法执行所需的操作。这样，调用者无需了解接收者的接口，而且不同的接收者可以适应不同的 Command 子类。调用者有一个具体的命令，通过调用 execute 方法执行。注意，UML图中的 MacroCommand 可能保存一系列命令，它的 execute() 方法会在各个命令上调用相同的方法。</p>\n<p>如何利用Python的一等对象性质对这个设计模式进行优化呢？之前讲到策略模式时我们提到过:</p>\n<blockquote>\n<p> 使用函数代替没有状态的类的对象</p>\n</blockquote>\n<p>这样我们可以不为调用者提供Command对象，而是提供一个函数command。调用者不用调用command.excute(),使用command()就行。而MacroCommand可以实现成可调用的对象(实现__call__方法)，维护一个函数列表供以后调用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MacroCommand</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"一个执行一组命令的命令\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, commands)</span>:</span></span><br><span class=\"line\">        self.commands = list(commands)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> command <span class=\"keyword\">in</span> self.commands:</span><br><span class=\"line\">            command()</span><br></pre></td></tr></table></figure>\n<p>如果需要支持撤销操作(命令模式的定义中要求支持), 上面的代码可能远远不够，这时也可以使用Python提供的一些替代品:   </p>\n<ul>\n<li>为上面的可调用示例添加属性来保存状态</li>\n<li>使用函数闭包在调用之间保存函数的内部状态</li>\n</ul>\n<p>这里采用的方式与“策略”模式所用的类似：把实现单方法接口的类的实例替换成可调用对象。毕竟，每个Python 可调用对象都实现了单方法接口，这个方法就是 <strong>call</strong>。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>通过对策略模式和命令模式的实现，我们看到了Python的一等对象特性的使用方式:</p>\n<blockquote>\n<p> 设计模式或API 要求组件实现单方法接口，而那个方法的名称很宽泛，例如“execute”“run”或“doIt”。在 Python 中，这些模式或 API 通常可以使用一等函数或其他可调用的对象实现，从而减少样板(重复的)代码。</p>\n</blockquote>\n<h4 id=\"关于Python语言的设计模式读物\"><a href=\"#关于Python语言的设计模式读物\" class=\"headerlink\" title=\"关于Python语言的设计模式读物\"></a>关于Python语言的设计模式读物</h4><p>在阅读本章之前，我也去找过设计模式相关书籍，基本都是使用Java/C#实现的，Python相关的设计模式书籍确实乏善可陈。<br>Fluent-Python推荐的设计模式读物:    </p>\n<ul>\n<li>《Python Cookbook（第 3 版）中文版》（David Beazley 和 Brian K. Jones 著）的“8.21 实现访问者模式”使用优雅的方式实现了“访问者”模式，其中的 NodeVisitor 类把方法当作一等对象处理。</li>\n<li>Learning Python Design Patterns（Gennadiy Zlobin 著，Packt 出版社）</li>\n<li>《Python 高级编程》（Tarek Ziadé著）是市面上最好的 Python 中级书，第 14 章“有用的设计模式”从 Python 程序员的视角介绍了 7 种经典模式。</li>\n<li><a href=\"http://www.mindviewinc.com/Books/Python3Patterns/Index.php\" target=\"_blank\" rel=\"noopener\">Failed Project: Python 3 Patterns,Recipes and Idioms</a>(Last updated  2015-08-04)</li>\n<li>《Head First 设计模式》(这本我买了。。。。围绕Java讲的)</li>\n<li>《Ruby 设计模式》（Russ Olsen 著）一书有很多见解也适用于 Python。</li>\n<li>《设计模式：可复用面向对象软件的基础》一书是必读的。光是“引言”就值回书钱了(书里这么写的)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-6-Design-Patterns-with-First-Class-Functions\"><a href=\"#Chapter-6-Design-Patterns-with-First-Class-Functions\" class=\"headerlink\" title=\"Chapter 6. Design Patterns with First-Class Functions\"></a>Chapter 6. Design Patterns with First-Class Functions</h3><h3 id=\"第六章-使用一等函数实现设计模式-2-——-命令模式\"><a href=\"#第六章-使用一等函数实现设计模式-2-——-命令模式\" class=\"headerlink\" title=\"第六章. 使用一等函数实现设计模式(2) —— 命令模式\"></a>第六章. 使用一等函数实现设计模式(2) —— 命令模式</h3><p>这一章中会讲到设计模式的定义和适用场景，以及利用Python的一等函数特性对设计模式的实现。</p>\n<p>这篇博文中讨论命令模式。</p>\n<h4 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h4><p><img src=\"https://github.com/aldslvda/blog-images/blob/master/fluent-python-6.2.png?raw=true\" alt=\"命令模式的UML类图\"></p>\n<p>上面的UML类图所描述的场景是”菜单驱动的文本编辑器”,使用命令模式实现。各个命令可以有不同的接收者（实现操作的对象）。对 PasteCommand 来说，接收者是Document。对 OpenCommand 来说，接收者是应用程序。</p>\n<p>命令模式的目的是解耦调用操作的对象（调用者）和提供实现的对象（接收者）。在上面所举的示例中，调用者是图形应用程序中的菜单项，而接收者是被编辑的文档或应用程序自身。</p>\n<p>这个模式的做法是，在二者之间放一个 Command 对象，让它实现只有一个方法（execute）的接口，调用接收者中的方法执行所需的操作。这样，调用者无需了解接收者的接口，而且不同的接收者可以适应不同的 Command 子类。调用者有一个具体的命令，通过调用 execute 方法执行。注意，UML图中的 MacroCommand 可能保存一系列命令，它的 execute() 方法会在各个命令上调用相同的方法。</p>\n<p>如何利用Python的一等对象性质对这个设计模式进行优化呢？之前讲到策略模式时我们提到过:</p>\n<blockquote>\n<p> 使用函数代替没有状态的类的对象</p>\n</blockquote>\n<p>这样我们可以不为调用者提供Command对象，而是提供一个函数command。调用者不用调用command.excute(),使用command()就行。而MacroCommand可以实现成可调用的对象(实现__call__方法)，维护一个函数列表供以后调用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MacroCommand</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"一个执行一组命令的命令\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, commands)</span>:</span></span><br><span class=\"line\">        self.commands = list(commands)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> command <span class=\"keyword\">in</span> self.commands:</span><br><span class=\"line\">            command()</span><br></pre></td></tr></table></figure>\n<p>如果需要支持撤销操作(命令模式的定义中要求支持), 上面的代码可能远远不够，这时也可以使用Python提供的一些替代品:   </p>\n<ul>\n<li>为上面的可调用示例添加属性来保存状态</li>\n<li>使用函数闭包在调用之间保存函数的内部状态</li>\n</ul>\n<p>这里采用的方式与“策略”模式所用的类似：把实现单方法接口的类的实例替换成可调用对象。毕竟，每个Python 可调用对象都实现了单方法接口，这个方法就是 <strong>call</strong>。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>通过对策略模式和命令模式的实现，我们看到了Python的一等对象特性的使用方式:</p>\n<blockquote>\n<p> 设计模式或API 要求组件实现单方法接口，而那个方法的名称很宽泛，例如“execute”“run”或“doIt”。在 Python 中，这些模式或 API 通常可以使用一等函数或其他可调用的对象实现，从而减少样板(重复的)代码。</p>\n</blockquote>\n<h4 id=\"关于Python语言的设计模式读物\"><a href=\"#关于Python语言的设计模式读物\" class=\"headerlink\" title=\"关于Python语言的设计模式读物\"></a>关于Python语言的设计模式读物</h4><p>在阅读本章之前，我也去找过设计模式相关书籍，基本都是使用Java/C#实现的，Python相关的设计模式书籍确实乏善可陈。<br>Fluent-Python推荐的设计模式读物:    </p>\n<ul>\n<li>《Python Cookbook（第 3 版）中文版》（David Beazley 和 Brian K. Jones 著）的“8.21 实现访问者模式”使用优雅的方式实现了“访问者”模式，其中的 NodeVisitor 类把方法当作一等对象处理。</li>\n<li>Learning Python Design Patterns（Gennadiy Zlobin 著，Packt 出版社）</li>\n<li>《Python 高级编程》（Tarek Ziadé著）是市面上最好的 Python 中级书，第 14 章“有用的设计模式”从 Python 程序员的视角介绍了 7 种经典模式。</li>\n<li><a href=\"http://www.mindviewinc.com/Books/Python3Patterns/Index.php\" target=\"_blank\" rel=\"noopener\">Failed Project: Python 3 Patterns,Recipes and Idioms</a>(Last updated  2015-08-04)</li>\n<li>《Head First 设计模式》(这本我买了。。。。围绕Java讲的)</li>\n<li>《Ruby 设计模式》（Russ Olsen 著）一书有很多见解也适用于 Python。</li>\n<li>《设计模式：可复用面向对象软件的基础》一书是必读的。光是“引言”就值回书钱了(书里这么写的)</li>\n</ul>\n"},{"title":"获取BiliBili视频下载地址","date":"2017-02-05T07:22:36.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/bilibili_banner.png?raw=true"],"toc":true,"comment":true,"_content":"\n\n## 获取BiliBili视频下载地址\n\n最近在写Bilibili App的爬虫，由于bilibili是一个视频站，写爬虫很重要的一个环节就是怎样获取到视频的**下载地址**，所以我把如何获取B站视频下载地址做了一个简单的整理。\n\n### 获取需要下载视频的av号\n一个常见的B站视频的链接如下：\n\n```\nhttp://www.bilibili.com/video/av1608918/\n```\n\n拿到av后面的数字，称为**param**\n\n```\nparam = '1608918'\n```\n\n### 获取视频信息\n通过抓取B站app发送的HTTP请求，可以知道获取一个视频信息的URL如下：\n\n```\nhttps://app.bilibili.com/x/v2/view?actionKey=appkey&aid=7725070&appkey=27eb53fc9058f8c3&build=4070&device=phone&from=1&mobi_app=iphone&platform=ios&sign=3fa3c3fa6557094b5680066009b41897&ts=1482977603\n```\n\n这个URL参数很多，接下来一一作解释。\n\n- actionKey=appkey \n- aid=7725070 param的值 \n- appkey=27eb53fc9058f8c3 固定 \n- build=4070&device=phone&from=1&mobi_app=iphone&platform=ios 固定 \n- sign=3fa3c3fa6557094b5680066009b41897 \n- ts=1482977603 时间戳\n\n需要我们其他参数都是现成可以获取到的，而**sign**这个参数是我们需要自己计算得到的，计算方法如下：\n\n#### (1) 将除sign外的其他参数按升序排列，得：\n\n```\nactionKey=appkey&aid=7725070&appkey=27eb53fc9058f8c3&build=4070&device=phone&from=1&mobi_app=iphone&platform=ios&ts=1482977603\n```\n\n#### (2) 将步骤1的结果与secretKey进行拼接\n\n   secretKey的取值（根据appKey来获取）： \n\n```\n{\"27eb53fc9058f8c3\":\"c2ed53a74eeefe3cf99fbd01d8c9c375\",\n\"q7R5WBWXdV1T5DO6\":\"HxibjZZ04WxYn6xVS1q0pIZvxf8b2fOa\"}\n```\n\n   这里secretKey的值是\n\n```\nc2ed53a74eeefe3cf99fbd01d8c9c375\n```\n   得到结果：\n\n```\nactionKey=appkey&aid=7725070&appkey=27eb53fc9058f8c3&build=4070&device=phone&from=1&mobi_app=iphone&platform=ios&ts=1482977603c2ed53a74eeefe3cf99fbd01d8c9c375\n```\n\n#### (3) 计算步骤2中得到的字符串的md5，得到\n\n```\n3fa3c3fa6557094b5680066009b41897\n```\n这个值就是sign\n\n经过上面的步骤，我们可以得到获取视频信息的URL，通过GET请求进行访问，会返回json格式的视频信息\n\t\n```python\n{\n    \"code\":0,\n    \"data\":{\n        \"aid\":7725070,\n        \"tid\":20,\n        \"tname\":\"宅舞\",\n        \"copyright\":1,\n        \"pic\":\"http://i1.hdslb.com/bfs/archive/e0ccafafc5ad49cea65818dcf512858cea00ed88.jpg\",\n        \"title\":\"【黒kuromi】[963] - [ 梦与叶樱❤ ] - [fgo冲田总司cos\",\n        \"pubdate\":1482839192,\n        \"ctime\":1482839192,\n        \"desc\":\"自制 翻跳 原振付，音源:sm16595856 dancer: @黒kuromi 摄影感谢:@飘雪幻幻 后期感谢:@怕怕papa ------------------------------------------------- 最近开始玩fgo~身为一个非酋真的很想抽5星呜呜！！ 樱saber太好看ww~~选了冲田总司这套跳了这个比较合适的舞xdd 希望大家看得开心&gt;&lt;~~感谢观看~~\",\n        \"state\":0,\n        \"attribute\":1622016,\n        \"duration\":493,\n        \"tags\":[],\n        \"rights\":{\n            \"bp\":0,\n            \"elec\":1,\n            \"download\":1,\n            \"movie\":0,\n            \"pay\":0,\n            \"hd5\":0\n        },\n        \"owner\":{\n            \"mid\":427657,\n            \"name\":\"黒クロミ\",\n            \"face\":\"http://i2.hdslb.com/bfs/face/8ec946923ce70e990cf1b05dc3cb14bda6c0d0e0.jpg\"\n        },\n        \"stat\":{\n            \"view\":170984,\n            \"danmaku\":874,\n            \"reply\":387,\n            \"favorite\":5513,\n            \"coin\":3277,\n            \"share\":183,\n            \"now_rank\":0,\n            \"his_rank\":0\n        },\n        \"pages\":[\n            {\n                \"cid\":12662538,\n                \"page\":1,\n                \"from\":\"vupload\",\n                \"link\":\"\",\n                \"has_alias\":0,\n                \"weblink\":\"\",\n                \"part\":\"\",\n                \"rich_vid\":\"\",\n                \"vid\":\"vupload_12662538\"\n            }\n        ],\n        \"owner_ext\":{},\n        \"req_user\":{},\n        \"online\":0,\n        \"tag\":[],\n        \"relates\":[]\n    },\n    \"message\":\"\"\n}\n```\n\n由于过于冗杂，这里只截取了一部分。\n其中对于视频下载真正有用的是data下面的pages的值：\n\n```python\n{\n    \"pages\":[\n        {\n            \"cid\":12662538,\n            \"page\":1,\n            \"from\":\"vupload\",\n            \"link\":\"\",\n            \"has_alias\":0,\n            \"weblink\":\"\",\n            \"part\":\"\",\n            \"rich_vid\":\"\",\n            \"vid\":\"vupload_12662538\"\n        }\n    ]\n}\n```\n\n看得出来这是一个**列表**，其实b站的CDN上面，一个较长的视频是由几个较短的视频拼接而成，还有另外一种情况就是b站视频的**分P**，都会使得同一个视频下面存储多个小的视频，pages就是这些小视频的列表，这些视频需要分别获得**下载地址**,我们关注的参数是每一个子视频的**cid**。\n\n### 获取视频的下载地址\n下面的链接同样是通过抓取HTTP请求获得：\n\n```\nhttps://interface.bilibili.com/playurl?device=phone&otype=json&buvid=3168fe38e580b16a02c2cc9beceaf6b7&cid=12662538&appkey=YvirImLGlLANCLvM&platform=iphone&build=4070&quality=2&sign=ae1954356fbd510073f636d9ca2d36e7\n```\n\n和上一步一样，对请求参数进行分析：\n\n- device=phone 固定 \n- otype=json 固定\n- buvid=3168fe38e580b16a02c2cc9beceaf6b7 固定 \n- cid=12662538 视频的cid \n- appkey=YvirImLGlLANCLvM 计算方法下面会介绍，但是这个参数其实可以直接固定下来。 \n- platform=iphone固定 \n- build=4070固定 \n- quality=2固定\n- sign=ae1954356fbd510073f636d9ca2d36e7 这个值同第二步获取视频信息的sign一样需要计算\n\nappKey的计算方式，下面是object-c代码,十分简单易懂，所以直接贴上来\n\n```c\nstring check_tv_box(string key, int addsum) { \n  \tconst char* sz = key.c_str(); \n    int len = key.length(); \n    int add = addsum;\n    // unsigned char out[17] = {0};\n    unsigned char* out = new unsigned char[len + 1]; \n    memset(out, 0, (len + 1) * sizeof(unsigned char)); \n    for (int i = 0; i < len; i++) {\n        int index = 0; \n        unsigned char ch = (unsigned char)sz[i]; \n        int num = ch + add; \n        num = (num - 65) % 57 + 65; \n        while (90 < num && 97 > num) {\n            add = (index * add) + add; index ++;\n            num = ch + add; num = (num - 65) % 57 + 65;\n        }\n    out[i] = (unsigned char)num;\n    }\n    string outString = (char*)out; delete [] out; return outString;\n}\nstring sz = \"VsfoFjIDZshujsdt\"; \nint add = 3; \nstring out1 = check_tv_box(sz, add);\n```\nappKey的初始字符串为\"VsfoFjIDZshujsdt”，累加子为3，返回的out1就是加密后的字符串，即appKey的值，这里是YvirImLGlLANCLvM\n\nsign的计算方式也会用到上面的check_tv_box()函数，下面是计算sign的步骤：\n\n#### (1) 计算用于拼接的字符串，代码如下：\n\t\n```c\nstring sz2 = \"zEcQEUTunrHlLvYiGXyefkmJPmDQEtow\"; \nadd = 9; \nstring out2 = check_tv_box(sz2, add);\n```\n\t\n算法与计算appKey的算法相同，但是初始字符串为\"zEcQEUTunrHlLvYiGXyefkmJPmDQEtow”，累加子为9.得到结果：JNlZNgfNGKZEpaDTkCdPQVXntXhuiJEM\n\t\n注意：这个结果固定，可以直接用这个值\n\n#### (2) 将其他所有参数排序 \n\n```\nappkey=YvirImLGlLANCLvM&build=4070&buvid=3168fe38e580b16a02c2cc9beceaf6b7&cid=12662538&device=phone&otype=json&platform=iphone&quality=2\n```\n\n#### (3) 在参数最后拼接步骤1的结果： \n\n```\nappkey=YvirImLGlLANCLvM&build=4070&buvid=3168fe38e580b16a02c2cc9beceaf6b7&cid=12662538&device=phone&otype=json&platform=iphone&quality=2JNlZNgfNGKZEpaDTkCdPQVXntXhuiJEM\n```\n\n#### (4) 计算步骤3结果的md5，得： \n\n```\nae1954356fbd510073f636d9ca2d36e7\n```\n\n计算出了appKey和sign的值，就可以拼接出获取视频下载地址的URL了。\n发送请求可以得到返回的json信息：\n\n```python\n{\n    \"from\":\"local\",\n    \"result\":\"suee\",\n    \"format\":\"hdmp4\",\n    \"timelength\":493546,\n    \"accept_format\":\"mp4,hdmp4,flv\",\n    \"accept_quality\":[\n        3,\n        2,\n        1\n    ],\n    \"seek_param\":\"start\",\n    \"seek_type\":\"second\",\n    \"durl\":[\n        {\n            \"order\":1,\n            \"length\":493546,\n            \"size\":72091760,\n            \"url\":\" http://ws.acgvideo.com/a/2d/12662538-1-hd.mp4?wsTime=1482992010&wsSecret2=de4372d19062d035396dd2625976ca1a&oi=3664534074&rate=2000\"\n        }\n    ]\n}\n```\n其中durl下面的url参数就是视频下载地址了。\n\n\n### 写了一个月的第一篇=。=终于写完了\n其实工作中碰到过很多app需要抓取信息，但是狠下心来写一篇总结的就只有b站23333\n\n终于是写完了=。=\n\n下一篇依然遥遥无期。。。。\n\n \n","source":"_posts/bilibili_download.md","raw":"title: 获取BiliBili视频下载地址\ndate: 2017-02-05 15:22:36\ntags:\n- Python\n- 爬虫\n- bilibili\t\ncategories:\n- 技术分享\t\nphotos:\t\n- \"https://github.com/aldslvda/blog-images/blob/master/bilibili_banner.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n\n## 获取BiliBili视频下载地址\n\n最近在写Bilibili App的爬虫，由于bilibili是一个视频站，写爬虫很重要的一个环节就是怎样获取到视频的**下载地址**，所以我把如何获取B站视频下载地址做了一个简单的整理。\n\n### 获取需要下载视频的av号\n一个常见的B站视频的链接如下：\n\n```\nhttp://www.bilibili.com/video/av1608918/\n```\n\n拿到av后面的数字，称为**param**\n\n```\nparam = '1608918'\n```\n\n### 获取视频信息\n通过抓取B站app发送的HTTP请求，可以知道获取一个视频信息的URL如下：\n\n```\nhttps://app.bilibili.com/x/v2/view?actionKey=appkey&aid=7725070&appkey=27eb53fc9058f8c3&build=4070&device=phone&from=1&mobi_app=iphone&platform=ios&sign=3fa3c3fa6557094b5680066009b41897&ts=1482977603\n```\n\n这个URL参数很多，接下来一一作解释。\n\n- actionKey=appkey \n- aid=7725070 param的值 \n- appkey=27eb53fc9058f8c3 固定 \n- build=4070&device=phone&from=1&mobi_app=iphone&platform=ios 固定 \n- sign=3fa3c3fa6557094b5680066009b41897 \n- ts=1482977603 时间戳\n\n需要我们其他参数都是现成可以获取到的，而**sign**这个参数是我们需要自己计算得到的，计算方法如下：\n\n#### (1) 将除sign外的其他参数按升序排列，得：\n\n```\nactionKey=appkey&aid=7725070&appkey=27eb53fc9058f8c3&build=4070&device=phone&from=1&mobi_app=iphone&platform=ios&ts=1482977603\n```\n\n#### (2) 将步骤1的结果与secretKey进行拼接\n\n   secretKey的取值（根据appKey来获取）： \n\n```\n{\"27eb53fc9058f8c3\":\"c2ed53a74eeefe3cf99fbd01d8c9c375\",\n\"q7R5WBWXdV1T5DO6\":\"HxibjZZ04WxYn6xVS1q0pIZvxf8b2fOa\"}\n```\n\n   这里secretKey的值是\n\n```\nc2ed53a74eeefe3cf99fbd01d8c9c375\n```\n   得到结果：\n\n```\nactionKey=appkey&aid=7725070&appkey=27eb53fc9058f8c3&build=4070&device=phone&from=1&mobi_app=iphone&platform=ios&ts=1482977603c2ed53a74eeefe3cf99fbd01d8c9c375\n```\n\n#### (3) 计算步骤2中得到的字符串的md5，得到\n\n```\n3fa3c3fa6557094b5680066009b41897\n```\n这个值就是sign\n\n经过上面的步骤，我们可以得到获取视频信息的URL，通过GET请求进行访问，会返回json格式的视频信息\n\t\n```python\n{\n    \"code\":0,\n    \"data\":{\n        \"aid\":7725070,\n        \"tid\":20,\n        \"tname\":\"宅舞\",\n        \"copyright\":1,\n        \"pic\":\"http://i1.hdslb.com/bfs/archive/e0ccafafc5ad49cea65818dcf512858cea00ed88.jpg\",\n        \"title\":\"【黒kuromi】[963] - [ 梦与叶樱❤ ] - [fgo冲田总司cos\",\n        \"pubdate\":1482839192,\n        \"ctime\":1482839192,\n        \"desc\":\"自制 翻跳 原振付，音源:sm16595856 dancer: @黒kuromi 摄影感谢:@飘雪幻幻 后期感谢:@怕怕papa ------------------------------------------------- 最近开始玩fgo~身为一个非酋真的很想抽5星呜呜！！ 樱saber太好看ww~~选了冲田总司这套跳了这个比较合适的舞xdd 希望大家看得开心&gt;&lt;~~感谢观看~~\",\n        \"state\":0,\n        \"attribute\":1622016,\n        \"duration\":493,\n        \"tags\":[],\n        \"rights\":{\n            \"bp\":0,\n            \"elec\":1,\n            \"download\":1,\n            \"movie\":0,\n            \"pay\":0,\n            \"hd5\":0\n        },\n        \"owner\":{\n            \"mid\":427657,\n            \"name\":\"黒クロミ\",\n            \"face\":\"http://i2.hdslb.com/bfs/face/8ec946923ce70e990cf1b05dc3cb14bda6c0d0e0.jpg\"\n        },\n        \"stat\":{\n            \"view\":170984,\n            \"danmaku\":874,\n            \"reply\":387,\n            \"favorite\":5513,\n            \"coin\":3277,\n            \"share\":183,\n            \"now_rank\":0,\n            \"his_rank\":0\n        },\n        \"pages\":[\n            {\n                \"cid\":12662538,\n                \"page\":1,\n                \"from\":\"vupload\",\n                \"link\":\"\",\n                \"has_alias\":0,\n                \"weblink\":\"\",\n                \"part\":\"\",\n                \"rich_vid\":\"\",\n                \"vid\":\"vupload_12662538\"\n            }\n        ],\n        \"owner_ext\":{},\n        \"req_user\":{},\n        \"online\":0,\n        \"tag\":[],\n        \"relates\":[]\n    },\n    \"message\":\"\"\n}\n```\n\n由于过于冗杂，这里只截取了一部分。\n其中对于视频下载真正有用的是data下面的pages的值：\n\n```python\n{\n    \"pages\":[\n        {\n            \"cid\":12662538,\n            \"page\":1,\n            \"from\":\"vupload\",\n            \"link\":\"\",\n            \"has_alias\":0,\n            \"weblink\":\"\",\n            \"part\":\"\",\n            \"rich_vid\":\"\",\n            \"vid\":\"vupload_12662538\"\n        }\n    ]\n}\n```\n\n看得出来这是一个**列表**，其实b站的CDN上面，一个较长的视频是由几个较短的视频拼接而成，还有另外一种情况就是b站视频的**分P**，都会使得同一个视频下面存储多个小的视频，pages就是这些小视频的列表，这些视频需要分别获得**下载地址**,我们关注的参数是每一个子视频的**cid**。\n\n### 获取视频的下载地址\n下面的链接同样是通过抓取HTTP请求获得：\n\n```\nhttps://interface.bilibili.com/playurl?device=phone&otype=json&buvid=3168fe38e580b16a02c2cc9beceaf6b7&cid=12662538&appkey=YvirImLGlLANCLvM&platform=iphone&build=4070&quality=2&sign=ae1954356fbd510073f636d9ca2d36e7\n```\n\n和上一步一样，对请求参数进行分析：\n\n- device=phone 固定 \n- otype=json 固定\n- buvid=3168fe38e580b16a02c2cc9beceaf6b7 固定 \n- cid=12662538 视频的cid \n- appkey=YvirImLGlLANCLvM 计算方法下面会介绍，但是这个参数其实可以直接固定下来。 \n- platform=iphone固定 \n- build=4070固定 \n- quality=2固定\n- sign=ae1954356fbd510073f636d9ca2d36e7 这个值同第二步获取视频信息的sign一样需要计算\n\nappKey的计算方式，下面是object-c代码,十分简单易懂，所以直接贴上来\n\n```c\nstring check_tv_box(string key, int addsum) { \n  \tconst char* sz = key.c_str(); \n    int len = key.length(); \n    int add = addsum;\n    // unsigned char out[17] = {0};\n    unsigned char* out = new unsigned char[len + 1]; \n    memset(out, 0, (len + 1) * sizeof(unsigned char)); \n    for (int i = 0; i < len; i++) {\n        int index = 0; \n        unsigned char ch = (unsigned char)sz[i]; \n        int num = ch + add; \n        num = (num - 65) % 57 + 65; \n        while (90 < num && 97 > num) {\n            add = (index * add) + add; index ++;\n            num = ch + add; num = (num - 65) % 57 + 65;\n        }\n    out[i] = (unsigned char)num;\n    }\n    string outString = (char*)out; delete [] out; return outString;\n}\nstring sz = \"VsfoFjIDZshujsdt\"; \nint add = 3; \nstring out1 = check_tv_box(sz, add);\n```\nappKey的初始字符串为\"VsfoFjIDZshujsdt”，累加子为3，返回的out1就是加密后的字符串，即appKey的值，这里是YvirImLGlLANCLvM\n\nsign的计算方式也会用到上面的check_tv_box()函数，下面是计算sign的步骤：\n\n#### (1) 计算用于拼接的字符串，代码如下：\n\t\n```c\nstring sz2 = \"zEcQEUTunrHlLvYiGXyefkmJPmDQEtow\"; \nadd = 9; \nstring out2 = check_tv_box(sz2, add);\n```\n\t\n算法与计算appKey的算法相同，但是初始字符串为\"zEcQEUTunrHlLvYiGXyefkmJPmDQEtow”，累加子为9.得到结果：JNlZNgfNGKZEpaDTkCdPQVXntXhuiJEM\n\t\n注意：这个结果固定，可以直接用这个值\n\n#### (2) 将其他所有参数排序 \n\n```\nappkey=YvirImLGlLANCLvM&build=4070&buvid=3168fe38e580b16a02c2cc9beceaf6b7&cid=12662538&device=phone&otype=json&platform=iphone&quality=2\n```\n\n#### (3) 在参数最后拼接步骤1的结果： \n\n```\nappkey=YvirImLGlLANCLvM&build=4070&buvid=3168fe38e580b16a02c2cc9beceaf6b7&cid=12662538&device=phone&otype=json&platform=iphone&quality=2JNlZNgfNGKZEpaDTkCdPQVXntXhuiJEM\n```\n\n#### (4) 计算步骤3结果的md5，得： \n\n```\nae1954356fbd510073f636d9ca2d36e7\n```\n\n计算出了appKey和sign的值，就可以拼接出获取视频下载地址的URL了。\n发送请求可以得到返回的json信息：\n\n```python\n{\n    \"from\":\"local\",\n    \"result\":\"suee\",\n    \"format\":\"hdmp4\",\n    \"timelength\":493546,\n    \"accept_format\":\"mp4,hdmp4,flv\",\n    \"accept_quality\":[\n        3,\n        2,\n        1\n    ],\n    \"seek_param\":\"start\",\n    \"seek_type\":\"second\",\n    \"durl\":[\n        {\n            \"order\":1,\n            \"length\":493546,\n            \"size\":72091760,\n            \"url\":\" http://ws.acgvideo.com/a/2d/12662538-1-hd.mp4?wsTime=1482992010&wsSecret2=de4372d19062d035396dd2625976ca1a&oi=3664534074&rate=2000\"\n        }\n    ]\n}\n```\n其中durl下面的url参数就是视频下载地址了。\n\n\n### 写了一个月的第一篇=。=终于写完了\n其实工作中碰到过很多app需要抓取信息，但是狠下心来写一篇总结的就只有b站23333\n\n终于是写完了=。=\n\n下一篇依然遥遥无期。。。。\n\n \n","slug":"bilibili_download","published":1,"updated":"2019-04-25T01:27:25.381Z","comments":1,"layout":"post","link":"","_id":"cjuw5c6g30035dhyfcxlkg0em","content":"<h2 id=\"获取BiliBili视频下载地址\"><a href=\"#获取BiliBili视频下载地址\" class=\"headerlink\" title=\"获取BiliBili视频下载地址\"></a>获取BiliBili视频下载地址</h2><p>最近在写Bilibili App的爬虫，由于bilibili是一个视频站，写爬虫很重要的一个环节就是怎样获取到视频的<strong>下载地址</strong>，所以我把如何获取B站视频下载地址做了一个简单的整理。</p>\n<h3 id=\"获取需要下载视频的av号\"><a href=\"#获取需要下载视频的av号\" class=\"headerlink\" title=\"获取需要下载视频的av号\"></a>获取需要下载视频的av号</h3><p>一个常见的B站视频的链接如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.bilibili.com/video/av1608918/</span><br></pre></td></tr></table></figure>\n<p>拿到av后面的数字，称为<strong>param</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">param = &apos;1608918&apos;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取视频信息\"><a href=\"#获取视频信息\" class=\"headerlink\" title=\"获取视频信息\"></a>获取视频信息</h3><p>通过抓取B站app发送的HTTP请求，可以知道获取一个视频信息的URL如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://app.bilibili.com/x/v2/view?actionKey=appkey&amp;aid=7725070&amp;appkey=27eb53fc9058f8c3&amp;build=4070&amp;device=phone&amp;from=1&amp;mobi_app=iphone&amp;platform=ios&amp;sign=3fa3c3fa6557094b5680066009b41897&amp;ts=1482977603</span><br></pre></td></tr></table></figure>\n<p>这个URL参数很多，接下来一一作解释。</p>\n<ul>\n<li>actionKey=appkey </li>\n<li>aid=7725070 param的值 </li>\n<li>appkey=27eb53fc9058f8c3 固定 </li>\n<li>build=4070&amp;device=phone&amp;from=1&amp;mobi_app=iphone&amp;platform=ios 固定 </li>\n<li>sign=3fa3c3fa6557094b5680066009b41897 </li>\n<li>ts=1482977603 时间戳</li>\n</ul>\n<p>需要我们其他参数都是现成可以获取到的，而<strong>sign</strong>这个参数是我们需要自己计算得到的，计算方法如下：</p>\n<h4 id=\"1-将除sign外的其他参数按升序排列，得：\"><a href=\"#1-将除sign外的其他参数按升序排列，得：\" class=\"headerlink\" title=\"(1) 将除sign外的其他参数按升序排列，得：\"></a>(1) 将除sign外的其他参数按升序排列，得：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actionKey=appkey&amp;aid=7725070&amp;appkey=27eb53fc9058f8c3&amp;build=4070&amp;device=phone&amp;from=1&amp;mobi_app=iphone&amp;platform=ios&amp;ts=1482977603</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-将步骤1的结果与secretKey进行拼接\"><a href=\"#2-将步骤1的结果与secretKey进行拼接\" class=\"headerlink\" title=\"(2) 将步骤1的结果与secretKey进行拼接\"></a>(2) 将步骤1的结果与secretKey进行拼接</h4><p>   secretKey的取值（根据appKey来获取）： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;27eb53fc9058f8c3&quot;:&quot;c2ed53a74eeefe3cf99fbd01d8c9c375&quot;,</span><br><span class=\"line\">&quot;q7R5WBWXdV1T5DO6&quot;:&quot;HxibjZZ04WxYn6xVS1q0pIZvxf8b2fOa&quot;&#125;</span><br></pre></td></tr></table></figure>\n<p>   这里secretKey的值是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c2ed53a74eeefe3cf99fbd01d8c9c375</span><br></pre></td></tr></table></figure>\n<p>   得到结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actionKey=appkey&amp;aid=7725070&amp;appkey=27eb53fc9058f8c3&amp;build=4070&amp;device=phone&amp;from=1&amp;mobi_app=iphone&amp;platform=ios&amp;ts=1482977603c2ed53a74eeefe3cf99fbd01d8c9c375</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-计算步骤2中得到的字符串的md5，得到\"><a href=\"#3-计算步骤2中得到的字符串的md5，得到\" class=\"headerlink\" title=\"(3) 计算步骤2中得到的字符串的md5，得到\"></a>(3) 计算步骤2中得到的字符串的md5，得到</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3fa3c3fa6557094b5680066009b41897</span><br></pre></td></tr></table></figure>\n<p>这个值就是sign</p>\n<p>经过上面的步骤，我们可以得到获取视频信息的URL，通过GET请求进行访问，会返回json格式的视频信息</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"code\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">\"data\"</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">\"aid\"</span>:<span class=\"number\">7725070</span>,</span><br><span class=\"line\">        <span class=\"string\">\"tid\"</span>:<span class=\"number\">20</span>,</span><br><span class=\"line\">        <span class=\"string\">\"tname\"</span>:<span class=\"string\">\"宅舞\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"copyright\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">\"pic\"</span>:<span class=\"string\">\"http://i1.hdslb.com/bfs/archive/e0ccafafc5ad49cea65818dcf512858cea00ed88.jpg\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>:<span class=\"string\">\"【黒kuromi】[963] - [ 梦与叶樱❤ ] - [fgo冲田总司cos\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"pubdate\"</span>:<span class=\"number\">1482839192</span>,</span><br><span class=\"line\">        <span class=\"string\">\"ctime\"</span>:<span class=\"number\">1482839192</span>,</span><br><span class=\"line\">        <span class=\"string\">\"desc\"</span>:<span class=\"string\">\"自制 翻跳 原振付，音源:sm16595856 dancer: @黒kuromi 摄影感谢:@飘雪幻幻 后期感谢:@怕怕papa ------------------------------------------------- 最近开始玩fgo~身为一个非酋真的很想抽5星呜呜！！ 樱saber太好看ww~~选了冲田总司这套跳了这个比较合适的舞xdd 希望大家看得开心&amp;gt;&amp;lt;~~感谢观看~~\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"state\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"string\">\"attribute\"</span>:<span class=\"number\">1622016</span>,</span><br><span class=\"line\">        <span class=\"string\">\"duration\"</span>:<span class=\"number\">493</span>,</span><br><span class=\"line\">        <span class=\"string\">\"tags\"</span>:[],</span><br><span class=\"line\">        <span class=\"string\">\"rights\"</span>:&#123;</span><br><span class=\"line\">            <span class=\"string\">\"bp\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">\"elec\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"string\">\"download\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"string\">\"movie\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pay\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">\"hd5\"</span>:<span class=\"number\">0</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"owner\"</span>:&#123;</span><br><span class=\"line\">            <span class=\"string\">\"mid\"</span>:<span class=\"number\">427657</span>,</span><br><span class=\"line\">            <span class=\"string\">\"name\"</span>:<span class=\"string\">\"黒クロミ\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"face\"</span>:<span class=\"string\">\"http://i2.hdslb.com/bfs/face/8ec946923ce70e990cf1b05dc3cb14bda6c0d0e0.jpg\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"stat\"</span>:&#123;</span><br><span class=\"line\">            <span class=\"string\">\"view\"</span>:<span class=\"number\">170984</span>,</span><br><span class=\"line\">            <span class=\"string\">\"danmaku\"</span>:<span class=\"number\">874</span>,</span><br><span class=\"line\">            <span class=\"string\">\"reply\"</span>:<span class=\"number\">387</span>,</span><br><span class=\"line\">            <span class=\"string\">\"favorite\"</span>:<span class=\"number\">5513</span>,</span><br><span class=\"line\">            <span class=\"string\">\"coin\"</span>:<span class=\"number\">3277</span>,</span><br><span class=\"line\">            <span class=\"string\">\"share\"</span>:<span class=\"number\">183</span>,</span><br><span class=\"line\">            <span class=\"string\">\"now_rank\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">\"his_rank\"</span>:<span class=\"number\">0</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"pages\"</span>:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"cid\"</span>:<span class=\"number\">12662538</span>,</span><br><span class=\"line\">                <span class=\"string\">\"page\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"string\">\"from\"</span>:<span class=\"string\">\"vupload\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"link\"</span>:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"has_alias\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"string\">\"weblink\"</span>:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"part\"</span>:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"rich_vid\"</span>:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"vid\"</span>:<span class=\"string\">\"vupload_12662538\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">\"owner_ext\"</span>:&#123;&#125;,</span><br><span class=\"line\">        <span class=\"string\">\"req_user\"</span>:&#123;&#125;,</span><br><span class=\"line\">        <span class=\"string\">\"online\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"string\">\"tag\"</span>:[],</span><br><span class=\"line\">        <span class=\"string\">\"relates\"</span>:[]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"message\"</span>:<span class=\"string\">\"\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于过于冗杂，这里只截取了一部分。<br>其中对于视频下载真正有用的是data下面的pages的值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"pages\"</span>:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"cid\"</span>:<span class=\"number\">12662538</span>,</span><br><span class=\"line\">            <span class=\"string\">\"page\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"string\">\"from\"</span>:<span class=\"string\">\"vupload\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"link\"</span>:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"has_alias\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">\"weblink\"</span>:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"part\"</span>:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"rich_vid\"</span>:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"vid\"</span>:<span class=\"string\">\"vupload_12662538\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看得出来这是一个<strong>列表</strong>，其实b站的CDN上面，一个较长的视频是由几个较短的视频拼接而成，还有另外一种情况就是b站视频的<strong>分P</strong>，都会使得同一个视频下面存储多个小的视频，pages就是这些小视频的列表，这些视频需要分别获得<strong>下载地址</strong>,我们关注的参数是每一个子视频的<strong>cid</strong>。</p>\n<h3 id=\"获取视频的下载地址\"><a href=\"#获取视频的下载地址\" class=\"headerlink\" title=\"获取视频的下载地址\"></a>获取视频的下载地址</h3><p>下面的链接同样是通过抓取HTTP请求获得：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://interface.bilibili.com/playurl?device=phone&amp;otype=json&amp;buvid=3168fe38e580b16a02c2cc9beceaf6b7&amp;cid=12662538&amp;appkey=YvirImLGlLANCLvM&amp;platform=iphone&amp;build=4070&amp;quality=2&amp;sign=ae1954356fbd510073f636d9ca2d36e7</span><br></pre></td></tr></table></figure>\n<p>和上一步一样，对请求参数进行分析：</p>\n<ul>\n<li>device=phone 固定 </li>\n<li>otype=json 固定</li>\n<li>buvid=3168fe38e580b16a02c2cc9beceaf6b7 固定 </li>\n<li>cid=12662538 视频的cid </li>\n<li>appkey=YvirImLGlLANCLvM 计算方法下面会介绍，但是这个参数其实可以直接固定下来。 </li>\n<li>platform=iphone固定 </li>\n<li>build=4070固定 </li>\n<li>quality=2固定</li>\n<li>sign=ae1954356fbd510073f636d9ca2d36e7 这个值同第二步获取视频信息的sign一样需要计算</li>\n</ul>\n<p>appKey的计算方式，下面是object-c代码,十分简单易懂，所以直接贴上来</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">check_tv_box</span><span class=\"params\">(<span class=\"built_in\">string</span> key, <span class=\"keyword\">int</span> addsum)</span> </span>&#123; </span><br><span class=\"line\">  \t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* sz = key.c_str(); </span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = key.length(); </span><br><span class=\"line\">    <span class=\"keyword\">int</span> add = addsum;</span><br><span class=\"line\">    <span class=\"comment\">// unsigned char out[17] = &#123;0&#125;;</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* out = <span class=\"keyword\">new</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>[len + <span class=\"number\">1</span>]; </span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(out, <span class=\"number\">0</span>, (len + <span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)); </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; </span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> ch = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)sz[i]; </span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = ch + add; </span><br><span class=\"line\">        num = (num - <span class=\"number\">65</span>) % <span class=\"number\">57</span> + <span class=\"number\">65</span>; </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">90</span> &lt; num &amp;&amp; <span class=\"number\">97</span> &gt; num) &#123;</span><br><span class=\"line\">            add = (index * add) + add; index ++;</span><br><span class=\"line\">            num = ch + add; num = (num - <span class=\"number\">65</span>) % <span class=\"number\">57</span> + <span class=\"number\">65</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    out[i] = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> outString = (<span class=\"keyword\">char</span>*)out; <span class=\"keyword\">delete</span> [] out; <span class=\"keyword\">return</span> outString;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">string</span> sz = <span class=\"string\">\"VsfoFjIDZshujsdt\"</span>; </span><br><span class=\"line\"><span class=\"keyword\">int</span> add = <span class=\"number\">3</span>; </span><br><span class=\"line\"><span class=\"built_in\">string</span> out1 = check_tv_box(sz, add);</span><br></pre></td></tr></table></figure>\n<p>appKey的初始字符串为”VsfoFjIDZshujsdt”，累加子为3，返回的out1就是加密后的字符串，即appKey的值，这里是YvirImLGlLANCLvM</p>\n<p>sign的计算方式也会用到上面的check_tv_box()函数，下面是计算sign的步骤：</p>\n<h4 id=\"1-计算用于拼接的字符串，代码如下：\"><a href=\"#1-计算用于拼接的字符串，代码如下：\" class=\"headerlink\" title=\"(1) 计算用于拼接的字符串，代码如下：\"></a>(1) 计算用于拼接的字符串，代码如下：</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> sz2 = <span class=\"string\">\"zEcQEUTunrHlLvYiGXyefkmJPmDQEtow\"</span>; </span><br><span class=\"line\">add = <span class=\"number\">9</span>; </span><br><span class=\"line\"><span class=\"built_in\">string</span> out2 = check_tv_box(sz2, add);</span><br></pre></td></tr></table></figure>\n<p>算法与计算appKey的算法相同，但是初始字符串为”zEcQEUTunrHlLvYiGXyefkmJPmDQEtow”，累加子为9.得到结果：JNlZNgfNGKZEpaDTkCdPQVXntXhuiJEM</p>\n<p>注意：这个结果固定，可以直接用这个值</p>\n<h4 id=\"2-将其他所有参数排序\"><a href=\"#2-将其他所有参数排序\" class=\"headerlink\" title=\"(2) 将其他所有参数排序\"></a>(2) 将其他所有参数排序</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appkey=YvirImLGlLANCLvM&amp;build=4070&amp;buvid=3168fe38e580b16a02c2cc9beceaf6b7&amp;cid=12662538&amp;device=phone&amp;otype=json&amp;platform=iphone&amp;quality=2</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-在参数最后拼接步骤1的结果：\"><a href=\"#3-在参数最后拼接步骤1的结果：\" class=\"headerlink\" title=\"(3) 在参数最后拼接步骤1的结果：\"></a>(3) 在参数最后拼接步骤1的结果：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appkey=YvirImLGlLANCLvM&amp;build=4070&amp;buvid=3168fe38e580b16a02c2cc9beceaf6b7&amp;cid=12662538&amp;device=phone&amp;otype=json&amp;platform=iphone&amp;quality=2JNlZNgfNGKZEpaDTkCdPQVXntXhuiJEM</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-计算步骤3结果的md5，得：\"><a href=\"#4-计算步骤3结果的md5，得：\" class=\"headerlink\" title=\"(4) 计算步骤3结果的md5，得：\"></a>(4) 计算步骤3结果的md5，得：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ae1954356fbd510073f636d9ca2d36e7</span><br></pre></td></tr></table></figure>\n<p>计算出了appKey和sign的值，就可以拼接出获取视频下载地址的URL了。<br>发送请求可以得到返回的json信息：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"from\"</span>:<span class=\"string\">\"local\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"result\"</span>:<span class=\"string\">\"suee\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"format\"</span>:<span class=\"string\">\"hdmp4\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"timelength\"</span>:<span class=\"number\">493546</span>,</span><br><span class=\"line\">    <span class=\"string\">\"accept_format\"</span>:<span class=\"string\">\"mp4,hdmp4,flv\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"accept_quality\"</span>:[</span><br><span class=\"line\">        <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"seek_param\"</span>:<span class=\"string\">\"start\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"seek_type\"</span>:<span class=\"string\">\"second\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"durl\"</span>:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"order\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"string\">\"length\"</span>:<span class=\"number\">493546</span>,</span><br><span class=\"line\">            <span class=\"string\">\"size\"</span>:<span class=\"number\">72091760</span>,</span><br><span class=\"line\">            <span class=\"string\">\"url\"</span>:<span class=\"string\">\" http://ws.acgvideo.com/a/2d/12662538-1-hd.mp4?wsTime=1482992010&amp;wsSecret2=de4372d19062d035396dd2625976ca1a&amp;oi=3664534074&amp;rate=2000\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中durl下面的url参数就是视频下载地址了。</p>\n<h3 id=\"写了一个月的第一篇-。-终于写完了\"><a href=\"#写了一个月的第一篇-。-终于写完了\" class=\"headerlink\" title=\"写了一个月的第一篇=。=终于写完了\"></a>写了一个月的第一篇=。=终于写完了</h3><p>其实工作中碰到过很多app需要抓取信息，但是狠下心来写一篇总结的就只有b站23333</p>\n<p>终于是写完了=。=</p>\n<p>下一篇依然遥遥无期。。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"获取BiliBili视频下载地址\"><a href=\"#获取BiliBili视频下载地址\" class=\"headerlink\" title=\"获取BiliBili视频下载地址\"></a>获取BiliBili视频下载地址</h2><p>最近在写Bilibili App的爬虫，由于bilibili是一个视频站，写爬虫很重要的一个环节就是怎样获取到视频的<strong>下载地址</strong>，所以我把如何获取B站视频下载地址做了一个简单的整理。</p>\n<h3 id=\"获取需要下载视频的av号\"><a href=\"#获取需要下载视频的av号\" class=\"headerlink\" title=\"获取需要下载视频的av号\"></a>获取需要下载视频的av号</h3><p>一个常见的B站视频的链接如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.bilibili.com/video/av1608918/</span><br></pre></td></tr></table></figure>\n<p>拿到av后面的数字，称为<strong>param</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">param = &apos;1608918&apos;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取视频信息\"><a href=\"#获取视频信息\" class=\"headerlink\" title=\"获取视频信息\"></a>获取视频信息</h3><p>通过抓取B站app发送的HTTP请求，可以知道获取一个视频信息的URL如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://app.bilibili.com/x/v2/view?actionKey=appkey&amp;aid=7725070&amp;appkey=27eb53fc9058f8c3&amp;build=4070&amp;device=phone&amp;from=1&amp;mobi_app=iphone&amp;platform=ios&amp;sign=3fa3c3fa6557094b5680066009b41897&amp;ts=1482977603</span><br></pre></td></tr></table></figure>\n<p>这个URL参数很多，接下来一一作解释。</p>\n<ul>\n<li>actionKey=appkey </li>\n<li>aid=7725070 param的值 </li>\n<li>appkey=27eb53fc9058f8c3 固定 </li>\n<li>build=4070&amp;device=phone&amp;from=1&amp;mobi_app=iphone&amp;platform=ios 固定 </li>\n<li>sign=3fa3c3fa6557094b5680066009b41897 </li>\n<li>ts=1482977603 时间戳</li>\n</ul>\n<p>需要我们其他参数都是现成可以获取到的，而<strong>sign</strong>这个参数是我们需要自己计算得到的，计算方法如下：</p>\n<h4 id=\"1-将除sign外的其他参数按升序排列，得：\"><a href=\"#1-将除sign外的其他参数按升序排列，得：\" class=\"headerlink\" title=\"(1) 将除sign外的其他参数按升序排列，得：\"></a>(1) 将除sign外的其他参数按升序排列，得：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actionKey=appkey&amp;aid=7725070&amp;appkey=27eb53fc9058f8c3&amp;build=4070&amp;device=phone&amp;from=1&amp;mobi_app=iphone&amp;platform=ios&amp;ts=1482977603</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-将步骤1的结果与secretKey进行拼接\"><a href=\"#2-将步骤1的结果与secretKey进行拼接\" class=\"headerlink\" title=\"(2) 将步骤1的结果与secretKey进行拼接\"></a>(2) 将步骤1的结果与secretKey进行拼接</h4><p>   secretKey的取值（根据appKey来获取）： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;27eb53fc9058f8c3&quot;:&quot;c2ed53a74eeefe3cf99fbd01d8c9c375&quot;,</span><br><span class=\"line\">&quot;q7R5WBWXdV1T5DO6&quot;:&quot;HxibjZZ04WxYn6xVS1q0pIZvxf8b2fOa&quot;&#125;</span><br></pre></td></tr></table></figure>\n<p>   这里secretKey的值是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c2ed53a74eeefe3cf99fbd01d8c9c375</span><br></pre></td></tr></table></figure>\n<p>   得到结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actionKey=appkey&amp;aid=7725070&amp;appkey=27eb53fc9058f8c3&amp;build=4070&amp;device=phone&amp;from=1&amp;mobi_app=iphone&amp;platform=ios&amp;ts=1482977603c2ed53a74eeefe3cf99fbd01d8c9c375</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-计算步骤2中得到的字符串的md5，得到\"><a href=\"#3-计算步骤2中得到的字符串的md5，得到\" class=\"headerlink\" title=\"(3) 计算步骤2中得到的字符串的md5，得到\"></a>(3) 计算步骤2中得到的字符串的md5，得到</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3fa3c3fa6557094b5680066009b41897</span><br></pre></td></tr></table></figure>\n<p>这个值就是sign</p>\n<p>经过上面的步骤，我们可以得到获取视频信息的URL，通过GET请求进行访问，会返回json格式的视频信息</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"code\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">\"data\"</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">\"aid\"</span>:<span class=\"number\">7725070</span>,</span><br><span class=\"line\">        <span class=\"string\">\"tid\"</span>:<span class=\"number\">20</span>,</span><br><span class=\"line\">        <span class=\"string\">\"tname\"</span>:<span class=\"string\">\"宅舞\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"copyright\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">\"pic\"</span>:<span class=\"string\">\"http://i1.hdslb.com/bfs/archive/e0ccafafc5ad49cea65818dcf512858cea00ed88.jpg\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>:<span class=\"string\">\"【黒kuromi】[963] - [ 梦与叶樱❤ ] - [fgo冲田总司cos\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"pubdate\"</span>:<span class=\"number\">1482839192</span>,</span><br><span class=\"line\">        <span class=\"string\">\"ctime\"</span>:<span class=\"number\">1482839192</span>,</span><br><span class=\"line\">        <span class=\"string\">\"desc\"</span>:<span class=\"string\">\"自制 翻跳 原振付，音源:sm16595856 dancer: @黒kuromi 摄影感谢:@飘雪幻幻 后期感谢:@怕怕papa ------------------------------------------------- 最近开始玩fgo~身为一个非酋真的很想抽5星呜呜！！ 樱saber太好看ww~~选了冲田总司这套跳了这个比较合适的舞xdd 希望大家看得开心&amp;gt;&amp;lt;~~感谢观看~~\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"state\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"string\">\"attribute\"</span>:<span class=\"number\">1622016</span>,</span><br><span class=\"line\">        <span class=\"string\">\"duration\"</span>:<span class=\"number\">493</span>,</span><br><span class=\"line\">        <span class=\"string\">\"tags\"</span>:[],</span><br><span class=\"line\">        <span class=\"string\">\"rights\"</span>:&#123;</span><br><span class=\"line\">            <span class=\"string\">\"bp\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">\"elec\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"string\">\"download\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"string\">\"movie\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pay\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">\"hd5\"</span>:<span class=\"number\">0</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"owner\"</span>:&#123;</span><br><span class=\"line\">            <span class=\"string\">\"mid\"</span>:<span class=\"number\">427657</span>,</span><br><span class=\"line\">            <span class=\"string\">\"name\"</span>:<span class=\"string\">\"黒クロミ\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"face\"</span>:<span class=\"string\">\"http://i2.hdslb.com/bfs/face/8ec946923ce70e990cf1b05dc3cb14bda6c0d0e0.jpg\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"stat\"</span>:&#123;</span><br><span class=\"line\">            <span class=\"string\">\"view\"</span>:<span class=\"number\">170984</span>,</span><br><span class=\"line\">            <span class=\"string\">\"danmaku\"</span>:<span class=\"number\">874</span>,</span><br><span class=\"line\">            <span class=\"string\">\"reply\"</span>:<span class=\"number\">387</span>,</span><br><span class=\"line\">            <span class=\"string\">\"favorite\"</span>:<span class=\"number\">5513</span>,</span><br><span class=\"line\">            <span class=\"string\">\"coin\"</span>:<span class=\"number\">3277</span>,</span><br><span class=\"line\">            <span class=\"string\">\"share\"</span>:<span class=\"number\">183</span>,</span><br><span class=\"line\">            <span class=\"string\">\"now_rank\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">\"his_rank\"</span>:<span class=\"number\">0</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"pages\"</span>:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"cid\"</span>:<span class=\"number\">12662538</span>,</span><br><span class=\"line\">                <span class=\"string\">\"page\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"string\">\"from\"</span>:<span class=\"string\">\"vupload\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"link\"</span>:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"has_alias\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"string\">\"weblink\"</span>:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"part\"</span>:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"rich_vid\"</span>:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"vid\"</span>:<span class=\"string\">\"vupload_12662538\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">\"owner_ext\"</span>:&#123;&#125;,</span><br><span class=\"line\">        <span class=\"string\">\"req_user\"</span>:&#123;&#125;,</span><br><span class=\"line\">        <span class=\"string\">\"online\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"string\">\"tag\"</span>:[],</span><br><span class=\"line\">        <span class=\"string\">\"relates\"</span>:[]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"message\"</span>:<span class=\"string\">\"\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于过于冗杂，这里只截取了一部分。<br>其中对于视频下载真正有用的是data下面的pages的值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"pages\"</span>:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"cid\"</span>:<span class=\"number\">12662538</span>,</span><br><span class=\"line\">            <span class=\"string\">\"page\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"string\">\"from\"</span>:<span class=\"string\">\"vupload\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"link\"</span>:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"has_alias\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">\"weblink\"</span>:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"part\"</span>:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"rich_vid\"</span>:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"vid\"</span>:<span class=\"string\">\"vupload_12662538\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看得出来这是一个<strong>列表</strong>，其实b站的CDN上面，一个较长的视频是由几个较短的视频拼接而成，还有另外一种情况就是b站视频的<strong>分P</strong>，都会使得同一个视频下面存储多个小的视频，pages就是这些小视频的列表，这些视频需要分别获得<strong>下载地址</strong>,我们关注的参数是每一个子视频的<strong>cid</strong>。</p>\n<h3 id=\"获取视频的下载地址\"><a href=\"#获取视频的下载地址\" class=\"headerlink\" title=\"获取视频的下载地址\"></a>获取视频的下载地址</h3><p>下面的链接同样是通过抓取HTTP请求获得：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://interface.bilibili.com/playurl?device=phone&amp;otype=json&amp;buvid=3168fe38e580b16a02c2cc9beceaf6b7&amp;cid=12662538&amp;appkey=YvirImLGlLANCLvM&amp;platform=iphone&amp;build=4070&amp;quality=2&amp;sign=ae1954356fbd510073f636d9ca2d36e7</span><br></pre></td></tr></table></figure>\n<p>和上一步一样，对请求参数进行分析：</p>\n<ul>\n<li>device=phone 固定 </li>\n<li>otype=json 固定</li>\n<li>buvid=3168fe38e580b16a02c2cc9beceaf6b7 固定 </li>\n<li>cid=12662538 视频的cid </li>\n<li>appkey=YvirImLGlLANCLvM 计算方法下面会介绍，但是这个参数其实可以直接固定下来。 </li>\n<li>platform=iphone固定 </li>\n<li>build=4070固定 </li>\n<li>quality=2固定</li>\n<li>sign=ae1954356fbd510073f636d9ca2d36e7 这个值同第二步获取视频信息的sign一样需要计算</li>\n</ul>\n<p>appKey的计算方式，下面是object-c代码,十分简单易懂，所以直接贴上来</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">check_tv_box</span><span class=\"params\">(<span class=\"built_in\">string</span> key, <span class=\"keyword\">int</span> addsum)</span> </span>&#123; </span><br><span class=\"line\">  \t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* sz = key.c_str(); </span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = key.length(); </span><br><span class=\"line\">    <span class=\"keyword\">int</span> add = addsum;</span><br><span class=\"line\">    <span class=\"comment\">// unsigned char out[17] = &#123;0&#125;;</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* out = <span class=\"keyword\">new</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>[len + <span class=\"number\">1</span>]; </span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(out, <span class=\"number\">0</span>, (len + <span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)); </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; </span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> ch = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)sz[i]; </span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = ch + add; </span><br><span class=\"line\">        num = (num - <span class=\"number\">65</span>) % <span class=\"number\">57</span> + <span class=\"number\">65</span>; </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">90</span> &lt; num &amp;&amp; <span class=\"number\">97</span> &gt; num) &#123;</span><br><span class=\"line\">            add = (index * add) + add; index ++;</span><br><span class=\"line\">            num = ch + add; num = (num - <span class=\"number\">65</span>) % <span class=\"number\">57</span> + <span class=\"number\">65</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    out[i] = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> outString = (<span class=\"keyword\">char</span>*)out; <span class=\"keyword\">delete</span> [] out; <span class=\"keyword\">return</span> outString;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">string</span> sz = <span class=\"string\">\"VsfoFjIDZshujsdt\"</span>; </span><br><span class=\"line\"><span class=\"keyword\">int</span> add = <span class=\"number\">3</span>; </span><br><span class=\"line\"><span class=\"built_in\">string</span> out1 = check_tv_box(sz, add);</span><br></pre></td></tr></table></figure>\n<p>appKey的初始字符串为”VsfoFjIDZshujsdt”，累加子为3，返回的out1就是加密后的字符串，即appKey的值，这里是YvirImLGlLANCLvM</p>\n<p>sign的计算方式也会用到上面的check_tv_box()函数，下面是计算sign的步骤：</p>\n<h4 id=\"1-计算用于拼接的字符串，代码如下：\"><a href=\"#1-计算用于拼接的字符串，代码如下：\" class=\"headerlink\" title=\"(1) 计算用于拼接的字符串，代码如下：\"></a>(1) 计算用于拼接的字符串，代码如下：</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> sz2 = <span class=\"string\">\"zEcQEUTunrHlLvYiGXyefkmJPmDQEtow\"</span>; </span><br><span class=\"line\">add = <span class=\"number\">9</span>; </span><br><span class=\"line\"><span class=\"built_in\">string</span> out2 = check_tv_box(sz2, add);</span><br></pre></td></tr></table></figure>\n<p>算法与计算appKey的算法相同，但是初始字符串为”zEcQEUTunrHlLvYiGXyefkmJPmDQEtow”，累加子为9.得到结果：JNlZNgfNGKZEpaDTkCdPQVXntXhuiJEM</p>\n<p>注意：这个结果固定，可以直接用这个值</p>\n<h4 id=\"2-将其他所有参数排序\"><a href=\"#2-将其他所有参数排序\" class=\"headerlink\" title=\"(2) 将其他所有参数排序\"></a>(2) 将其他所有参数排序</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appkey=YvirImLGlLANCLvM&amp;build=4070&amp;buvid=3168fe38e580b16a02c2cc9beceaf6b7&amp;cid=12662538&amp;device=phone&amp;otype=json&amp;platform=iphone&amp;quality=2</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-在参数最后拼接步骤1的结果：\"><a href=\"#3-在参数最后拼接步骤1的结果：\" class=\"headerlink\" title=\"(3) 在参数最后拼接步骤1的结果：\"></a>(3) 在参数最后拼接步骤1的结果：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appkey=YvirImLGlLANCLvM&amp;build=4070&amp;buvid=3168fe38e580b16a02c2cc9beceaf6b7&amp;cid=12662538&amp;device=phone&amp;otype=json&amp;platform=iphone&amp;quality=2JNlZNgfNGKZEpaDTkCdPQVXntXhuiJEM</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-计算步骤3结果的md5，得：\"><a href=\"#4-计算步骤3结果的md5，得：\" class=\"headerlink\" title=\"(4) 计算步骤3结果的md5，得：\"></a>(4) 计算步骤3结果的md5，得：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ae1954356fbd510073f636d9ca2d36e7</span><br></pre></td></tr></table></figure>\n<p>计算出了appKey和sign的值，就可以拼接出获取视频下载地址的URL了。<br>发送请求可以得到返回的json信息：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"from\"</span>:<span class=\"string\">\"local\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"result\"</span>:<span class=\"string\">\"suee\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"format\"</span>:<span class=\"string\">\"hdmp4\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"timelength\"</span>:<span class=\"number\">493546</span>,</span><br><span class=\"line\">    <span class=\"string\">\"accept_format\"</span>:<span class=\"string\">\"mp4,hdmp4,flv\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"accept_quality\"</span>:[</span><br><span class=\"line\">        <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"seek_param\"</span>:<span class=\"string\">\"start\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"seek_type\"</span>:<span class=\"string\">\"second\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"durl\"</span>:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"order\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"string\">\"length\"</span>:<span class=\"number\">493546</span>,</span><br><span class=\"line\">            <span class=\"string\">\"size\"</span>:<span class=\"number\">72091760</span>,</span><br><span class=\"line\">            <span class=\"string\">\"url\"</span>:<span class=\"string\">\" http://ws.acgvideo.com/a/2d/12662538-1-hd.mp4?wsTime=1482992010&amp;wsSecret2=de4372d19062d035396dd2625976ca1a&amp;oi=3664534074&amp;rate=2000\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中durl下面的url参数就是视频下载地址了。</p>\n<h3 id=\"写了一个月的第一篇-。-终于写完了\"><a href=\"#写了一个月的第一篇-。-终于写完了\" class=\"headerlink\" title=\"写了一个月的第一篇=。=终于写完了\"></a>写了一个月的第一篇=。=终于写完了</h3><p>其实工作中碰到过很多app需要抓取信息，但是狠下心来写一篇总结的就只有b站23333</p>\n<p>终于是写完了=。=</p>\n<p>下一篇依然遥遥无期。。。。</p>\n"},{"title":"fluent python 第十四章 可迭代对象，迭代器和生成器","date":"2018-09-20T10:00:00.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true"],"toc":true,"comment":true,"_content":"\n## Fluent Python \n### Chapter 14. Iterables, Iterators, and GeneratorsOperator\n### 第十四章: 可迭代对象，迭代器和生成器\n\n迭代是数据处理的基石。扫面内存中放不下的数据集时， 我们需要找到一种惰性获取数据的方式，即按需每次获取一个数据项。这就是迭代器模式(Iterator Pattern).\n下面会说明Python语言是如何内置迭代器模式的。\n\n> 所有生成器都是迭代器，因为生成器完全实现了迭代器接口。不过，根据《设计模式：可复用面向对象软件的基础》一书的定义，迭代器用于从集合中取出元素；而生成器用于“凭空”生成元素。通过斐波纳契数列能很好地说明二者之间的区别：斐波纳契数列中的数有无穷个，在一个集合里放不下。不过要知道，在 Python 社区中，**大多数时候都把迭代器和生成器视作同一概念**。\n\nPython3 中， 生成器有广泛的用途， 例如range() 在Python2中返回列表， 在3中返回一个类似生成器的对象。\n\n在Python语言内部， 迭代器用于支持:  \n- for循环\n- 构建和扩展集合类型\n- 逐行遍历文本文件\n- 列表推导， 字典推导和集合推导\n- 元组拆包\n- 调用函数时使用\\*拆包实参\n\n本章将讨论：\n- 语言内部使用iter()内置函数处理可迭代对象的方式\n- 如何使用Python实现经典的迭代器模式\n- 说明生成器函数的工作原理\n- 如何使用生成器函数或生成器表达式代替经典的迭代器\n- 如何使用标准库中通用的生成器函数\n- 如何使用yeild from 语句合并生成器\n- 为什么生成器和协程看似相同实则差别很大， 不能混淆\n\n#### 14.1 从序列开始\n\n我们首先实现一个Sentence类， 通过索引从文本提取单词。\n\n```python\nimport re\nimport reprlib\n    RE_WORD = re.compile('\\w+')\n    class Sentence:\n        def __init__(self, text):\n            self.text = text\n            self.words = RE_WORD.findall(text)\n        def __getitem__(self, index):\n            return self.words[index]\n        def __len__(self):\n            return len(self.words)\n        def __repr__(self):\n            return 'Sentence(%s)' % reprlib.repr(self.text)\n```\n\n序列可以迭代的原因：iter函数。解释器需要迭代对象 x 时，会自动调用 iter(x)。\n内置的 iter 函数有以下作用。\n(1) 检查对象是否实现了 \\_\\_iter\\_\\_ 方法，如果实现了就调用它，获取一个迭代器。\n(2) 如果没有实现 \\_\\_iter\\_\\_ 方法，但是实现了 \\_\\_getitem\\_\\_ 方法，Python 会创建一个迭代器，尝试按顺序（从索引 0 开始）获取元素。\n(3) 如果尝试失败，Python 抛出 TypeError 异常，通常会提示“C object is not iterable”（C对象不可迭代），其中 C 是目标对象所属的类。\n任何 Python 序列都可迭代的原因是，它们都实现了 \\_\\_getitem\\_\\_ 方法。其实，标准的序列也都实现了 \\_\\_iter\\_\\_ 方法\n\n#### 14.2 可迭代对象和迭代器\n\n上面一小节我们可以看到迭代器的定义：\n> 使用 iter 内置函数可以获取迭代器的对象。如果对象实现了能返回迭代器的\\_\\_iter\\_\\_ 方法，那么对象就是可迭代的。  \n> 序列都可以迭代；实现\\_\\_getitem\\_\\_ 方法，而且其参数是从零开始的索引，这种对象也可以迭代。  \n> 我们要明确可迭代的对象和迭代器之间的关系：Python 从可迭代的对象中获取迭代器。\n\n下面给出一个简单的例子，使用while循环模拟for循环中的迭代器：\n\n```python\n# for 实现\ns = 'ABC'\nfor char in s:\n    print(char)\n\n# while 实现\ns = 'ABC'\nit = iter(s) \nwhile True:\n    try:\n        print(next(it)) \n    except StopIteration: \n        del it \n    break \n```\n\n标准的迭代器接口有两个方法。\n- \\_\\_next\\_\\_   \n    返回下一个可用的元素，如果没有元素了，抛出 StopIteration 异常。\n- \\_\\_iter\\_\\_   \n    返回 self，以便在应该使用可迭代对象的地方使用迭代器，例如在 for 循环中。\n    \n这个接口在 collections.abc.Iterator 抽象基类中制定。这个类定义了 \\_\\_next\\_\\_ 抽象方法，而且继承自 Iterable 类；\\_\\_iter\\_\\_ 抽象方法则在 Iterable 类中定义。\n\n因为迭代器只有\\_\\_next\\_\\_ 和\\_\\_iter\\_\\_方法，所以迭代器没办法检查遗漏的元素和‘还原’迭代器， 如果想再次迭代， 还是需要传入被迭代的对象。由于Iterator.\\_\\_init\\_\\_是返回实例本身，传入迭代器无法还原已经迭代过的元素。\n\n#### 14.3 典型的迭代器\n\n这一节会将迭代器和可迭代对象分离开来，让我们更加清楚迭代器和可迭代对象的关系\n\n```python\nimport re\nimport reprlib\nRE_WORD = re.compile('\\w+')\n\nclass Sentence:\n    def __init__(self, text):\n        self.text = text\n        self.words = RE_WORD.findall(text)\n    def __repr__(self):\n        return 'Sentence(%s)' % reprlib.repr(self.text)\n    def __iter__(self):\n        return SentenceIterator(self.words)\n\n\nclass SentenceIterator:\n    def __init__(self, words):\n        self.words = words\n        self.index = 0\n    def __next__(self):\n        try:\n            word = self.words[self.index]\n        except IndexError:\n            raise StopIteration()\n        self.index += 1\n        return word\n    def __iter__(self):\n        return self\n```\n\n如果在Sentence中实现\\_\\_next\\_\\_方法， 可以让Sentence同时成为可迭代对象和迭代器。但是这是一个相当糟糕的设计。**可迭代的对象一定不能是自身的迭代器**\n\n> 迭代器模式中指明， 迭代器应该有以下特点：\n> 1. 访问一个聚合对象的内容而无需暴露它的内部表示\n> 2. 支持对聚合对象的多种遍历(每次调用iter()都新建一个独立的迭代器)\n> 3. 为遍历不同的聚合结构提供统一的接口\n\n#### 14.4 生成器函数\n\nPython中实现上一节相同功能的方式是使用生成器函数代替额外实现的迭代器。\n\n```python\nimport re\nimport reprlib\nRE_WORD = re.compile('\\w+')\nclass Sentence:\n    def __init__(self, text):\n        self.text = text\n        self.words = RE_WORD.findall(text)\n    def __repr__(self):\n        return 'Sentence(%s)' % reprlib.repr(self.text)\n    def __iter__(self):\n        for word in self.words:\n            yield word\n        return\n```\n相比起上一节的实现简单许多。\n\n> 只要 Python 函数的定义体中有 yield 关键字，该函数就是生成器函数。调用生成器函数时，会返回一个生成器对象。也就是说，生成器函数是生成器工厂。\n\n#### 14.5 生成器的惰性实现\n\nre.finditer是re.findall的惰性版本， 返回的不是一个列表而是一个生成器，这样也能节省大量内存。\n\n```python\nimport re\nimport reprlib\nRE_WORD = re.compile('\\w+')\nclass Sentence:\n    def __init__(self, text):\n        self.text = text\n    def __repr__(self):\n        return 'Sentence(%s)' % reprlib.repr(self.text)\n    def __iter__(self):\n        for match in RE_WORD.finditer(self.text):\n            yield match.group()\n```\n\n使用finditer使得Sentence的元素变得可以惰性获得了。\n\n#### 14.6 生成器表达式\n\n下面使用生成器表达式构建生成器, 会使代码更加简洁\n```python\nimport re\nimport reprlib\nRE_WORD = re.compile('\\w+')\nclass Sentence:\n    def __init__(self, text):\n        self.text = text\n    def __repr__(self):\n        return 'Sentence(%s)' % reprlib.repr(self.text)\n    def __iter__(self):\n        return (match.group() for match in RE_WORD.finditer(self.text))\n```\n\n#### 14.7 yeild from \n\n> 注: yeild from 是Python3.3中新出现的语法\n\n如果生成器函数需要产出另一个生成器生成的值，传统的解决方法是使用嵌套的 for 循\n环。  \n例如：\n\n```python\n>>> def chain(*iterables):\n...     for it in iterables:\n...         for i in it:\n...             yield i\n...\n>>> s = 'ABC'\n>>> t = tuple(range(3))\n>>> list(chain(s, t))\n['A', 'B', 'C', 0, 1, 2]\n```\n\n这个chain生成器函数吧操作依次交给各个可迭代对象处理。我们可以用下面的方法简化：\n\n```python\n>>> def chain(*iterables):\n...     for i in iterables:\n...     yield from i\n...\n>>> list(chain(s, t))\n['A', 'B', 'C', 0, 1, 2]\n```\n\n可以看出，yield from i 完全代替了内层的 for 循环， 使得代码简化很多。\n\n#### 14.8 深入分析iter()函数\n在 Python 中迭代对象 x 时会调用 iter(x), 这是上文中我们反复提到的, 这也是iter()最常见的用法。   \n\niter 函数还有一个鲜为人知的用法：传入两个参数，使用常规的函数或任何可调用的对象创建迭代器。这样使用时，第一个参数必须是可调用的对象，用于不断调用（没有参数），产出各个值；第二个值是哨符，这是个标记值，当可调用的对象返回这个值时，触发迭代器抛出 StopIteration 异常，而不产出哨符。\n\n例子：\n```python\n# 掷骰子直到掷出1点\nfrom random import randint\ndef d6():\n    return randint(1, 6)\n\nd6_iter = iter(d6, 1)\nfor roll in d6_iter:\n    print(roll)\n```\n\n#### 14.9 生成器当成协程\n\n> Python 2.5 实现了“PEP 342 — Coroutines via Enhanced Generators”（https://www.python.org/dev/peps/pep-0342/ ）。这个提案为生成器对象添加了额外的方法和功能，其中最值得关注的是 .send() 方法， 这个函数让生成器变身为**协程**。\n\n与 .\\_\\_next\\_\\_() 方法一样，.send() 方法致使生成器前进到下一个 yield 语句。不过，.send() 方法还允许使用生成器的客户把数据发给自己，即不管传给 .send() 方法什么参数，那个参数都会成为生成器函数定义体中对应的 yield 表达式的值。也就是说，.send() 方法允许在客户代码和生成器之间双向交换数据。而 .\\_\\_next\\_\\_() 方法只允许客户从生成器中获取数据。\n\n> - 生成器用于生成供迭代的数据\n> - 协程是数据的消费者\n> - 为了避免脑袋炸裂，不能把这两个概念混为一谈\n> - 协程与迭代无关\n> - 注意，虽然在协程中会使用 yield 产出值，但这与迭代无关\n>       \n>    <div align = right>——David Beazley  “A Curious Course on Coroutines and Concurrency”</div>\n\n基于这几点， 本章不讨论协程![233](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/11.png?raw=true)\n\n#### 14.9 小结\nPython 语言对迭代的支持非常深入, Python 已经融合（grok）了迭代器。Python 从语义上集成迭代器模式是个很好的例证，说明设计模式在各种编程语言中使用的方式并不相同。","source":"_posts/fluent-python-14.md","raw":"title: fluent python 第十四章 可迭代对象，迭代器和生成器\ndate: 2018-09-20 18:00:00\ntags:\n- Python\n- Iterable\n- Iterator\n- Generator\ncategories:\n- 读书笔记\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n## Fluent Python \n### Chapter 14. Iterables, Iterators, and GeneratorsOperator\n### 第十四章: 可迭代对象，迭代器和生成器\n\n迭代是数据处理的基石。扫面内存中放不下的数据集时， 我们需要找到一种惰性获取数据的方式，即按需每次获取一个数据项。这就是迭代器模式(Iterator Pattern).\n下面会说明Python语言是如何内置迭代器模式的。\n\n> 所有生成器都是迭代器，因为生成器完全实现了迭代器接口。不过，根据《设计模式：可复用面向对象软件的基础》一书的定义，迭代器用于从集合中取出元素；而生成器用于“凭空”生成元素。通过斐波纳契数列能很好地说明二者之间的区别：斐波纳契数列中的数有无穷个，在一个集合里放不下。不过要知道，在 Python 社区中，**大多数时候都把迭代器和生成器视作同一概念**。\n\nPython3 中， 生成器有广泛的用途， 例如range() 在Python2中返回列表， 在3中返回一个类似生成器的对象。\n\n在Python语言内部， 迭代器用于支持:  \n- for循环\n- 构建和扩展集合类型\n- 逐行遍历文本文件\n- 列表推导， 字典推导和集合推导\n- 元组拆包\n- 调用函数时使用\\*拆包实参\n\n本章将讨论：\n- 语言内部使用iter()内置函数处理可迭代对象的方式\n- 如何使用Python实现经典的迭代器模式\n- 说明生成器函数的工作原理\n- 如何使用生成器函数或生成器表达式代替经典的迭代器\n- 如何使用标准库中通用的生成器函数\n- 如何使用yeild from 语句合并生成器\n- 为什么生成器和协程看似相同实则差别很大， 不能混淆\n\n#### 14.1 从序列开始\n\n我们首先实现一个Sentence类， 通过索引从文本提取单词。\n\n```python\nimport re\nimport reprlib\n    RE_WORD = re.compile('\\w+')\n    class Sentence:\n        def __init__(self, text):\n            self.text = text\n            self.words = RE_WORD.findall(text)\n        def __getitem__(self, index):\n            return self.words[index]\n        def __len__(self):\n            return len(self.words)\n        def __repr__(self):\n            return 'Sentence(%s)' % reprlib.repr(self.text)\n```\n\n序列可以迭代的原因：iter函数。解释器需要迭代对象 x 时，会自动调用 iter(x)。\n内置的 iter 函数有以下作用。\n(1) 检查对象是否实现了 \\_\\_iter\\_\\_ 方法，如果实现了就调用它，获取一个迭代器。\n(2) 如果没有实现 \\_\\_iter\\_\\_ 方法，但是实现了 \\_\\_getitem\\_\\_ 方法，Python 会创建一个迭代器，尝试按顺序（从索引 0 开始）获取元素。\n(3) 如果尝试失败，Python 抛出 TypeError 异常，通常会提示“C object is not iterable”（C对象不可迭代），其中 C 是目标对象所属的类。\n任何 Python 序列都可迭代的原因是，它们都实现了 \\_\\_getitem\\_\\_ 方法。其实，标准的序列也都实现了 \\_\\_iter\\_\\_ 方法\n\n#### 14.2 可迭代对象和迭代器\n\n上面一小节我们可以看到迭代器的定义：\n> 使用 iter 内置函数可以获取迭代器的对象。如果对象实现了能返回迭代器的\\_\\_iter\\_\\_ 方法，那么对象就是可迭代的。  \n> 序列都可以迭代；实现\\_\\_getitem\\_\\_ 方法，而且其参数是从零开始的索引，这种对象也可以迭代。  \n> 我们要明确可迭代的对象和迭代器之间的关系：Python 从可迭代的对象中获取迭代器。\n\n下面给出一个简单的例子，使用while循环模拟for循环中的迭代器：\n\n```python\n# for 实现\ns = 'ABC'\nfor char in s:\n    print(char)\n\n# while 实现\ns = 'ABC'\nit = iter(s) \nwhile True:\n    try:\n        print(next(it)) \n    except StopIteration: \n        del it \n    break \n```\n\n标准的迭代器接口有两个方法。\n- \\_\\_next\\_\\_   \n    返回下一个可用的元素，如果没有元素了，抛出 StopIteration 异常。\n- \\_\\_iter\\_\\_   \n    返回 self，以便在应该使用可迭代对象的地方使用迭代器，例如在 for 循环中。\n    \n这个接口在 collections.abc.Iterator 抽象基类中制定。这个类定义了 \\_\\_next\\_\\_ 抽象方法，而且继承自 Iterable 类；\\_\\_iter\\_\\_ 抽象方法则在 Iterable 类中定义。\n\n因为迭代器只有\\_\\_next\\_\\_ 和\\_\\_iter\\_\\_方法，所以迭代器没办法检查遗漏的元素和‘还原’迭代器， 如果想再次迭代， 还是需要传入被迭代的对象。由于Iterator.\\_\\_init\\_\\_是返回实例本身，传入迭代器无法还原已经迭代过的元素。\n\n#### 14.3 典型的迭代器\n\n这一节会将迭代器和可迭代对象分离开来，让我们更加清楚迭代器和可迭代对象的关系\n\n```python\nimport re\nimport reprlib\nRE_WORD = re.compile('\\w+')\n\nclass Sentence:\n    def __init__(self, text):\n        self.text = text\n        self.words = RE_WORD.findall(text)\n    def __repr__(self):\n        return 'Sentence(%s)' % reprlib.repr(self.text)\n    def __iter__(self):\n        return SentenceIterator(self.words)\n\n\nclass SentenceIterator:\n    def __init__(self, words):\n        self.words = words\n        self.index = 0\n    def __next__(self):\n        try:\n            word = self.words[self.index]\n        except IndexError:\n            raise StopIteration()\n        self.index += 1\n        return word\n    def __iter__(self):\n        return self\n```\n\n如果在Sentence中实现\\_\\_next\\_\\_方法， 可以让Sentence同时成为可迭代对象和迭代器。但是这是一个相当糟糕的设计。**可迭代的对象一定不能是自身的迭代器**\n\n> 迭代器模式中指明， 迭代器应该有以下特点：\n> 1. 访问一个聚合对象的内容而无需暴露它的内部表示\n> 2. 支持对聚合对象的多种遍历(每次调用iter()都新建一个独立的迭代器)\n> 3. 为遍历不同的聚合结构提供统一的接口\n\n#### 14.4 生成器函数\n\nPython中实现上一节相同功能的方式是使用生成器函数代替额外实现的迭代器。\n\n```python\nimport re\nimport reprlib\nRE_WORD = re.compile('\\w+')\nclass Sentence:\n    def __init__(self, text):\n        self.text = text\n        self.words = RE_WORD.findall(text)\n    def __repr__(self):\n        return 'Sentence(%s)' % reprlib.repr(self.text)\n    def __iter__(self):\n        for word in self.words:\n            yield word\n        return\n```\n相比起上一节的实现简单许多。\n\n> 只要 Python 函数的定义体中有 yield 关键字，该函数就是生成器函数。调用生成器函数时，会返回一个生成器对象。也就是说，生成器函数是生成器工厂。\n\n#### 14.5 生成器的惰性实现\n\nre.finditer是re.findall的惰性版本， 返回的不是一个列表而是一个生成器，这样也能节省大量内存。\n\n```python\nimport re\nimport reprlib\nRE_WORD = re.compile('\\w+')\nclass Sentence:\n    def __init__(self, text):\n        self.text = text\n    def __repr__(self):\n        return 'Sentence(%s)' % reprlib.repr(self.text)\n    def __iter__(self):\n        for match in RE_WORD.finditer(self.text):\n            yield match.group()\n```\n\n使用finditer使得Sentence的元素变得可以惰性获得了。\n\n#### 14.6 生成器表达式\n\n下面使用生成器表达式构建生成器, 会使代码更加简洁\n```python\nimport re\nimport reprlib\nRE_WORD = re.compile('\\w+')\nclass Sentence:\n    def __init__(self, text):\n        self.text = text\n    def __repr__(self):\n        return 'Sentence(%s)' % reprlib.repr(self.text)\n    def __iter__(self):\n        return (match.group() for match in RE_WORD.finditer(self.text))\n```\n\n#### 14.7 yeild from \n\n> 注: yeild from 是Python3.3中新出现的语法\n\n如果生成器函数需要产出另一个生成器生成的值，传统的解决方法是使用嵌套的 for 循\n环。  \n例如：\n\n```python\n>>> def chain(*iterables):\n...     for it in iterables:\n...         for i in it:\n...             yield i\n...\n>>> s = 'ABC'\n>>> t = tuple(range(3))\n>>> list(chain(s, t))\n['A', 'B', 'C', 0, 1, 2]\n```\n\n这个chain生成器函数吧操作依次交给各个可迭代对象处理。我们可以用下面的方法简化：\n\n```python\n>>> def chain(*iterables):\n...     for i in iterables:\n...     yield from i\n...\n>>> list(chain(s, t))\n['A', 'B', 'C', 0, 1, 2]\n```\n\n可以看出，yield from i 完全代替了内层的 for 循环， 使得代码简化很多。\n\n#### 14.8 深入分析iter()函数\n在 Python 中迭代对象 x 时会调用 iter(x), 这是上文中我们反复提到的, 这也是iter()最常见的用法。   \n\niter 函数还有一个鲜为人知的用法：传入两个参数，使用常规的函数或任何可调用的对象创建迭代器。这样使用时，第一个参数必须是可调用的对象，用于不断调用（没有参数），产出各个值；第二个值是哨符，这是个标记值，当可调用的对象返回这个值时，触发迭代器抛出 StopIteration 异常，而不产出哨符。\n\n例子：\n```python\n# 掷骰子直到掷出1点\nfrom random import randint\ndef d6():\n    return randint(1, 6)\n\nd6_iter = iter(d6, 1)\nfor roll in d6_iter:\n    print(roll)\n```\n\n#### 14.9 生成器当成协程\n\n> Python 2.5 实现了“PEP 342 — Coroutines via Enhanced Generators”（https://www.python.org/dev/peps/pep-0342/ ）。这个提案为生成器对象添加了额外的方法和功能，其中最值得关注的是 .send() 方法， 这个函数让生成器变身为**协程**。\n\n与 .\\_\\_next\\_\\_() 方法一样，.send() 方法致使生成器前进到下一个 yield 语句。不过，.send() 方法还允许使用生成器的客户把数据发给自己，即不管传给 .send() 方法什么参数，那个参数都会成为生成器函数定义体中对应的 yield 表达式的值。也就是说，.send() 方法允许在客户代码和生成器之间双向交换数据。而 .\\_\\_next\\_\\_() 方法只允许客户从生成器中获取数据。\n\n> - 生成器用于生成供迭代的数据\n> - 协程是数据的消费者\n> - 为了避免脑袋炸裂，不能把这两个概念混为一谈\n> - 协程与迭代无关\n> - 注意，虽然在协程中会使用 yield 产出值，但这与迭代无关\n>       \n>    <div align = right>——David Beazley  “A Curious Course on Coroutines and Concurrency”</div>\n\n基于这几点， 本章不讨论协程![233](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/11.png?raw=true)\n\n#### 14.9 小结\nPython 语言对迭代的支持非常深入, Python 已经融合（grok）了迭代器。Python 从语义上集成迭代器模式是个很好的例证，说明设计模式在各种编程语言中使用的方式并不相同。","slug":"fluent-python-14","published":1,"updated":"2019-04-25T01:27:24.792Z","comments":1,"layout":"post","link":"","_id":"cjuw5c6g50037dhyfcom9vc6w","content":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-14-Iterables-Iterators-and-GeneratorsOperator\"><a href=\"#Chapter-14-Iterables-Iterators-and-GeneratorsOperator\" class=\"headerlink\" title=\"Chapter 14. Iterables, Iterators, and GeneratorsOperator\"></a>Chapter 14. Iterables, Iterators, and GeneratorsOperator</h3><h3 id=\"第十四章-可迭代对象，迭代器和生成器\"><a href=\"#第十四章-可迭代对象，迭代器和生成器\" class=\"headerlink\" title=\"第十四章: 可迭代对象，迭代器和生成器\"></a>第十四章: 可迭代对象，迭代器和生成器</h3><p>迭代是数据处理的基石。扫面内存中放不下的数据集时， 我们需要找到一种惰性获取数据的方式，即按需每次获取一个数据项。这就是迭代器模式(Iterator Pattern).<br>下面会说明Python语言是如何内置迭代器模式的。</p>\n<blockquote>\n<p>所有生成器都是迭代器，因为生成器完全实现了迭代器接口。不过，根据《设计模式：可复用面向对象软件的基础》一书的定义，迭代器用于从集合中取出元素；而生成器用于“凭空”生成元素。通过斐波纳契数列能很好地说明二者之间的区别：斐波纳契数列中的数有无穷个，在一个集合里放不下。不过要知道，在 Python 社区中，<strong>大多数时候都把迭代器和生成器视作同一概念</strong>。</p>\n</blockquote>\n<p>Python3 中， 生成器有广泛的用途， 例如range() 在Python2中返回列表， 在3中返回一个类似生成器的对象。</p>\n<p>在Python语言内部， 迭代器用于支持:  </p>\n<ul>\n<li>for循环</li>\n<li>构建和扩展集合类型</li>\n<li>逐行遍历文本文件</li>\n<li>列表推导， 字典推导和集合推导</li>\n<li>元组拆包</li>\n<li>调用函数时使用*拆包实参</li>\n</ul>\n<p>本章将讨论：</p>\n<ul>\n<li>语言内部使用iter()内置函数处理可迭代对象的方式</li>\n<li>如何使用Python实现经典的迭代器模式</li>\n<li>说明生成器函数的工作原理</li>\n<li>如何使用生成器函数或生成器表达式代替经典的迭代器</li>\n<li>如何使用标准库中通用的生成器函数</li>\n<li>如何使用yeild from 语句合并生成器</li>\n<li>为什么生成器和协程看似相同实则差别很大， 不能混淆</li>\n</ul>\n<h4 id=\"14-1-从序列开始\"><a href=\"#14-1-从序列开始\" class=\"headerlink\" title=\"14.1 从序列开始\"></a>14.1 从序列开始</h4><p>我们首先实现一个Sentence类， 通过索引从文本提取单词。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> reprlib</span><br><span class=\"line\">    RE_WORD = re.compile(<span class=\"string\">'\\w+'</span>)</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sentence</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, text)</span>:</span></span><br><span class=\"line\">            self.text = text</span><br><span class=\"line\">            self.words = RE_WORD.findall(text)</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, index)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.words[index]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__len__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> len(self.words)</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'Sentence(%s)'</span> % reprlib.repr(self.text)</span><br></pre></td></tr></table></figure>\n<p>序列可以迭代的原因：iter函数。解释器需要迭代对象 x 时，会自动调用 iter(x)。<br>内置的 iter 函数有以下作用。<br>(1) 检查对象是否实现了 __iter__ 方法，如果实现了就调用它，获取一个迭代器。<br>(2) 如果没有实现 __iter__ 方法，但是实现了 __getitem__ 方法，Python 会创建一个迭代器，尝试按顺序（从索引 0 开始）获取元素。<br>(3) 如果尝试失败，Python 抛出 TypeError 异常，通常会提示“C object is not iterable”（C对象不可迭代），其中 C 是目标对象所属的类。<br>任何 Python 序列都可迭代的原因是，它们都实现了 __getitem__ 方法。其实，标准的序列也都实现了 __iter__ 方法</p>\n<h4 id=\"14-2-可迭代对象和迭代器\"><a href=\"#14-2-可迭代对象和迭代器\" class=\"headerlink\" title=\"14.2 可迭代对象和迭代器\"></a>14.2 可迭代对象和迭代器</h4><p>上面一小节我们可以看到迭代器的定义：</p>\n<blockquote>\n<p>使用 iter 内置函数可以获取迭代器的对象。如果对象实现了能返回迭代器的__iter__ 方法，那么对象就是可迭代的。<br>序列都可以迭代；实现__getitem__ 方法，而且其参数是从零开始的索引，这种对象也可以迭代。<br>我们要明确可迭代的对象和迭代器之间的关系：Python 从可迭代的对象中获取迭代器。</p>\n</blockquote>\n<p>下面给出一个简单的例子，使用while循环模拟for循环中的迭代器：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># for 实现</span></span><br><span class=\"line\">s = <span class=\"string\">'ABC'</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">    print(char)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># while 实现</span></span><br><span class=\"line\">s = <span class=\"string\">'ABC'</span></span><br><span class=\"line\">it = iter(s) </span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        print(next(it)) </span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration: </span><br><span class=\"line\">        <span class=\"keyword\">del</span> it </span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n<p>标准的迭代器接口有两个方法。</p>\n<ul>\n<li>__next__<br>  返回下一个可用的元素，如果没有元素了，抛出 StopIteration 异常。</li>\n<li>__iter__<br>  返回 self，以便在应该使用可迭代对象的地方使用迭代器，例如在 for 循环中。</li>\n</ul>\n<p>这个接口在 collections.abc.Iterator 抽象基类中制定。这个类定义了 __next__ 抽象方法，而且继承自 Iterable 类；__iter__ 抽象方法则在 Iterable 类中定义。</p>\n<p>因为迭代器只有__next__ 和__iter__方法，所以迭代器没办法检查遗漏的元素和‘还原’迭代器， 如果想再次迭代， 还是需要传入被迭代的对象。由于Iterator.__init__是返回实例本身，传入迭代器无法还原已经迭代过的元素。</p>\n<h4 id=\"14-3-典型的迭代器\"><a href=\"#14-3-典型的迭代器\" class=\"headerlink\" title=\"14.3 典型的迭代器\"></a>14.3 典型的迭代器</h4><p>这一节会将迭代器和可迭代对象分离开来，让我们更加清楚迭代器和可迭代对象的关系</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> reprlib</span><br><span class=\"line\">RE_WORD = re.compile(<span class=\"string\">'\\w+'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sentence</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, text)</span>:</span></span><br><span class=\"line\">        self.text = text</span><br><span class=\"line\">        self.words = RE_WORD.findall(text)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Sentence(%s)'</span> % reprlib.repr(self.text)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> SentenceIterator(self.words)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SentenceIterator</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, words)</span>:</span></span><br><span class=\"line\">        self.words = words</span><br><span class=\"line\">        self.index = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            word = self.words[self.index]</span><br><span class=\"line\">        <span class=\"keyword\">except</span> IndexError:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StopIteration()</span><br><span class=\"line\">        self.index += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> word</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br></pre></td></tr></table></figure>\n<p>如果在Sentence中实现__next__方法， 可以让Sentence同时成为可迭代对象和迭代器。但是这是一个相当糟糕的设计。<strong>可迭代的对象一定不能是自身的迭代器</strong></p>\n<blockquote>\n<p>迭代器模式中指明， 迭代器应该有以下特点：</p>\n<ol>\n<li>访问一个聚合对象的内容而无需暴露它的内部表示</li>\n<li>支持对聚合对象的多种遍历(每次调用iter()都新建一个独立的迭代器)</li>\n<li>为遍历不同的聚合结构提供统一的接口</li>\n</ol>\n</blockquote>\n<h4 id=\"14-4-生成器函数\"><a href=\"#14-4-生成器函数\" class=\"headerlink\" title=\"14.4 生成器函数\"></a>14.4 生成器函数</h4><p>Python中实现上一节相同功能的方式是使用生成器函数代替额外实现的迭代器。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> reprlib</span><br><span class=\"line\">RE_WORD = re.compile(<span class=\"string\">'\\w+'</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sentence</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, text)</span>:</span></span><br><span class=\"line\">        self.text = text</span><br><span class=\"line\">        self.words = RE_WORD.findall(text)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Sentence(%s)'</span> % reprlib.repr(self.text)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> self.words:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> word</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br></pre></td></tr></table></figure>\n<p>相比起上一节的实现简单许多。</p>\n<blockquote>\n<p>只要 Python 函数的定义体中有 yield 关键字，该函数就是生成器函数。调用生成器函数时，会返回一个生成器对象。也就是说，生成器函数是生成器工厂。</p>\n</blockquote>\n<h4 id=\"14-5-生成器的惰性实现\"><a href=\"#14-5-生成器的惰性实现\" class=\"headerlink\" title=\"14.5 生成器的惰性实现\"></a>14.5 生成器的惰性实现</h4><p>re.finditer是re.findall的惰性版本， 返回的不是一个列表而是一个生成器，这样也能节省大量内存。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> reprlib</span><br><span class=\"line\">RE_WORD = re.compile(<span class=\"string\">'\\w+'</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sentence</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, text)</span>:</span></span><br><span class=\"line\">        self.text = text</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Sentence(%s)'</span> % reprlib.repr(self.text)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> match <span class=\"keyword\">in</span> RE_WORD.finditer(self.text):</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> match.group()</span><br></pre></td></tr></table></figure>\n<p>使用finditer使得Sentence的元素变得可以惰性获得了。</p>\n<h4 id=\"14-6-生成器表达式\"><a href=\"#14-6-生成器表达式\" class=\"headerlink\" title=\"14.6 生成器表达式\"></a>14.6 生成器表达式</h4><p>下面使用生成器表达式构建生成器, 会使代码更加简洁<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> reprlib</span><br><span class=\"line\">RE_WORD = re.compile(<span class=\"string\">'\\w+'</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sentence</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, text)</span>:</span></span><br><span class=\"line\">        self.text = text</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Sentence(%s)'</span> % reprlib.repr(self.text)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (match.group() <span class=\"keyword\">for</span> match <span class=\"keyword\">in</span> RE_WORD.finditer(self.text))</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"14-7-yeild-from\"><a href=\"#14-7-yeild-from\" class=\"headerlink\" title=\"14.7 yeild from\"></a>14.7 yeild from</h4><blockquote>\n<p>注: yeild from 是Python3.3中新出现的语法</p>\n</blockquote>\n<p>如果生成器函数需要产出另一个生成器生成的值，传统的解决方法是使用嵌套的 for 循<br>环。<br>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">chain</span><span class=\"params\">(*iterables)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">for</span> it <span class=\"keyword\">in</span> iterables:</span><br><span class=\"line\"><span class=\"meta\">... </span>        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> it:</span><br><span class=\"line\"><span class=\"meta\">... </span>            <span class=\"keyword\">yield</span> i</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = <span class=\"string\">'ABC'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = tuple(range(<span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(chain(s, t))</span><br><span class=\"line\">[<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<p>这个chain生成器函数吧操作依次交给各个可迭代对象处理。我们可以用下面的方法简化：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">chain</span><span class=\"params\">(*iterables)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> iterables:</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> i</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(chain(s, t))</span><br><span class=\"line\">[<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<p>可以看出，yield from i 完全代替了内层的 for 循环， 使得代码简化很多。</p>\n<h4 id=\"14-8-深入分析iter-函数\"><a href=\"#14-8-深入分析iter-函数\" class=\"headerlink\" title=\"14.8 深入分析iter()函数\"></a>14.8 深入分析iter()函数</h4><p>在 Python 中迭代对象 x 时会调用 iter(x), 这是上文中我们反复提到的, 这也是iter()最常见的用法。   </p>\n<p>iter 函数还有一个鲜为人知的用法：传入两个参数，使用常规的函数或任何可调用的对象创建迭代器。这样使用时，第一个参数必须是可调用的对象，用于不断调用（没有参数），产出各个值；第二个值是哨符，这是个标记值，当可调用的对象返回这个值时，触发迭代器抛出 StopIteration 异常，而不产出哨符。</p>\n<p>例子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 掷骰子直到掷出1点</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">d6</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> randint(<span class=\"number\">1</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">d6_iter = iter(d6, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> roll <span class=\"keyword\">in</span> d6_iter:</span><br><span class=\"line\">    print(roll)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"14-9-生成器当成协程\"><a href=\"#14-9-生成器当成协程\" class=\"headerlink\" title=\"14.9 生成器当成协程\"></a>14.9 生成器当成协程</h4><blockquote>\n<p>Python 2.5 实现了“PEP 342 — Coroutines via Enhanced Generators”（<a href=\"https://www.python.org/dev/peps/pep-0342/\" target=\"_blank\" rel=\"noopener\">https://www.python.org/dev/peps/pep-0342/</a> ）。这个提案为生成器对象添加了额外的方法和功能，其中最值得关注的是 .send() 方法， 这个函数让生成器变身为<strong>协程</strong>。</p>\n</blockquote>\n<p>与 .__next__() 方法一样，.send() 方法致使生成器前进到下一个 yield 语句。不过，.send() 方法还允许使用生成器的客户把数据发给自己，即不管传给 .send() 方法什么参数，那个参数都会成为生成器函数定义体中对应的 yield 表达式的值。也就是说，.send() 方法允许在客户代码和生成器之间双向交换数据。而 .__next__() 方法只允许客户从生成器中获取数据。</p>\n<blockquote>\n<ul>\n<li>生成器用于生成供迭代的数据</li>\n<li>协程是数据的消费者</li>\n<li>为了避免脑袋炸裂，不能把这两个概念混为一谈</li>\n<li>协程与迭代无关</li>\n<li><p>注意，虽然在协程中会使用 yield 产出值，但这与迭代无关</p>\n <div align=\"right\">——David Beazley  “A Curious Course on Coroutines and Concurrency”</div>\n</li>\n</ul>\n</blockquote>\n<p>基于这几点， 本章不讨论协程<img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/11.png?raw=true\" alt=\"233\"></p>\n<h4 id=\"14-9-小结\"><a href=\"#14-9-小结\" class=\"headerlink\" title=\"14.9 小结\"></a>14.9 小结</h4><p>Python 语言对迭代的支持非常深入, Python 已经融合（grok）了迭代器。Python 从语义上集成迭代器模式是个很好的例证，说明设计模式在各种编程语言中使用的方式并不相同。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-14-Iterables-Iterators-and-GeneratorsOperator\"><a href=\"#Chapter-14-Iterables-Iterators-and-GeneratorsOperator\" class=\"headerlink\" title=\"Chapter 14. Iterables, Iterators, and GeneratorsOperator\"></a>Chapter 14. Iterables, Iterators, and GeneratorsOperator</h3><h3 id=\"第十四章-可迭代对象，迭代器和生成器\"><a href=\"#第十四章-可迭代对象，迭代器和生成器\" class=\"headerlink\" title=\"第十四章: 可迭代对象，迭代器和生成器\"></a>第十四章: 可迭代对象，迭代器和生成器</h3><p>迭代是数据处理的基石。扫面内存中放不下的数据集时， 我们需要找到一种惰性获取数据的方式，即按需每次获取一个数据项。这就是迭代器模式(Iterator Pattern).<br>下面会说明Python语言是如何内置迭代器模式的。</p>\n<blockquote>\n<p>所有生成器都是迭代器，因为生成器完全实现了迭代器接口。不过，根据《设计模式：可复用面向对象软件的基础》一书的定义，迭代器用于从集合中取出元素；而生成器用于“凭空”生成元素。通过斐波纳契数列能很好地说明二者之间的区别：斐波纳契数列中的数有无穷个，在一个集合里放不下。不过要知道，在 Python 社区中，<strong>大多数时候都把迭代器和生成器视作同一概念</strong>。</p>\n</blockquote>\n<p>Python3 中， 生成器有广泛的用途， 例如range() 在Python2中返回列表， 在3中返回一个类似生成器的对象。</p>\n<p>在Python语言内部， 迭代器用于支持:  </p>\n<ul>\n<li>for循环</li>\n<li>构建和扩展集合类型</li>\n<li>逐行遍历文本文件</li>\n<li>列表推导， 字典推导和集合推导</li>\n<li>元组拆包</li>\n<li>调用函数时使用*拆包实参</li>\n</ul>\n<p>本章将讨论：</p>\n<ul>\n<li>语言内部使用iter()内置函数处理可迭代对象的方式</li>\n<li>如何使用Python实现经典的迭代器模式</li>\n<li>说明生成器函数的工作原理</li>\n<li>如何使用生成器函数或生成器表达式代替经典的迭代器</li>\n<li>如何使用标准库中通用的生成器函数</li>\n<li>如何使用yeild from 语句合并生成器</li>\n<li>为什么生成器和协程看似相同实则差别很大， 不能混淆</li>\n</ul>\n<h4 id=\"14-1-从序列开始\"><a href=\"#14-1-从序列开始\" class=\"headerlink\" title=\"14.1 从序列开始\"></a>14.1 从序列开始</h4><p>我们首先实现一个Sentence类， 通过索引从文本提取单词。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> reprlib</span><br><span class=\"line\">    RE_WORD = re.compile(<span class=\"string\">'\\w+'</span>)</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sentence</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, text)</span>:</span></span><br><span class=\"line\">            self.text = text</span><br><span class=\"line\">            self.words = RE_WORD.findall(text)</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, index)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.words[index]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__len__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> len(self.words)</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'Sentence(%s)'</span> % reprlib.repr(self.text)</span><br></pre></td></tr></table></figure>\n<p>序列可以迭代的原因：iter函数。解释器需要迭代对象 x 时，会自动调用 iter(x)。<br>内置的 iter 函数有以下作用。<br>(1) 检查对象是否实现了 __iter__ 方法，如果实现了就调用它，获取一个迭代器。<br>(2) 如果没有实现 __iter__ 方法，但是实现了 __getitem__ 方法，Python 会创建一个迭代器，尝试按顺序（从索引 0 开始）获取元素。<br>(3) 如果尝试失败，Python 抛出 TypeError 异常，通常会提示“C object is not iterable”（C对象不可迭代），其中 C 是目标对象所属的类。<br>任何 Python 序列都可迭代的原因是，它们都实现了 __getitem__ 方法。其实，标准的序列也都实现了 __iter__ 方法</p>\n<h4 id=\"14-2-可迭代对象和迭代器\"><a href=\"#14-2-可迭代对象和迭代器\" class=\"headerlink\" title=\"14.2 可迭代对象和迭代器\"></a>14.2 可迭代对象和迭代器</h4><p>上面一小节我们可以看到迭代器的定义：</p>\n<blockquote>\n<p>使用 iter 内置函数可以获取迭代器的对象。如果对象实现了能返回迭代器的__iter__ 方法，那么对象就是可迭代的。<br>序列都可以迭代；实现__getitem__ 方法，而且其参数是从零开始的索引，这种对象也可以迭代。<br>我们要明确可迭代的对象和迭代器之间的关系：Python 从可迭代的对象中获取迭代器。</p>\n</blockquote>\n<p>下面给出一个简单的例子，使用while循环模拟for循环中的迭代器：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># for 实现</span></span><br><span class=\"line\">s = <span class=\"string\">'ABC'</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">    print(char)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># while 实现</span></span><br><span class=\"line\">s = <span class=\"string\">'ABC'</span></span><br><span class=\"line\">it = iter(s) </span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        print(next(it)) </span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration: </span><br><span class=\"line\">        <span class=\"keyword\">del</span> it </span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n<p>标准的迭代器接口有两个方法。</p>\n<ul>\n<li>__next__<br>  返回下一个可用的元素，如果没有元素了，抛出 StopIteration 异常。</li>\n<li>__iter__<br>  返回 self，以便在应该使用可迭代对象的地方使用迭代器，例如在 for 循环中。</li>\n</ul>\n<p>这个接口在 collections.abc.Iterator 抽象基类中制定。这个类定义了 __next__ 抽象方法，而且继承自 Iterable 类；__iter__ 抽象方法则在 Iterable 类中定义。</p>\n<p>因为迭代器只有__next__ 和__iter__方法，所以迭代器没办法检查遗漏的元素和‘还原’迭代器， 如果想再次迭代， 还是需要传入被迭代的对象。由于Iterator.__init__是返回实例本身，传入迭代器无法还原已经迭代过的元素。</p>\n<h4 id=\"14-3-典型的迭代器\"><a href=\"#14-3-典型的迭代器\" class=\"headerlink\" title=\"14.3 典型的迭代器\"></a>14.3 典型的迭代器</h4><p>这一节会将迭代器和可迭代对象分离开来，让我们更加清楚迭代器和可迭代对象的关系</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> reprlib</span><br><span class=\"line\">RE_WORD = re.compile(<span class=\"string\">'\\w+'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sentence</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, text)</span>:</span></span><br><span class=\"line\">        self.text = text</span><br><span class=\"line\">        self.words = RE_WORD.findall(text)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Sentence(%s)'</span> % reprlib.repr(self.text)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> SentenceIterator(self.words)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SentenceIterator</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, words)</span>:</span></span><br><span class=\"line\">        self.words = words</span><br><span class=\"line\">        self.index = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            word = self.words[self.index]</span><br><span class=\"line\">        <span class=\"keyword\">except</span> IndexError:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StopIteration()</span><br><span class=\"line\">        self.index += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> word</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br></pre></td></tr></table></figure>\n<p>如果在Sentence中实现__next__方法， 可以让Sentence同时成为可迭代对象和迭代器。但是这是一个相当糟糕的设计。<strong>可迭代的对象一定不能是自身的迭代器</strong></p>\n<blockquote>\n<p>迭代器模式中指明， 迭代器应该有以下特点：</p>\n<ol>\n<li>访问一个聚合对象的内容而无需暴露它的内部表示</li>\n<li>支持对聚合对象的多种遍历(每次调用iter()都新建一个独立的迭代器)</li>\n<li>为遍历不同的聚合结构提供统一的接口</li>\n</ol>\n</blockquote>\n<h4 id=\"14-4-生成器函数\"><a href=\"#14-4-生成器函数\" class=\"headerlink\" title=\"14.4 生成器函数\"></a>14.4 生成器函数</h4><p>Python中实现上一节相同功能的方式是使用生成器函数代替额外实现的迭代器。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> reprlib</span><br><span class=\"line\">RE_WORD = re.compile(<span class=\"string\">'\\w+'</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sentence</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, text)</span>:</span></span><br><span class=\"line\">        self.text = text</span><br><span class=\"line\">        self.words = RE_WORD.findall(text)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Sentence(%s)'</span> % reprlib.repr(self.text)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> self.words:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> word</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br></pre></td></tr></table></figure>\n<p>相比起上一节的实现简单许多。</p>\n<blockquote>\n<p>只要 Python 函数的定义体中有 yield 关键字，该函数就是生成器函数。调用生成器函数时，会返回一个生成器对象。也就是说，生成器函数是生成器工厂。</p>\n</blockquote>\n<h4 id=\"14-5-生成器的惰性实现\"><a href=\"#14-5-生成器的惰性实现\" class=\"headerlink\" title=\"14.5 生成器的惰性实现\"></a>14.5 生成器的惰性实现</h4><p>re.finditer是re.findall的惰性版本， 返回的不是一个列表而是一个生成器，这样也能节省大量内存。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> reprlib</span><br><span class=\"line\">RE_WORD = re.compile(<span class=\"string\">'\\w+'</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sentence</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, text)</span>:</span></span><br><span class=\"line\">        self.text = text</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Sentence(%s)'</span> % reprlib.repr(self.text)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> match <span class=\"keyword\">in</span> RE_WORD.finditer(self.text):</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> match.group()</span><br></pre></td></tr></table></figure>\n<p>使用finditer使得Sentence的元素变得可以惰性获得了。</p>\n<h4 id=\"14-6-生成器表达式\"><a href=\"#14-6-生成器表达式\" class=\"headerlink\" title=\"14.6 生成器表达式\"></a>14.6 生成器表达式</h4><p>下面使用生成器表达式构建生成器, 会使代码更加简洁<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> reprlib</span><br><span class=\"line\">RE_WORD = re.compile(<span class=\"string\">'\\w+'</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sentence</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, text)</span>:</span></span><br><span class=\"line\">        self.text = text</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Sentence(%s)'</span> % reprlib.repr(self.text)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (match.group() <span class=\"keyword\">for</span> match <span class=\"keyword\">in</span> RE_WORD.finditer(self.text))</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"14-7-yeild-from\"><a href=\"#14-7-yeild-from\" class=\"headerlink\" title=\"14.7 yeild from\"></a>14.7 yeild from</h4><blockquote>\n<p>注: yeild from 是Python3.3中新出现的语法</p>\n</blockquote>\n<p>如果生成器函数需要产出另一个生成器生成的值，传统的解决方法是使用嵌套的 for 循<br>环。<br>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">chain</span><span class=\"params\">(*iterables)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">for</span> it <span class=\"keyword\">in</span> iterables:</span><br><span class=\"line\"><span class=\"meta\">... </span>        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> it:</span><br><span class=\"line\"><span class=\"meta\">... </span>            <span class=\"keyword\">yield</span> i</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = <span class=\"string\">'ABC'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = tuple(range(<span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(chain(s, t))</span><br><span class=\"line\">[<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<p>这个chain生成器函数吧操作依次交给各个可迭代对象处理。我们可以用下面的方法简化：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">chain</span><span class=\"params\">(*iterables)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> iterables:</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> i</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(chain(s, t))</span><br><span class=\"line\">[<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<p>可以看出，yield from i 完全代替了内层的 for 循环， 使得代码简化很多。</p>\n<h4 id=\"14-8-深入分析iter-函数\"><a href=\"#14-8-深入分析iter-函数\" class=\"headerlink\" title=\"14.8 深入分析iter()函数\"></a>14.8 深入分析iter()函数</h4><p>在 Python 中迭代对象 x 时会调用 iter(x), 这是上文中我们反复提到的, 这也是iter()最常见的用法。   </p>\n<p>iter 函数还有一个鲜为人知的用法：传入两个参数，使用常规的函数或任何可调用的对象创建迭代器。这样使用时，第一个参数必须是可调用的对象，用于不断调用（没有参数），产出各个值；第二个值是哨符，这是个标记值，当可调用的对象返回这个值时，触发迭代器抛出 StopIteration 异常，而不产出哨符。</p>\n<p>例子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 掷骰子直到掷出1点</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">d6</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> randint(<span class=\"number\">1</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">d6_iter = iter(d6, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> roll <span class=\"keyword\">in</span> d6_iter:</span><br><span class=\"line\">    print(roll)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"14-9-生成器当成协程\"><a href=\"#14-9-生成器当成协程\" class=\"headerlink\" title=\"14.9 生成器当成协程\"></a>14.9 生成器当成协程</h4><blockquote>\n<p>Python 2.5 实现了“PEP 342 — Coroutines via Enhanced Generators”（<a href=\"https://www.python.org/dev/peps/pep-0342/\" target=\"_blank\" rel=\"noopener\">https://www.python.org/dev/peps/pep-0342/</a> ）。这个提案为生成器对象添加了额外的方法和功能，其中最值得关注的是 .send() 方法， 这个函数让生成器变身为<strong>协程</strong>。</p>\n</blockquote>\n<p>与 .__next__() 方法一样，.send() 方法致使生成器前进到下一个 yield 语句。不过，.send() 方法还允许使用生成器的客户把数据发给自己，即不管传给 .send() 方法什么参数，那个参数都会成为生成器函数定义体中对应的 yield 表达式的值。也就是说，.send() 方法允许在客户代码和生成器之间双向交换数据。而 .__next__() 方法只允许客户从生成器中获取数据。</p>\n<blockquote>\n<ul>\n<li>生成器用于生成供迭代的数据</li>\n<li>协程是数据的消费者</li>\n<li>为了避免脑袋炸裂，不能把这两个概念混为一谈</li>\n<li>协程与迭代无关</li>\n<li><p>注意，虽然在协程中会使用 yield 产出值，但这与迭代无关</p>\n <div align=\"right\">——David Beazley  “A Curious Course on Coroutines and Concurrency”</div>\n</li>\n</ul>\n</blockquote>\n<p>基于这几点， 本章不讨论协程<img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/11.png?raw=true\" alt=\"233\"></p>\n<h4 id=\"14-9-小结\"><a href=\"#14-9-小结\" class=\"headerlink\" title=\"14.9 小结\"></a>14.9 小结</h4><p>Python 语言对迭代的支持非常深入, Python 已经融合（grok）了迭代器。Python 从语义上集成迭代器模式是个很好的例证，说明设计模式在各种编程语言中使用的方式并不相同。</p>\n"},{"title":"Fluent Python 第十章小结","date":"2018-05-07T10:38:00.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true"],"toc":true,"comment":true,"_content":"\n## Fluent Python ##\n### Chapter 10. Sequence Hacking, Hashing, and Slicing\n### 第十章: 序列的修改、散列和切片\n\n 这章以上章的Vector2d为基础，定义多维向量，这个类的行为和Python标准的扁平序列一样。将实现下面的功能：\n\n - 基本的序列协议—— \\_\\_len\\_\\_ 和 \\_\\_getitem\\_\\_\n - 正确表述拥有很多元素的实例\n - 适当的切片支持，用于生成新的 Vector 实例\n - 综合各个元素的值计算散列值\n - 自定义的格式语言扩展\n - 此外，我们还将通过 __getattr__ 方法实现属性的动态存取，以此取代 Vector2d 使用的只读特性——不过，序列类型通常不会这么做。\n\n\n#### Vector类：用户自定义的序列类型\n\n序列类型的构造方法最好接受可迭代的对象为参数, 首先我们为vector加上这个构造方法\n\n```python  \nfrom array import array\nimport reprlib\nimport math\nclass Vector:\n    typecode = 'd'\n    def __init__(self, components):\n        # 将vector的分量存储在_components中\n        # self._components是迭代器\n        self._components = array(self.typecode, components)\n    def __iter__(self):\n        return iter(self._components)\n    def __repr__(self):\n        # 使用 reprlib.repr() 函数获取 self._components 的有限长度表示形式\n        components = reprlib.repr(self._components)\n        components = components[components.find('['):-1]\n        return 'Vector({})'.format(components)\n    def __str__(self):\n        return str(tuple(self))\n    def __bytes__(self):\n        return (bytes([ord(self.typecode)])+bytes(self._components))\n    def __eq__(self, other):\n        return tuple(self) == tuple(other)\n    def __abs__(self):\n        return math.sqrt(sum(x * x for x in self))\n    def __bool__(self):\n        return bool(abs(self))\n    @classmethod\n    def frombytes(cls, octets):\n        typecode = chr(octets[0])\n        memv = memoryview(octets[1:]).cast(typecode)\n        return cls(memv)\n\n```\n_注： reprlib.repr 的方式需要做些说明。这个函数用于生成大型结构或递归结构的安全表示形式，它会限制输出字符串的长度，用 '...' 表示截断的部分。_    \n\n_调用 repr() 函数的目的是调试，因此绝对不能抛出异常。如果 \\_\\_repr\\_\\_ 方法的实现有问题，那么必须处理，尽量输出有用的内容，让用户能够识别目标对象。_ \n\n#### 协议和鸭子类型\n在 Python 中创建功能完善的序列类型无需使用继承，只需实现符合序列协议的方法。不过，这里说的协议是什么呢？\n在面向对象编程中，协议是非正式的接口，只在文档中定义，在代码中不定义。例如，Python 的序列协议只需要 \\_\\_len\\_\\_ 和 \\_\\_getitem\\_\\_ 两个方法。任何类（如 Spam），只要使用标准的签名和语义实现了这两个方法，就能用在任何期待序列的地方。Spam 是不是哪个类的子类无关紧要，只要提供了所需的方法即可。\n\n_注： 鸭子类型：“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”_\n\n协议是非正式的，没有强制力，因此如果你知道类的具体使用场景，通常只需要实现一个协议的部分。例如，为了支持迭代，只需实现 \\_\\_getitem\\_\\_ 方法，没必要提供 \\_\\_len\\_\\_方法。\n\n#### Vector:可切片的序列\n添加\\_\\_len\\_\\_ 和 \\_\\_getitem\\_\\_方法后就可以实现基本的切片了\n\n```python\nclass Vector:\n    # 省略了很多行\n    # ...\n    def __len__(self):\n        return len(self._components)\n    def __getitem__(self, index):\n        return self._components[index]\n```\n但是这样实现的切片会存在一个问题， 就是切片得到的结果是数组而不是新的Vector类\n\n##### 切片原理\n\n首先通过一个例子查看切片的原理:\n\n```python   \n>>> class MySeq:\n...     def __getitem__(self, index):\n...         return index\n... \n>>> s = MySeq()\n>>> s[1]\n1\n>>> s[1:4]\nslice(1, 4, None)\n>>> s[1:4:2]\nslice(1, 4, 2)\n>>> s[1:4:2, 9]\n(slice(1, 4, 2), 9)\n>>> s[1:4:2, 7:9]\n(slice(1, 4, 2), slice(7, 9, None))\n\n```\n\nslice(1, 4, 2) 表示的是 从1开始, 到4结束, step是2(左开右闭)\n\nslice 有一个有趣的方法indices   \n\n> S.indices(len) -> (start, stop, stride)\n给定长度为 len 的序列，计算 S 表示的扩展切片的起始（start）和结尾（stop）索引，以及步幅（stride）。超出边界的索引会被截掉，这与常规切片的处理方式一\n样。\n\n换句话说，indices 方法开放了内置序列实现的棘手逻辑，用于优雅地处理缺失索引和负数索引，以及长度超过目标序列的切片。这个方法会“整顿”元组，把 start、stop 和stride 都变成非负数，而且都落在指定长度序列的边界内。\n下面举几个例子。假设有个长度为 5 的序列，例如 'ABCDE'：\n\n```python\n>>> slice(None, 10, 2).indices(5)\n(0, 5, 2)\n>>> slice(-3, None, None).indices(5)\n(2, 5, 1)\n```\n'ABCDE'[:10:2] 等同于 'ABCDE'[0:5:2]   \n'ABCDE'[-3:] 等同于 'ABCDE'[2:5:1]\n\n##### 能处理切片的\\_\\_getitem\\_\\_方法\n\n对上文提到的Vector类的\\_\\_getitem\\_\\_方法 做出如下改动:\n\n```python\ndef __getitem__(self, index):\n    cls = type(self)\n    if isinstance(index, slice):\n        return cls(self._components[index])\n    elif isinstance(index, numbers.Integral):   \n        return self._components[index]\n    else:\n        msg = '{cls.__name__} indices must be integers'\n        raise TypeError(msg.format(cls=cls))\n```\n\n传入slice对象时，getitem会将_components 数组的切片构建成一个新的 Vector 实例\n\n#### Vector 类： 动态存取属性\n我们想额外提供下述句法，用于读取向量的前四个分量：\n\n```python\n>>> v = Vector(range(10))\n>>> v.x\n0.0\n>>> v.y, v.z, v.t\n(1.0, 2.0, 3.0)\n```\n\n首先我们要了解一下Python中对象的属性查找机制:\n\n>  简单来说，对 my_obj.x 表达式，Python 会检查 my_obj 实例有没有名为 x 的属性；如果没有，到类（my_obj.__class__）中查找；如果还没有，顺着继承树继续查找。 如果依旧找不到，调用 my_obj 所属类中定义的 __getattr__ 方法，传入 self 和属性名称的字符串形式（如 'x'）。\n\n下面我们为Vector类增加 \\_\\_getattr\\_\\_方法:\n\n```python\nshortcut_names = 'xyzt'\ndef __getattr__(self, name):\n    cls = type(self)\n    if len(name) == 1:\n        pos = cls.shortcut_names.find(name)\n    if 0 <= pos < len(self._components):\n        return self._components[pos]\n    msg = '{.__name__!r} object has no attribute {!r}'\n    raise AttributeError(msg.format(cls, name)\n```\n\n这样的实现可以初步达到我们需要的效果，但是可能会出现下面的矛盾情形：\n\n```python\n>>> v = Vector(range(5))\n>>> v\nVector([0.0, 1.0, 2.0, 3.0, 4.0])\n>>> v.x\n0.0\n>>> v.x = 10\n>>> v.x\n10\n>>> v\nVector([0.0, 1.0, 2.0, 3.0, 4.0])\n```\n\n这里对v.x赋值并没有改变Vector第一分量的值，这样赋值只是让Vector类多了一个名为x的属性。\n\n为了避免这种情况出现我们需要实现一个\\_\\_setattr\\_\\_方法：\n```python\ndef __setattr__(self, name, value):\n    cls = type(self)\n    if len(name) == 1:\n        if name in cls.shortcut_names:\n            error = 'readonly attribute {attr_name!r}'\n        elif name.islower():\n            error = \"can't set attributes 'a' to 'z' in {cls_name!r}\"\n        else:\n            error = ''\n    if error:\n        msg = error.format(cls_name=cls.__name__, attr_name=name)\n        raise AttributeError(msg)\n    super().__setattr__(name, value)\n```\n对单个字符的属性进行单独处理。\n\n有一个问题要特别注意：多数时候，如果实现了 __getattr__ 方法，那么也要定义 __setattr__ 方法，以防对象的行为不一致。\n如果想允许修改分量，可以使用 __setitem__ 方法，支持 v[0] = 1.1 这样的赋值，以及（或者）实现 __setattr__ 方法，支持 v.x = 1.1 这样的赋值\n\n#### Vector类： 散列和快速等值测试\n实现\\_\\_hash\\_\\_方法，加上现有的\\_\\_eq\\_\\_方法\n我们使用^（异或）运算符依次计算各个分量的散列值，像这样：v[0] ^ v[1] ^ v[2]...。需要用到归约函数reduce\n![Figure-10-1](https://raw.githubusercontent.com/aldslvda/blog-images/master/fluent-python-10-1.jpg)\n\n下面提供了三种计算累计异或的方式：\n```python\n>>> n = 0\n>>> for i in range(1, 6):\n...     n ^= i\n...\n>>> n\n1 >>> import functools\n>>> functools.reduce(lambda a, b: a^b, range(6))\n1 >>> import operator\n>>> functools.reduce(operator.xor, range(6))\n1\n```\n\n显然第三种比较简洁， 本书的第五章讲过， 尽量避免lambda表达式的使用。\n\n增加的\\_\\_hash\\_\\_方法如下:\n\n```python\ndef __hash__(self):\n    hashes = (hash(x) for x in self._components)\n    return functools.reduce(operator.xor, hashes, 0)\n```\n这是一种映射归约运算\n![Figure-10-2](https://raw.githubusercontent.com/aldslvda/blog-images/master/fluent-python-10-2.jpg)\n> 映射归约：把函数应用到各个元素上，生成一个新序列（映射，map），然后计算聚合值（归约，reduce）\n\n为了提高比较的效率修改\\_\\_eq\\_\\_方法(两种实现方式逻辑一样)：\n```python\ndef __eq__(self, other):\n    if len(self) != len(other):\n        return False\n    for a, b in zip(self, other):\n        if a != b:\n            return False\n    return True\n\ndef __eq__(self, other):\n    return len(self) == len(other) and all(a == b for a, b in zip(self, other))\n```\n\n#### 格式化\nVector 类的 \\_\\_format\\_\\_ 方法与 Vector2d 类的相似，但是不使用极坐标，而使用球面坐标（也叫超球面坐标），因为 Vector 类支持 n 个维度，而超过四维后，球体变成了“超球体”(n维球体)。 因此，我们会把自定义的格式后缀由 'p' 变成 'h'\n下面是格式化的实现：\n\n```python\nimport itertools\ndef angle(self, n):\n    r = math.sqrt(sum(x * x for x in self[n:]))\n    a = math.atan2(r, self[n-1])\n    if (n == len(self) - 1) and (self[-1] < 0):\n        return math.pi * 2 - a\n    else:\n        return a\ndef angles(self):\n    return (self.angle(n) for n in range(1, len(self)))\ndef __format__(self, fmt_spec=''):\n    if fmt_spec.endswith('h'): # 超球面坐标\n        fmt_spec = fmt_spec[:-1]\n        coords = itertools.chain([abs(self)],\n        self.angles())\n        outer_fmt = '<{}>'\n    else:\n        coords = self\n        outer_fmt = '({})'\n        components = (format(c, fmt_spec) for c in coords)\n    return outer_fmt.format(', '.join(components))\n```\n\n#### 小结\n\n我们经常分析 Python 标准对象的行为，然后进行模仿，让 Vector 的行为符合 Python 风格。\n\n\n\n","source":"_posts/fluent-python-10.md","raw":"title: Fluent Python 第十章小结\ndate: 2018-05-07 18:38:00\ntags:\n- Python\n- 对象\n- pythonic\n- duck typing\n- slicing\n- reduce\n- fluent python\ncategories:\n- 读书笔记\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n## Fluent Python ##\n### Chapter 10. Sequence Hacking, Hashing, and Slicing\n### 第十章: 序列的修改、散列和切片\n\n 这章以上章的Vector2d为基础，定义多维向量，这个类的行为和Python标准的扁平序列一样。将实现下面的功能：\n\n - 基本的序列协议—— \\_\\_len\\_\\_ 和 \\_\\_getitem\\_\\_\n - 正确表述拥有很多元素的实例\n - 适当的切片支持，用于生成新的 Vector 实例\n - 综合各个元素的值计算散列值\n - 自定义的格式语言扩展\n - 此外，我们还将通过 __getattr__ 方法实现属性的动态存取，以此取代 Vector2d 使用的只读特性——不过，序列类型通常不会这么做。\n\n\n#### Vector类：用户自定义的序列类型\n\n序列类型的构造方法最好接受可迭代的对象为参数, 首先我们为vector加上这个构造方法\n\n```python  \nfrom array import array\nimport reprlib\nimport math\nclass Vector:\n    typecode = 'd'\n    def __init__(self, components):\n        # 将vector的分量存储在_components中\n        # self._components是迭代器\n        self._components = array(self.typecode, components)\n    def __iter__(self):\n        return iter(self._components)\n    def __repr__(self):\n        # 使用 reprlib.repr() 函数获取 self._components 的有限长度表示形式\n        components = reprlib.repr(self._components)\n        components = components[components.find('['):-1]\n        return 'Vector({})'.format(components)\n    def __str__(self):\n        return str(tuple(self))\n    def __bytes__(self):\n        return (bytes([ord(self.typecode)])+bytes(self._components))\n    def __eq__(self, other):\n        return tuple(self) == tuple(other)\n    def __abs__(self):\n        return math.sqrt(sum(x * x for x in self))\n    def __bool__(self):\n        return bool(abs(self))\n    @classmethod\n    def frombytes(cls, octets):\n        typecode = chr(octets[0])\n        memv = memoryview(octets[1:]).cast(typecode)\n        return cls(memv)\n\n```\n_注： reprlib.repr 的方式需要做些说明。这个函数用于生成大型结构或递归结构的安全表示形式，它会限制输出字符串的长度，用 '...' 表示截断的部分。_    \n\n_调用 repr() 函数的目的是调试，因此绝对不能抛出异常。如果 \\_\\_repr\\_\\_ 方法的实现有问题，那么必须处理，尽量输出有用的内容，让用户能够识别目标对象。_ \n\n#### 协议和鸭子类型\n在 Python 中创建功能完善的序列类型无需使用继承，只需实现符合序列协议的方法。不过，这里说的协议是什么呢？\n在面向对象编程中，协议是非正式的接口，只在文档中定义，在代码中不定义。例如，Python 的序列协议只需要 \\_\\_len\\_\\_ 和 \\_\\_getitem\\_\\_ 两个方法。任何类（如 Spam），只要使用标准的签名和语义实现了这两个方法，就能用在任何期待序列的地方。Spam 是不是哪个类的子类无关紧要，只要提供了所需的方法即可。\n\n_注： 鸭子类型：“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”_\n\n协议是非正式的，没有强制力，因此如果你知道类的具体使用场景，通常只需要实现一个协议的部分。例如，为了支持迭代，只需实现 \\_\\_getitem\\_\\_ 方法，没必要提供 \\_\\_len\\_\\_方法。\n\n#### Vector:可切片的序列\n添加\\_\\_len\\_\\_ 和 \\_\\_getitem\\_\\_方法后就可以实现基本的切片了\n\n```python\nclass Vector:\n    # 省略了很多行\n    # ...\n    def __len__(self):\n        return len(self._components)\n    def __getitem__(self, index):\n        return self._components[index]\n```\n但是这样实现的切片会存在一个问题， 就是切片得到的结果是数组而不是新的Vector类\n\n##### 切片原理\n\n首先通过一个例子查看切片的原理:\n\n```python   \n>>> class MySeq:\n...     def __getitem__(self, index):\n...         return index\n... \n>>> s = MySeq()\n>>> s[1]\n1\n>>> s[1:4]\nslice(1, 4, None)\n>>> s[1:4:2]\nslice(1, 4, 2)\n>>> s[1:4:2, 9]\n(slice(1, 4, 2), 9)\n>>> s[1:4:2, 7:9]\n(slice(1, 4, 2), slice(7, 9, None))\n\n```\n\nslice(1, 4, 2) 表示的是 从1开始, 到4结束, step是2(左开右闭)\n\nslice 有一个有趣的方法indices   \n\n> S.indices(len) -> (start, stop, stride)\n给定长度为 len 的序列，计算 S 表示的扩展切片的起始（start）和结尾（stop）索引，以及步幅（stride）。超出边界的索引会被截掉，这与常规切片的处理方式一\n样。\n\n换句话说，indices 方法开放了内置序列实现的棘手逻辑，用于优雅地处理缺失索引和负数索引，以及长度超过目标序列的切片。这个方法会“整顿”元组，把 start、stop 和stride 都变成非负数，而且都落在指定长度序列的边界内。\n下面举几个例子。假设有个长度为 5 的序列，例如 'ABCDE'：\n\n```python\n>>> slice(None, 10, 2).indices(5)\n(0, 5, 2)\n>>> slice(-3, None, None).indices(5)\n(2, 5, 1)\n```\n'ABCDE'[:10:2] 等同于 'ABCDE'[0:5:2]   \n'ABCDE'[-3:] 等同于 'ABCDE'[2:5:1]\n\n##### 能处理切片的\\_\\_getitem\\_\\_方法\n\n对上文提到的Vector类的\\_\\_getitem\\_\\_方法 做出如下改动:\n\n```python\ndef __getitem__(self, index):\n    cls = type(self)\n    if isinstance(index, slice):\n        return cls(self._components[index])\n    elif isinstance(index, numbers.Integral):   \n        return self._components[index]\n    else:\n        msg = '{cls.__name__} indices must be integers'\n        raise TypeError(msg.format(cls=cls))\n```\n\n传入slice对象时，getitem会将_components 数组的切片构建成一个新的 Vector 实例\n\n#### Vector 类： 动态存取属性\n我们想额外提供下述句法，用于读取向量的前四个分量：\n\n```python\n>>> v = Vector(range(10))\n>>> v.x\n0.0\n>>> v.y, v.z, v.t\n(1.0, 2.0, 3.0)\n```\n\n首先我们要了解一下Python中对象的属性查找机制:\n\n>  简单来说，对 my_obj.x 表达式，Python 会检查 my_obj 实例有没有名为 x 的属性；如果没有，到类（my_obj.__class__）中查找；如果还没有，顺着继承树继续查找。 如果依旧找不到，调用 my_obj 所属类中定义的 __getattr__ 方法，传入 self 和属性名称的字符串形式（如 'x'）。\n\n下面我们为Vector类增加 \\_\\_getattr\\_\\_方法:\n\n```python\nshortcut_names = 'xyzt'\ndef __getattr__(self, name):\n    cls = type(self)\n    if len(name) == 1:\n        pos = cls.shortcut_names.find(name)\n    if 0 <= pos < len(self._components):\n        return self._components[pos]\n    msg = '{.__name__!r} object has no attribute {!r}'\n    raise AttributeError(msg.format(cls, name)\n```\n\n这样的实现可以初步达到我们需要的效果，但是可能会出现下面的矛盾情形：\n\n```python\n>>> v = Vector(range(5))\n>>> v\nVector([0.0, 1.0, 2.0, 3.0, 4.0])\n>>> v.x\n0.0\n>>> v.x = 10\n>>> v.x\n10\n>>> v\nVector([0.0, 1.0, 2.0, 3.0, 4.0])\n```\n\n这里对v.x赋值并没有改变Vector第一分量的值，这样赋值只是让Vector类多了一个名为x的属性。\n\n为了避免这种情况出现我们需要实现一个\\_\\_setattr\\_\\_方法：\n```python\ndef __setattr__(self, name, value):\n    cls = type(self)\n    if len(name) == 1:\n        if name in cls.shortcut_names:\n            error = 'readonly attribute {attr_name!r}'\n        elif name.islower():\n            error = \"can't set attributes 'a' to 'z' in {cls_name!r}\"\n        else:\n            error = ''\n    if error:\n        msg = error.format(cls_name=cls.__name__, attr_name=name)\n        raise AttributeError(msg)\n    super().__setattr__(name, value)\n```\n对单个字符的属性进行单独处理。\n\n有一个问题要特别注意：多数时候，如果实现了 __getattr__ 方法，那么也要定义 __setattr__ 方法，以防对象的行为不一致。\n如果想允许修改分量，可以使用 __setitem__ 方法，支持 v[0] = 1.1 这样的赋值，以及（或者）实现 __setattr__ 方法，支持 v.x = 1.1 这样的赋值\n\n#### Vector类： 散列和快速等值测试\n实现\\_\\_hash\\_\\_方法，加上现有的\\_\\_eq\\_\\_方法\n我们使用^（异或）运算符依次计算各个分量的散列值，像这样：v[0] ^ v[1] ^ v[2]...。需要用到归约函数reduce\n![Figure-10-1](https://raw.githubusercontent.com/aldslvda/blog-images/master/fluent-python-10-1.jpg)\n\n下面提供了三种计算累计异或的方式：\n```python\n>>> n = 0\n>>> for i in range(1, 6):\n...     n ^= i\n...\n>>> n\n1 >>> import functools\n>>> functools.reduce(lambda a, b: a^b, range(6))\n1 >>> import operator\n>>> functools.reduce(operator.xor, range(6))\n1\n```\n\n显然第三种比较简洁， 本书的第五章讲过， 尽量避免lambda表达式的使用。\n\n增加的\\_\\_hash\\_\\_方法如下:\n\n```python\ndef __hash__(self):\n    hashes = (hash(x) for x in self._components)\n    return functools.reduce(operator.xor, hashes, 0)\n```\n这是一种映射归约运算\n![Figure-10-2](https://raw.githubusercontent.com/aldslvda/blog-images/master/fluent-python-10-2.jpg)\n> 映射归约：把函数应用到各个元素上，生成一个新序列（映射，map），然后计算聚合值（归约，reduce）\n\n为了提高比较的效率修改\\_\\_eq\\_\\_方法(两种实现方式逻辑一样)：\n```python\ndef __eq__(self, other):\n    if len(self) != len(other):\n        return False\n    for a, b in zip(self, other):\n        if a != b:\n            return False\n    return True\n\ndef __eq__(self, other):\n    return len(self) == len(other) and all(a == b for a, b in zip(self, other))\n```\n\n#### 格式化\nVector 类的 \\_\\_format\\_\\_ 方法与 Vector2d 类的相似，但是不使用极坐标，而使用球面坐标（也叫超球面坐标），因为 Vector 类支持 n 个维度，而超过四维后，球体变成了“超球体”(n维球体)。 因此，我们会把自定义的格式后缀由 'p' 变成 'h'\n下面是格式化的实现：\n\n```python\nimport itertools\ndef angle(self, n):\n    r = math.sqrt(sum(x * x for x in self[n:]))\n    a = math.atan2(r, self[n-1])\n    if (n == len(self) - 1) and (self[-1] < 0):\n        return math.pi * 2 - a\n    else:\n        return a\ndef angles(self):\n    return (self.angle(n) for n in range(1, len(self)))\ndef __format__(self, fmt_spec=''):\n    if fmt_spec.endswith('h'): # 超球面坐标\n        fmt_spec = fmt_spec[:-1]\n        coords = itertools.chain([abs(self)],\n        self.angles())\n        outer_fmt = '<{}>'\n    else:\n        coords = self\n        outer_fmt = '({})'\n        components = (format(c, fmt_spec) for c in coords)\n    return outer_fmt.format(', '.join(components))\n```\n\n#### 小结\n\n我们经常分析 Python 标准对象的行为，然后进行模仿，让 Vector 的行为符合 Python 风格。\n\n\n\n","slug":"fluent-python-10","published":1,"updated":"2019-04-25T01:27:25.107Z","comments":1,"layout":"post","link":"","_id":"cjuw5c6g90039dhyfcraxn4wk","content":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-10-Sequence-Hacking-Hashing-and-Slicing\"><a href=\"#Chapter-10-Sequence-Hacking-Hashing-and-Slicing\" class=\"headerlink\" title=\"Chapter 10. Sequence Hacking, Hashing, and Slicing\"></a>Chapter 10. Sequence Hacking, Hashing, and Slicing</h3><h3 id=\"第十章-序列的修改、散列和切片\"><a href=\"#第十章-序列的修改、散列和切片\" class=\"headerlink\" title=\"第十章: 序列的修改、散列和切片\"></a>第十章: 序列的修改、散列和切片</h3><p> 这章以上章的Vector2d为基础，定义多维向量，这个类的行为和Python标准的扁平序列一样。将实现下面的功能：</p>\n<ul>\n<li>基本的序列协议—— __len__ 和 __getitem__</li>\n<li>正确表述拥有很多元素的实例</li>\n<li>适当的切片支持，用于生成新的 Vector 实例</li>\n<li>综合各个元素的值计算散列值</li>\n<li>自定义的格式语言扩展</li>\n<li>此外，我们还将通过 <strong>getattr</strong> 方法实现属性的动态存取，以此取代 Vector2d 使用的只读特性——不过，序列类型通常不会这么做。</li>\n</ul>\n<h4 id=\"Vector类：用户自定义的序列类型\"><a href=\"#Vector类：用户自定义的序列类型\" class=\"headerlink\" title=\"Vector类：用户自定义的序列类型\"></a>Vector类：用户自定义的序列类型</h4><p>序列类型的构造方法最好接受可迭代的对象为参数, 首先我们为vector加上这个构造方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> array <span class=\"keyword\">import</span> array</span><br><span class=\"line\"><span class=\"keyword\">import</span> reprlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span>:</span></span><br><span class=\"line\">    typecode = <span class=\"string\">'d'</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, components)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 将vector的分量存储在_components中</span></span><br><span class=\"line\">        <span class=\"comment\"># self._components是迭代器</span></span><br><span class=\"line\">        self._components = array(self.typecode, components)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> iter(self._components)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 使用 reprlib.repr() 函数获取 self._components 的有限长度表示形式</span></span><br><span class=\"line\">        components = reprlib.repr(self._components)</span><br><span class=\"line\">        components = components[components.find(<span class=\"string\">'['</span>):<span class=\"number\">-1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Vector(&#123;&#125;)'</span>.format(components)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> str(tuple(self))</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__bytes__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (bytes([ord(self.typecode)])+bytes(self._components))</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__eq__</span><span class=\"params\">(self, other)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> tuple(self) == tuple(other)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__abs__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> math.sqrt(sum(x * x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> self))</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__bool__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> bool(abs(self))</span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">frombytes</span><span class=\"params\">(cls, octets)</span>:</span></span><br><span class=\"line\">        typecode = chr(octets[<span class=\"number\">0</span>])</span><br><span class=\"line\">        memv = memoryview(octets[<span class=\"number\">1</span>:]).cast(typecode)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls(memv)</span><br></pre></td></tr></table></figure>\n<p><em>注： reprlib.repr 的方式需要做些说明。这个函数用于生成大型结构或递归结构的安全表示形式，它会限制输出字符串的长度，用 ‘…’ 表示截断的部分。</em>    </p>\n<p><em>调用 repr() 函数的目的是调试，因此绝对不能抛出异常。如果 \\</em>_repr__ 方法的实现有问题，那么必须处理，尽量输出有用的内容，让用户能够识别目标对象。_ </p>\n<h4 id=\"协议和鸭子类型\"><a href=\"#协议和鸭子类型\" class=\"headerlink\" title=\"协议和鸭子类型\"></a>协议和鸭子类型</h4><p>在 Python 中创建功能完善的序列类型无需使用继承，只需实现符合序列协议的方法。不过，这里说的协议是什么呢？<br>在面向对象编程中，协议是非正式的接口，只在文档中定义，在代码中不定义。例如，Python 的序列协议只需要 __len__ 和 __getitem__ 两个方法。任何类（如 Spam），只要使用标准的签名和语义实现了这两个方法，就能用在任何期待序列的地方。Spam 是不是哪个类的子类无关紧要，只要提供了所需的方法即可。</p>\n<p><em>注： 鸭子类型：“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”</em></p>\n<p>协议是非正式的，没有强制力，因此如果你知道类的具体使用场景，通常只需要实现一个协议的部分。例如，为了支持迭代，只需实现 __getitem__ 方法，没必要提供 __len__方法。</p>\n<h4 id=\"Vector-可切片的序列\"><a href=\"#Vector-可切片的序列\" class=\"headerlink\" title=\"Vector:可切片的序列\"></a>Vector:可切片的序列</h4><p>添加__len__ 和 __getitem__方法后就可以实现基本的切片了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 省略了很多行</span></span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__len__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(self._components)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, index)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._components[index]</span><br></pre></td></tr></table></figure>\n<p>但是这样实现的切片会存在一个问题， 就是切片得到的结果是数组而不是新的Vector类</p>\n<h5 id=\"切片原理\"><a href=\"#切片原理\" class=\"headerlink\" title=\"切片原理\"></a>切片原理</h5><p>首先通过一个例子查看切片的原理:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySeq</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, index)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        <span class=\"keyword\">return</span> index</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = MySeq()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s[<span class=\"number\">1</span>:<span class=\"number\">4</span>]</span><br><span class=\"line\">slice(<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s[<span class=\"number\">1</span>:<span class=\"number\">4</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\">slice(<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s[<span class=\"number\">1</span>:<span class=\"number\">4</span>:<span class=\"number\">2</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">(slice(<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>), <span class=\"number\">9</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s[<span class=\"number\">1</span>:<span class=\"number\">4</span>:<span class=\"number\">2</span>, <span class=\"number\">7</span>:<span class=\"number\">9</span>]</span><br><span class=\"line\">(slice(<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>), slice(<span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"literal\">None</span>))</span><br></pre></td></tr></table></figure>\n<p>slice(1, 4, 2) 表示的是 从1开始, 到4结束, step是2(左开右闭)</p>\n<p>slice 有一个有趣的方法indices   </p>\n<blockquote>\n<p>S.indices(len) -&gt; (start, stop, stride)<br>给定长度为 len 的序列，计算 S 表示的扩展切片的起始（start）和结尾（stop）索引，以及步幅（stride）。超出边界的索引会被截掉，这与常规切片的处理方式一<br>样。</p>\n</blockquote>\n<p>换句话说，indices 方法开放了内置序列实现的棘手逻辑，用于优雅地处理缺失索引和负数索引，以及长度超过目标序列的切片。这个方法会“整顿”元组，把 start、stop 和stride 都变成非负数，而且都落在指定长度序列的边界内。<br>下面举几个例子。假设有个长度为 5 的序列，例如 ‘ABCDE’：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>slice(<span class=\"literal\">None</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>).indices(<span class=\"number\">5</span>)</span><br><span class=\"line\">(<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>slice(<span class=\"number\">-3</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>).indices(<span class=\"number\">5</span>)</span><br><span class=\"line\">(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>‘ABCDE’[:10:2] 等同于 ‘ABCDE’[0:5:2]<br>‘ABCDE’[-3:] 等同于 ‘ABCDE’[2:5:1]</p>\n<h5 id=\"能处理切片的-getitem-方法\"><a href=\"#能处理切片的-getitem-方法\" class=\"headerlink\" title=\"能处理切片的__getitem__方法\"></a>能处理切片的__getitem__方法</h5><p>对上文提到的Vector类的__getitem__方法 做出如下改动:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, index)</span>:</span></span><br><span class=\"line\">    cls = type(self)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> isinstance(index, slice):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls(self._components[index])</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> isinstance(index, numbers.Integral):   </span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._components[index]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        msg = <span class=\"string\">'&#123;cls.__name__&#125; indices must be integers'</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> TypeError(msg.format(cls=cls))</span><br></pre></td></tr></table></figure>\n<p>传入slice对象时，getitem会将_components 数组的切片构建成一个新的 Vector 实例</p>\n<h4 id=\"Vector-类：-动态存取属性\"><a href=\"#Vector-类：-动态存取属性\" class=\"headerlink\" title=\"Vector 类： 动态存取属性\"></a>Vector 类： 动态存取属性</h4><p>我们想额外提供下述句法，用于读取向量的前四个分量：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v = Vector(range(<span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v.x</span><br><span class=\"line\"><span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v.y, v.z, v.t</span><br><span class=\"line\">(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>)</span><br></pre></td></tr></table></figure>\n<p>首先我们要了解一下Python中对象的属性查找机制:</p>\n<blockquote>\n<p> 简单来说，对 my_obj.x 表达式，Python 会检查 my_obj 实例有没有名为 x 的属性；如果没有，到类（my_obj.<strong>class</strong>）中查找；如果还没有，顺着继承树继续查找。 如果依旧找不到，调用 my_obj 所属类中定义的 <strong>getattr</strong> 方法，传入 self 和属性名称的字符串形式（如 ‘x’）。</p>\n</blockquote>\n<p>下面我们为Vector类增加 __getattr__方法:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shortcut_names = <span class=\"string\">'xyzt'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">    cls = type(self)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(name) == <span class=\"number\">1</span>:</span><br><span class=\"line\">        pos = cls.shortcut_names.find(name)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;= pos &lt; len(self._components):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._components[pos]</span><br><span class=\"line\">    msg = <span class=\"string\">'&#123;.__name__!r&#125; object has no attribute &#123;!r&#125;'</span></span><br><span class=\"line\">    <span class=\"keyword\">raise</span> AttributeError(msg.format(cls, name)</span><br></pre></td></tr></table></figure>\n<p>这样的实现可以初步达到我们需要的效果，但是可能会出现下面的矛盾情形：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v = Vector(range(<span class=\"number\">5</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v</span><br><span class=\"line\">Vector([<span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>, <span class=\"number\">4.0</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v.x</span><br><span class=\"line\"><span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v.x = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v.x</span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v</span><br><span class=\"line\">Vector([<span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>, <span class=\"number\">4.0</span>])</span><br></pre></td></tr></table></figure>\n<p>这里对v.x赋值并没有改变Vector第一分量的值，这样赋值只是让Vector类多了一个名为x的属性。</p>\n<p>为了避免这种情况出现我们需要实现一个__setattr__方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span><span class=\"params\">(self, name, value)</span>:</span></span><br><span class=\"line\">    cls = type(self)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(name) == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> name <span class=\"keyword\">in</span> cls.shortcut_names:</span><br><span class=\"line\">            error = <span class=\"string\">'readonly attribute &#123;attr_name!r&#125;'</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> name.islower():</span><br><span class=\"line\">            error = <span class=\"string\">\"can't set attributes 'a' to 'z' in &#123;cls_name!r&#125;\"</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            error = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> error:</span><br><span class=\"line\">        msg = error.format(cls_name=cls.__name__, attr_name=name)</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> AttributeError(msg)</span><br><span class=\"line\">    super().__setattr__(name, value)</span><br></pre></td></tr></table></figure></p>\n<p>对单个字符的属性进行单独处理。</p>\n<p>有一个问题要特别注意：多数时候，如果实现了 <strong>getattr</strong> 方法，那么也要定义 <strong>setattr</strong> 方法，以防对象的行为不一致。<br>如果想允许修改分量，可以使用 <strong>setitem</strong> 方法，支持 v[0] = 1.1 这样的赋值，以及（或者）实现 <strong>setattr</strong> 方法，支持 v.x = 1.1 这样的赋值</p>\n<h4 id=\"Vector类：-散列和快速等值测试\"><a href=\"#Vector类：-散列和快速等值测试\" class=\"headerlink\" title=\"Vector类： 散列和快速等值测试\"></a>Vector类： 散列和快速等值测试</h4><p>实现__hash__方法，加上现有的__eq__方法<br>我们使用^（异或）运算符依次计算各个分量的散列值，像这样：v[0] ^ v[1] ^ v[2]…。需要用到归约函数reduce<br><img src=\"https://raw.githubusercontent.com/aldslvda/blog-images/master/fluent-python-10-1.jpg\" alt=\"Figure-10-1\"></p>\n<p>下面提供了三种计算累计异或的方式：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">6</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    n ^= i</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n</span><br><span class=\"line\"><span class=\"number\">1</span> &gt;&gt;&gt; <span class=\"keyword\">import</span> functools</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>functools.reduce(<span class=\"keyword\">lambda</span> a, b: a^b, range(<span class=\"number\">6</span>))</span><br><span class=\"line\"><span class=\"number\">1</span> &gt;&gt;&gt; <span class=\"keyword\">import</span> operator</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>functools.reduce(operator.xor, range(<span class=\"number\">6</span>))</span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<p>显然第三种比较简洁， 本书的第五章讲过， 尽量避免lambda表达式的使用。</p>\n<p>增加的__hash__方法如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__hash__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    hashes = (hash(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> self._components)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> functools.reduce(operator.xor, hashes, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>这是一种映射归约运算<br><img src=\"https://raw.githubusercontent.com/aldslvda/blog-images/master/fluent-python-10-2.jpg\" alt=\"Figure-10-2\"></p>\n<blockquote>\n<p>映射归约：把函数应用到各个元素上，生成一个新序列（映射，map），然后计算聚合值（归约，reduce）</p>\n</blockquote>\n<p>为了提高比较的效率修改__eq__方法(两种实现方式逻辑一样)：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__eq__</span><span class=\"params\">(self, other)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(self) != len(other):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> zip(self, other):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> a != b:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__eq__</span><span class=\"params\">(self, other)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> len(self) == len(other) <span class=\"keyword\">and</span> all(a == b <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> zip(self, other))</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"格式化\"><a href=\"#格式化\" class=\"headerlink\" title=\"格式化\"></a>格式化</h4><p>Vector 类的 __format__ 方法与 Vector2d 类的相似，但是不使用极坐标，而使用球面坐标（也叫超球面坐标），因为 Vector 类支持 n 个维度，而超过四维后，球体变成了“超球体”(n维球体)。 因此，我们会把自定义的格式后缀由 ‘p’ 变成 ‘h’<br>下面是格式化的实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> itertools</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">angle</span><span class=\"params\">(self, n)</span>:</span></span><br><span class=\"line\">    r = math.sqrt(sum(x * x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> self[n:]))</span><br><span class=\"line\">    a = math.atan2(r, self[n<span class=\"number\">-1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == len(self) - <span class=\"number\">1</span>) <span class=\"keyword\">and</span> (self[<span class=\"number\">-1</span>] &lt; <span class=\"number\">0</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> math.pi * <span class=\"number\">2</span> - a</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">angles</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (self.angle(n) <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(self)))</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__format__</span><span class=\"params\">(self, fmt_spec=<span class=\"string\">''</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> fmt_spec.endswith(<span class=\"string\">'h'</span>): <span class=\"comment\"># 超球面坐标</span></span><br><span class=\"line\">        fmt_spec = fmt_spec[:<span class=\"number\">-1</span>]</span><br><span class=\"line\">        coords = itertools.chain([abs(self)],</span><br><span class=\"line\">        self.angles())</span><br><span class=\"line\">        outer_fmt = <span class=\"string\">'&lt;&#123;&#125;&gt;'</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        coords = self</span><br><span class=\"line\">        outer_fmt = <span class=\"string\">'(&#123;&#125;)'</span></span><br><span class=\"line\">        components = (format(c, fmt_spec) <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> coords)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> outer_fmt.format(<span class=\"string\">', '</span>.join(components))</span><br></pre></td></tr></table></figure>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>我们经常分析 Python 标准对象的行为，然后进行模仿，让 Vector 的行为符合 Python 风格。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-10-Sequence-Hacking-Hashing-and-Slicing\"><a href=\"#Chapter-10-Sequence-Hacking-Hashing-and-Slicing\" class=\"headerlink\" title=\"Chapter 10. Sequence Hacking, Hashing, and Slicing\"></a>Chapter 10. Sequence Hacking, Hashing, and Slicing</h3><h3 id=\"第十章-序列的修改、散列和切片\"><a href=\"#第十章-序列的修改、散列和切片\" class=\"headerlink\" title=\"第十章: 序列的修改、散列和切片\"></a>第十章: 序列的修改、散列和切片</h3><p> 这章以上章的Vector2d为基础，定义多维向量，这个类的行为和Python标准的扁平序列一样。将实现下面的功能：</p>\n<ul>\n<li>基本的序列协议—— __len__ 和 __getitem__</li>\n<li>正确表述拥有很多元素的实例</li>\n<li>适当的切片支持，用于生成新的 Vector 实例</li>\n<li>综合各个元素的值计算散列值</li>\n<li>自定义的格式语言扩展</li>\n<li>此外，我们还将通过 <strong>getattr</strong> 方法实现属性的动态存取，以此取代 Vector2d 使用的只读特性——不过，序列类型通常不会这么做。</li>\n</ul>\n<h4 id=\"Vector类：用户自定义的序列类型\"><a href=\"#Vector类：用户自定义的序列类型\" class=\"headerlink\" title=\"Vector类：用户自定义的序列类型\"></a>Vector类：用户自定义的序列类型</h4><p>序列类型的构造方法最好接受可迭代的对象为参数, 首先我们为vector加上这个构造方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> array <span class=\"keyword\">import</span> array</span><br><span class=\"line\"><span class=\"keyword\">import</span> reprlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span>:</span></span><br><span class=\"line\">    typecode = <span class=\"string\">'d'</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, components)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 将vector的分量存储在_components中</span></span><br><span class=\"line\">        <span class=\"comment\"># self._components是迭代器</span></span><br><span class=\"line\">        self._components = array(self.typecode, components)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> iter(self._components)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 使用 reprlib.repr() 函数获取 self._components 的有限长度表示形式</span></span><br><span class=\"line\">        components = reprlib.repr(self._components)</span><br><span class=\"line\">        components = components[components.find(<span class=\"string\">'['</span>):<span class=\"number\">-1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Vector(&#123;&#125;)'</span>.format(components)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> str(tuple(self))</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__bytes__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (bytes([ord(self.typecode)])+bytes(self._components))</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__eq__</span><span class=\"params\">(self, other)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> tuple(self) == tuple(other)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__abs__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> math.sqrt(sum(x * x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> self))</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__bool__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> bool(abs(self))</span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">frombytes</span><span class=\"params\">(cls, octets)</span>:</span></span><br><span class=\"line\">        typecode = chr(octets[<span class=\"number\">0</span>])</span><br><span class=\"line\">        memv = memoryview(octets[<span class=\"number\">1</span>:]).cast(typecode)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls(memv)</span><br></pre></td></tr></table></figure>\n<p><em>注： reprlib.repr 的方式需要做些说明。这个函数用于生成大型结构或递归结构的安全表示形式，它会限制输出字符串的长度，用 ‘…’ 表示截断的部分。</em>    </p>\n<p><em>调用 repr() 函数的目的是调试，因此绝对不能抛出异常。如果 \\</em>_repr__ 方法的实现有问题，那么必须处理，尽量输出有用的内容，让用户能够识别目标对象。_ </p>\n<h4 id=\"协议和鸭子类型\"><a href=\"#协议和鸭子类型\" class=\"headerlink\" title=\"协议和鸭子类型\"></a>协议和鸭子类型</h4><p>在 Python 中创建功能完善的序列类型无需使用继承，只需实现符合序列协议的方法。不过，这里说的协议是什么呢？<br>在面向对象编程中，协议是非正式的接口，只在文档中定义，在代码中不定义。例如，Python 的序列协议只需要 __len__ 和 __getitem__ 两个方法。任何类（如 Spam），只要使用标准的签名和语义实现了这两个方法，就能用在任何期待序列的地方。Spam 是不是哪个类的子类无关紧要，只要提供了所需的方法即可。</p>\n<p><em>注： 鸭子类型：“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”</em></p>\n<p>协议是非正式的，没有强制力，因此如果你知道类的具体使用场景，通常只需要实现一个协议的部分。例如，为了支持迭代，只需实现 __getitem__ 方法，没必要提供 __len__方法。</p>\n<h4 id=\"Vector-可切片的序列\"><a href=\"#Vector-可切片的序列\" class=\"headerlink\" title=\"Vector:可切片的序列\"></a>Vector:可切片的序列</h4><p>添加__len__ 和 __getitem__方法后就可以实现基本的切片了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 省略了很多行</span></span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__len__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(self._components)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, index)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._components[index]</span><br></pre></td></tr></table></figure>\n<p>但是这样实现的切片会存在一个问题， 就是切片得到的结果是数组而不是新的Vector类</p>\n<h5 id=\"切片原理\"><a href=\"#切片原理\" class=\"headerlink\" title=\"切片原理\"></a>切片原理</h5><p>首先通过一个例子查看切片的原理:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySeq</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, index)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        <span class=\"keyword\">return</span> index</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = MySeq()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s[<span class=\"number\">1</span>:<span class=\"number\">4</span>]</span><br><span class=\"line\">slice(<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s[<span class=\"number\">1</span>:<span class=\"number\">4</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\">slice(<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s[<span class=\"number\">1</span>:<span class=\"number\">4</span>:<span class=\"number\">2</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">(slice(<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>), <span class=\"number\">9</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s[<span class=\"number\">1</span>:<span class=\"number\">4</span>:<span class=\"number\">2</span>, <span class=\"number\">7</span>:<span class=\"number\">9</span>]</span><br><span class=\"line\">(slice(<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>), slice(<span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"literal\">None</span>))</span><br></pre></td></tr></table></figure>\n<p>slice(1, 4, 2) 表示的是 从1开始, 到4结束, step是2(左开右闭)</p>\n<p>slice 有一个有趣的方法indices   </p>\n<blockquote>\n<p>S.indices(len) -&gt; (start, stop, stride)<br>给定长度为 len 的序列，计算 S 表示的扩展切片的起始（start）和结尾（stop）索引，以及步幅（stride）。超出边界的索引会被截掉，这与常规切片的处理方式一<br>样。</p>\n</blockquote>\n<p>换句话说，indices 方法开放了内置序列实现的棘手逻辑，用于优雅地处理缺失索引和负数索引，以及长度超过目标序列的切片。这个方法会“整顿”元组，把 start、stop 和stride 都变成非负数，而且都落在指定长度序列的边界内。<br>下面举几个例子。假设有个长度为 5 的序列，例如 ‘ABCDE’：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>slice(<span class=\"literal\">None</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>).indices(<span class=\"number\">5</span>)</span><br><span class=\"line\">(<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>slice(<span class=\"number\">-3</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>).indices(<span class=\"number\">5</span>)</span><br><span class=\"line\">(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>‘ABCDE’[:10:2] 等同于 ‘ABCDE’[0:5:2]<br>‘ABCDE’[-3:] 等同于 ‘ABCDE’[2:5:1]</p>\n<h5 id=\"能处理切片的-getitem-方法\"><a href=\"#能处理切片的-getitem-方法\" class=\"headerlink\" title=\"能处理切片的__getitem__方法\"></a>能处理切片的__getitem__方法</h5><p>对上文提到的Vector类的__getitem__方法 做出如下改动:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, index)</span>:</span></span><br><span class=\"line\">    cls = type(self)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> isinstance(index, slice):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls(self._components[index])</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> isinstance(index, numbers.Integral):   </span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._components[index]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        msg = <span class=\"string\">'&#123;cls.__name__&#125; indices must be integers'</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> TypeError(msg.format(cls=cls))</span><br></pre></td></tr></table></figure>\n<p>传入slice对象时，getitem会将_components 数组的切片构建成一个新的 Vector 实例</p>\n<h4 id=\"Vector-类：-动态存取属性\"><a href=\"#Vector-类：-动态存取属性\" class=\"headerlink\" title=\"Vector 类： 动态存取属性\"></a>Vector 类： 动态存取属性</h4><p>我们想额外提供下述句法，用于读取向量的前四个分量：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v = Vector(range(<span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v.x</span><br><span class=\"line\"><span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v.y, v.z, v.t</span><br><span class=\"line\">(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>)</span><br></pre></td></tr></table></figure>\n<p>首先我们要了解一下Python中对象的属性查找机制:</p>\n<blockquote>\n<p> 简单来说，对 my_obj.x 表达式，Python 会检查 my_obj 实例有没有名为 x 的属性；如果没有，到类（my_obj.<strong>class</strong>）中查找；如果还没有，顺着继承树继续查找。 如果依旧找不到，调用 my_obj 所属类中定义的 <strong>getattr</strong> 方法，传入 self 和属性名称的字符串形式（如 ‘x’）。</p>\n</blockquote>\n<p>下面我们为Vector类增加 __getattr__方法:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shortcut_names = <span class=\"string\">'xyzt'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">    cls = type(self)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(name) == <span class=\"number\">1</span>:</span><br><span class=\"line\">        pos = cls.shortcut_names.find(name)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;= pos &lt; len(self._components):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._components[pos]</span><br><span class=\"line\">    msg = <span class=\"string\">'&#123;.__name__!r&#125; object has no attribute &#123;!r&#125;'</span></span><br><span class=\"line\">    <span class=\"keyword\">raise</span> AttributeError(msg.format(cls, name)</span><br></pre></td></tr></table></figure>\n<p>这样的实现可以初步达到我们需要的效果，但是可能会出现下面的矛盾情形：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v = Vector(range(<span class=\"number\">5</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v</span><br><span class=\"line\">Vector([<span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>, <span class=\"number\">4.0</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v.x</span><br><span class=\"line\"><span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v.x = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v.x</span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v</span><br><span class=\"line\">Vector([<span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>, <span class=\"number\">4.0</span>])</span><br></pre></td></tr></table></figure>\n<p>这里对v.x赋值并没有改变Vector第一分量的值，这样赋值只是让Vector类多了一个名为x的属性。</p>\n<p>为了避免这种情况出现我们需要实现一个__setattr__方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span><span class=\"params\">(self, name, value)</span>:</span></span><br><span class=\"line\">    cls = type(self)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(name) == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> name <span class=\"keyword\">in</span> cls.shortcut_names:</span><br><span class=\"line\">            error = <span class=\"string\">'readonly attribute &#123;attr_name!r&#125;'</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> name.islower():</span><br><span class=\"line\">            error = <span class=\"string\">\"can't set attributes 'a' to 'z' in &#123;cls_name!r&#125;\"</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            error = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> error:</span><br><span class=\"line\">        msg = error.format(cls_name=cls.__name__, attr_name=name)</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> AttributeError(msg)</span><br><span class=\"line\">    super().__setattr__(name, value)</span><br></pre></td></tr></table></figure></p>\n<p>对单个字符的属性进行单独处理。</p>\n<p>有一个问题要特别注意：多数时候，如果实现了 <strong>getattr</strong> 方法，那么也要定义 <strong>setattr</strong> 方法，以防对象的行为不一致。<br>如果想允许修改分量，可以使用 <strong>setitem</strong> 方法，支持 v[0] = 1.1 这样的赋值，以及（或者）实现 <strong>setattr</strong> 方法，支持 v.x = 1.1 这样的赋值</p>\n<h4 id=\"Vector类：-散列和快速等值测试\"><a href=\"#Vector类：-散列和快速等值测试\" class=\"headerlink\" title=\"Vector类： 散列和快速等值测试\"></a>Vector类： 散列和快速等值测试</h4><p>实现__hash__方法，加上现有的__eq__方法<br>我们使用^（异或）运算符依次计算各个分量的散列值，像这样：v[0] ^ v[1] ^ v[2]…。需要用到归约函数reduce<br><img src=\"https://raw.githubusercontent.com/aldslvda/blog-images/master/fluent-python-10-1.jpg\" alt=\"Figure-10-1\"></p>\n<p>下面提供了三种计算累计异或的方式：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">6</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    n ^= i</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n</span><br><span class=\"line\"><span class=\"number\">1</span> &gt;&gt;&gt; <span class=\"keyword\">import</span> functools</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>functools.reduce(<span class=\"keyword\">lambda</span> a, b: a^b, range(<span class=\"number\">6</span>))</span><br><span class=\"line\"><span class=\"number\">1</span> &gt;&gt;&gt; <span class=\"keyword\">import</span> operator</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>functools.reduce(operator.xor, range(<span class=\"number\">6</span>))</span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<p>显然第三种比较简洁， 本书的第五章讲过， 尽量避免lambda表达式的使用。</p>\n<p>增加的__hash__方法如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__hash__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    hashes = (hash(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> self._components)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> functools.reduce(operator.xor, hashes, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>这是一种映射归约运算<br><img src=\"https://raw.githubusercontent.com/aldslvda/blog-images/master/fluent-python-10-2.jpg\" alt=\"Figure-10-2\"></p>\n<blockquote>\n<p>映射归约：把函数应用到各个元素上，生成一个新序列（映射，map），然后计算聚合值（归约，reduce）</p>\n</blockquote>\n<p>为了提高比较的效率修改__eq__方法(两种实现方式逻辑一样)：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__eq__</span><span class=\"params\">(self, other)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(self) != len(other):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> zip(self, other):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> a != b:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__eq__</span><span class=\"params\">(self, other)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> len(self) == len(other) <span class=\"keyword\">and</span> all(a == b <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> zip(self, other))</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"格式化\"><a href=\"#格式化\" class=\"headerlink\" title=\"格式化\"></a>格式化</h4><p>Vector 类的 __format__ 方法与 Vector2d 类的相似，但是不使用极坐标，而使用球面坐标（也叫超球面坐标），因为 Vector 类支持 n 个维度，而超过四维后，球体变成了“超球体”(n维球体)。 因此，我们会把自定义的格式后缀由 ‘p’ 变成 ‘h’<br>下面是格式化的实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> itertools</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">angle</span><span class=\"params\">(self, n)</span>:</span></span><br><span class=\"line\">    r = math.sqrt(sum(x * x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> self[n:]))</span><br><span class=\"line\">    a = math.atan2(r, self[n<span class=\"number\">-1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == len(self) - <span class=\"number\">1</span>) <span class=\"keyword\">and</span> (self[<span class=\"number\">-1</span>] &lt; <span class=\"number\">0</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> math.pi * <span class=\"number\">2</span> - a</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">angles</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (self.angle(n) <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(self)))</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__format__</span><span class=\"params\">(self, fmt_spec=<span class=\"string\">''</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> fmt_spec.endswith(<span class=\"string\">'h'</span>): <span class=\"comment\"># 超球面坐标</span></span><br><span class=\"line\">        fmt_spec = fmt_spec[:<span class=\"number\">-1</span>]</span><br><span class=\"line\">        coords = itertools.chain([abs(self)],</span><br><span class=\"line\">        self.angles())</span><br><span class=\"line\">        outer_fmt = <span class=\"string\">'&lt;&#123;&#125;&gt;'</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        coords = self</span><br><span class=\"line\">        outer_fmt = <span class=\"string\">'(&#123;&#125;)'</span></span><br><span class=\"line\">        components = (format(c, fmt_spec) <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> coords)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> outer_fmt.format(<span class=\"string\">', '</span>.join(components))</span><br></pre></td></tr></table></figure>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>我们经常分析 Python 标准对象的行为，然后进行模仿，让 Vector 的行为符合 Python 风格。</p>\n"},{"title":"fluent python 第三章小记","date":"2017-11-23T13:25:19.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true"],"toc":true,"comment":true,"_content":"\n## Fluent Python ##\n### Chapter 3. Dictionaries and Sets ###\n### 字典和集合 ###\ndict 类型不但在各种程序里广泛使用，它也是 Python 语言的基石。模块的命名空间、实\n例的属性和函数的关键字参数中都可以看到字典的身影。跟它有关的内置函数都在\n\\_\\_builtins\\_\\_.\\_\\_dict\\_\\_模块中。     \nPython 对字典做了高度优化，python字典性能优秀的原因是散列表。   \n集合同样依赖散列表。   \n\n*有部分翻译存在疑问，用括号标注原英文正文。\n\n#### 泛映射类型 ####\n![Figure-3-1](https://raw.githubusercontent.com/aldslvda/blog-images/master/fluent-python-3.1.png)\ncollections.abc 模块中有 Mapping 和 MutableMapping 这两个抽象基类,它们的作\n用是为 dict 和其他类似的类型定义形式接口。   \n非抽象映射类型一般不会直接继承这些抽象基类，它们会直接对 dict 或是collections.User.Dict 进行扩展。这些抽象基类的主要作用是作为**形式化的文档**。\n\n标准库里的所有映射类型都是利用 dict 来实现的，因只有**可散列的数据类型**才能用作这些映射里的键。\n##### 可散列的数据类型\n如果一个对象是可散列的，那么在这个对象的生命周期中，它的散列值是不变的，而且这个对象需要实现 \\_\\_hash\\_\\_() 方法。另外可散列对象还要有\\_\\_eq\\_\\_() 方法，这样才能跟其他键做比较。\n\nPython文档[https://docs.python.org/3/glossary.html#term-hashable](https://docs.python.org/3/glossary.html#term-hashable)中提到，所有不可变的类型都是可散列的，但元组是一个例外，元组可散列的条件是元组的元素都可以散列。    \n一个对象可散列的条件是：如果一个对象实现了\\_\\_eq\\_\\_方法，并且在方法中用到了这个对象的内部状态的话，那么只有当所有这些内部状态都是不可变的情况下，这个对象才是可散列的。\n##### 创建字典的不同方式\n\n```python\n>>> a = dict(one=1, two=2, three=3)\n>>> b = {'one': 1, 'two': 2, 'three': 3}\n>>> c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))\n>>> d = dict([('two', 2), ('one', 1), ('three', 3)])\n>>> e = dict({'three': 3, 'one': 1, 'two': 2})\n>>> a == b == c == d == e\nTrue\n```\n除此之外，字典推导也能创建一个字典, 和列表推导类似\n\n```python\n>>> DIAL_CODES = [ \n...  (86, 'China'),\n...  (91, 'India'),\n...  (1, 'United States'),\n...  (62, 'Indonesia'),\n...  (55, 'Brazil'),\n...  (92, 'Pakistan'),\n...  (880, 'Bangladesh'),\n...  (234, 'Nigeria'),\n...  (7, 'Russia'),\n...  (81, 'Japan'),\n... ]\n>>> country_code = {country: code for code, country in DIAL_CODES}\n\n```\n\n#### 常用的映射方法 ####\n\n这里讲到一个能让程序更加高效的方法 setdefault()，能节省很多次的键查询。\n\n例如：   \n2.1:\n   \n```python\nmy_dict.setdefault(key, []).append(new_value)\n\n```\n2.2  \n\n```python\nif key not in my_dict:\n\tmy_dict[key] = []\nmy_dict[key].append(new_value)\n\n```\n\n操作2.1和2.2达到的效果是一样的，但是2.1只用了一次键查询，而2.2会用到2-3次(是否有key存在)\n\n#### 映射的弹性键查询(flexible key lookup) ####\n\n场景：为了方便起见，就算某个键在映射里不存在，我们也希望在通过这个键读取值的时候能得到一个默认值。有两个方法能实现：使用defaultdict类或者自己实现一个类继承dict,实现\\_\\_missing\\_\\_方法。\n##### defaultdict #####\n\n有一个新字典dd = defaultdict(list),当使用表达式dd[key]而key在defaultdict中不存在的话，就会用list()建立新列表作为值，key作为键放入dd中，然后返回这个列表的引用。   \n这个用来生成默认值的可调用对象放在default_factory这个实例属性中。\n\n##### 特殊方法 \\_\\_missing\\_\\_() #####\n\n当一个继承了dict的类实现了\\_\\_missing\\_\\_方法，在查询一个不存在的键的时候就会调用这个方法。值得一提的是，只有\\_\\_getitem\\_\\_方法会调用\\_\\_missing\\_\\_方法。\n\n#### 字典的变种 ####\n- collections.OrderedDict:这个类的对象在添加键的时候会保持顺序，键的迭代顺序总是一样的\n- collections,ChainMap:可以容纳数个映射对象，进行键查询的时候会逐个查询，直到找到为止。\n- collections.Counter: 每次更新一个键的时候就会增加这个键的计数器, 比较有用的方法是most_common(n) 按次序返回最常见的n个键和他们的计数。\n- collections.UserDict: 把标准dict用Python实现用于用户继承这个类，编写子类。\n\n#### 继承UserDict编写子类 ####\n更倾向于从 UserDict 而不是从 dict 继承的主要原因是，后者有时会在某些方法的实现上走一些捷径，导致我们不得不在它的子类中重写这些方法，但是 UserDict 就不会带来这些问题。\n\n```python\nimport collections\nclass StrKeyDict(collections.UserDict):\n    def __missing__(self, key):\n        if isinstance(key, str):\n            raise KeyError(key)\n        return self[str(key)]\n    def __contains__(self, key):\n        return str(key) in self.data\n    def __setitem__(self, key, item):\n        self.data[str(key)] = item\n```\n\nUserDict 中有一个属性叫做data,它是dict 的一个实例，用于存储数据。\n\n#### 不可变的映射类型 ####\n\n标准库里所有的映射类型都是可变的，但有时候也会有需要用到不可变映射的地方，例如不能让用户修改的映射。\n\nPython 3.3 开始，types 模块中引入了一个封装类名叫 MappingProxyType。如果给这个类一个映射，它会返回一个只读的映射视图。虽然是个只读视图，但是它是动态的。这意味着如果对原映射做出了改动，我们通过这个视图可以观察到，但是无法通过这个视图对原映射做出修改。\n\n\\* 何为副本？何为视图？     \n副本：就是原有数据的一份拷贝。   \n视图：可理解为原有数据的一个别称或引用，通过该别称或引用亦便可访问、操作原有数据，但原有数据不会产生拷贝。\n\n\n#### 集合 ####\n集合的本质是许多唯一对象的聚集，所以集合的其中一个用途是去重。\n\n集合还实现了很多基础的中缀运算符。给定两个集合 a 和 b，a | b 返回的是它们的合集，a & b 得到的是交集，而 a - b 得到的是差集。合理地利用这些操作，不仅能够让代码的行数变少，还能减少 Python 程序的运行时间。这样做同时也是为了让代码更易读。\n\n除了速度极快的查找功能（这也得归功于它背后的散列表），内置的 set 和 frozenset\n提供了丰富的功能和操作。   \n\n##### set Literals（翻译比较诡异:集合字面量？？？） #####\n建立一个集合的时候可以使用{1，2..}类似的操作，但是创建空集的时候只能使用set()构造方法。\n\n##### 集合推导(类似列表推导) #####\n\n```python\n{chr(i) for i in range(32, 256) if 'SIGN' in name(chr(i),'')}\n```\n\n##### 集合的操作 #####\n\n![Figure-3-2](https://raw.githubusercontent.com/aldslvda/blog-images/master/fluent-python-3.1.png)\n\n\n#### dict和set的背后 ####\n要理解Python里字典和集合的长处和短处，它们背后的散列表是必须注意的。   \n \n- Python里的字典和集合的效率有多高？\n\t由于散列表的存在，效率是非常高的（列表由于没有散列表，表现非常差）\n\n##### dict的实现及其导致的结果 #####\n\n- 键必须可散列（hashable）\n\t一个可散列的对象必须满足以下要求。   \n\t(1) 支持 hash() 函数，并且通过 __hash__() 方法所得到的散列值是不变的。   \n\t(2) 支持通过 __eq__() 方法来检测相等性。   \n\t(3) 若 a == b 为真，则 hash(a) == hash(b) 也为真。所有由用户自定义的对象默认都是可散列的，因为它们的散列值由 id() 来获取，而且它们都是不相等的。\n\n- 内存开销巨大\n\t由于使用了散列表，而散列表本身稀疏，会导致空间效率低下。空间的优化工作可以等到真正需要的时候开启，**优化往往是可维护性的对立面**。\n\n- 键查询快\n\t由于在空间上的巨大花销，使得时间上的效率很高。\n\n- 键的次序取决于添加顺序\n\t与建立hash表的时候发生的散列冲突有关。\n\t\n- 往字典里添加新键可能会改变已有键的顺序\n\t这个和散列冲突有关，所以**慎重进行**迭代一个字典的所有键的过程中同时对字典进行修改这种操作，很有可能会跳过一些已有的键。\n\n##### set的实现和导致的结果 #####\n由于也是基于散列表实现的，set的特点和上一小节提到的dict如出一辙:   \n\n- 集合里的元素必须可散列\n- 内存开销大\n- 能很快查询元素是否存在于集合\n- 元素的顺序取决于添加的顺序\n- 添加新元素可能改变已有顺序\n\n","source":"_posts/fluent-python-3.md","raw":"title: fluent python 第三章小记\ndate: 2017-11-23 21:25:19\ntags:\n- Python\n- dict\n- set\n- fluent python\ncategories:\n- 读书笔记\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n## Fluent Python ##\n### Chapter 3. Dictionaries and Sets ###\n### 字典和集合 ###\ndict 类型不但在各种程序里广泛使用，它也是 Python 语言的基石。模块的命名空间、实\n例的属性和函数的关键字参数中都可以看到字典的身影。跟它有关的内置函数都在\n\\_\\_builtins\\_\\_.\\_\\_dict\\_\\_模块中。     \nPython 对字典做了高度优化，python字典性能优秀的原因是散列表。   \n集合同样依赖散列表。   \n\n*有部分翻译存在疑问，用括号标注原英文正文。\n\n#### 泛映射类型 ####\n![Figure-3-1](https://raw.githubusercontent.com/aldslvda/blog-images/master/fluent-python-3.1.png)\ncollections.abc 模块中有 Mapping 和 MutableMapping 这两个抽象基类,它们的作\n用是为 dict 和其他类似的类型定义形式接口。   \n非抽象映射类型一般不会直接继承这些抽象基类，它们会直接对 dict 或是collections.User.Dict 进行扩展。这些抽象基类的主要作用是作为**形式化的文档**。\n\n标准库里的所有映射类型都是利用 dict 来实现的，因只有**可散列的数据类型**才能用作这些映射里的键。\n##### 可散列的数据类型\n如果一个对象是可散列的，那么在这个对象的生命周期中，它的散列值是不变的，而且这个对象需要实现 \\_\\_hash\\_\\_() 方法。另外可散列对象还要有\\_\\_eq\\_\\_() 方法，这样才能跟其他键做比较。\n\nPython文档[https://docs.python.org/3/glossary.html#term-hashable](https://docs.python.org/3/glossary.html#term-hashable)中提到，所有不可变的类型都是可散列的，但元组是一个例外，元组可散列的条件是元组的元素都可以散列。    \n一个对象可散列的条件是：如果一个对象实现了\\_\\_eq\\_\\_方法，并且在方法中用到了这个对象的内部状态的话，那么只有当所有这些内部状态都是不可变的情况下，这个对象才是可散列的。\n##### 创建字典的不同方式\n\n```python\n>>> a = dict(one=1, two=2, three=3)\n>>> b = {'one': 1, 'two': 2, 'three': 3}\n>>> c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))\n>>> d = dict([('two', 2), ('one', 1), ('three', 3)])\n>>> e = dict({'three': 3, 'one': 1, 'two': 2})\n>>> a == b == c == d == e\nTrue\n```\n除此之外，字典推导也能创建一个字典, 和列表推导类似\n\n```python\n>>> DIAL_CODES = [ \n...  (86, 'China'),\n...  (91, 'India'),\n...  (1, 'United States'),\n...  (62, 'Indonesia'),\n...  (55, 'Brazil'),\n...  (92, 'Pakistan'),\n...  (880, 'Bangladesh'),\n...  (234, 'Nigeria'),\n...  (7, 'Russia'),\n...  (81, 'Japan'),\n... ]\n>>> country_code = {country: code for code, country in DIAL_CODES}\n\n```\n\n#### 常用的映射方法 ####\n\n这里讲到一个能让程序更加高效的方法 setdefault()，能节省很多次的键查询。\n\n例如：   \n2.1:\n   \n```python\nmy_dict.setdefault(key, []).append(new_value)\n\n```\n2.2  \n\n```python\nif key not in my_dict:\n\tmy_dict[key] = []\nmy_dict[key].append(new_value)\n\n```\n\n操作2.1和2.2达到的效果是一样的，但是2.1只用了一次键查询，而2.2会用到2-3次(是否有key存在)\n\n#### 映射的弹性键查询(flexible key lookup) ####\n\n场景：为了方便起见，就算某个键在映射里不存在，我们也希望在通过这个键读取值的时候能得到一个默认值。有两个方法能实现：使用defaultdict类或者自己实现一个类继承dict,实现\\_\\_missing\\_\\_方法。\n##### defaultdict #####\n\n有一个新字典dd = defaultdict(list),当使用表达式dd[key]而key在defaultdict中不存在的话，就会用list()建立新列表作为值，key作为键放入dd中，然后返回这个列表的引用。   \n这个用来生成默认值的可调用对象放在default_factory这个实例属性中。\n\n##### 特殊方法 \\_\\_missing\\_\\_() #####\n\n当一个继承了dict的类实现了\\_\\_missing\\_\\_方法，在查询一个不存在的键的时候就会调用这个方法。值得一提的是，只有\\_\\_getitem\\_\\_方法会调用\\_\\_missing\\_\\_方法。\n\n#### 字典的变种 ####\n- collections.OrderedDict:这个类的对象在添加键的时候会保持顺序，键的迭代顺序总是一样的\n- collections,ChainMap:可以容纳数个映射对象，进行键查询的时候会逐个查询，直到找到为止。\n- collections.Counter: 每次更新一个键的时候就会增加这个键的计数器, 比较有用的方法是most_common(n) 按次序返回最常见的n个键和他们的计数。\n- collections.UserDict: 把标准dict用Python实现用于用户继承这个类，编写子类。\n\n#### 继承UserDict编写子类 ####\n更倾向于从 UserDict 而不是从 dict 继承的主要原因是，后者有时会在某些方法的实现上走一些捷径，导致我们不得不在它的子类中重写这些方法，但是 UserDict 就不会带来这些问题。\n\n```python\nimport collections\nclass StrKeyDict(collections.UserDict):\n    def __missing__(self, key):\n        if isinstance(key, str):\n            raise KeyError(key)\n        return self[str(key)]\n    def __contains__(self, key):\n        return str(key) in self.data\n    def __setitem__(self, key, item):\n        self.data[str(key)] = item\n```\n\nUserDict 中有一个属性叫做data,它是dict 的一个实例，用于存储数据。\n\n#### 不可变的映射类型 ####\n\n标准库里所有的映射类型都是可变的，但有时候也会有需要用到不可变映射的地方，例如不能让用户修改的映射。\n\nPython 3.3 开始，types 模块中引入了一个封装类名叫 MappingProxyType。如果给这个类一个映射，它会返回一个只读的映射视图。虽然是个只读视图，但是它是动态的。这意味着如果对原映射做出了改动，我们通过这个视图可以观察到，但是无法通过这个视图对原映射做出修改。\n\n\\* 何为副本？何为视图？     \n副本：就是原有数据的一份拷贝。   \n视图：可理解为原有数据的一个别称或引用，通过该别称或引用亦便可访问、操作原有数据，但原有数据不会产生拷贝。\n\n\n#### 集合 ####\n集合的本质是许多唯一对象的聚集，所以集合的其中一个用途是去重。\n\n集合还实现了很多基础的中缀运算符。给定两个集合 a 和 b，a | b 返回的是它们的合集，a & b 得到的是交集，而 a - b 得到的是差集。合理地利用这些操作，不仅能够让代码的行数变少，还能减少 Python 程序的运行时间。这样做同时也是为了让代码更易读。\n\n除了速度极快的查找功能（这也得归功于它背后的散列表），内置的 set 和 frozenset\n提供了丰富的功能和操作。   \n\n##### set Literals（翻译比较诡异:集合字面量？？？） #####\n建立一个集合的时候可以使用{1，2..}类似的操作，但是创建空集的时候只能使用set()构造方法。\n\n##### 集合推导(类似列表推导) #####\n\n```python\n{chr(i) for i in range(32, 256) if 'SIGN' in name(chr(i),'')}\n```\n\n##### 集合的操作 #####\n\n![Figure-3-2](https://raw.githubusercontent.com/aldslvda/blog-images/master/fluent-python-3.1.png)\n\n\n#### dict和set的背后 ####\n要理解Python里字典和集合的长处和短处，它们背后的散列表是必须注意的。   \n \n- Python里的字典和集合的效率有多高？\n\t由于散列表的存在，效率是非常高的（列表由于没有散列表，表现非常差）\n\n##### dict的实现及其导致的结果 #####\n\n- 键必须可散列（hashable）\n\t一个可散列的对象必须满足以下要求。   \n\t(1) 支持 hash() 函数，并且通过 __hash__() 方法所得到的散列值是不变的。   \n\t(2) 支持通过 __eq__() 方法来检测相等性。   \n\t(3) 若 a == b 为真，则 hash(a) == hash(b) 也为真。所有由用户自定义的对象默认都是可散列的，因为它们的散列值由 id() 来获取，而且它们都是不相等的。\n\n- 内存开销巨大\n\t由于使用了散列表，而散列表本身稀疏，会导致空间效率低下。空间的优化工作可以等到真正需要的时候开启，**优化往往是可维护性的对立面**。\n\n- 键查询快\n\t由于在空间上的巨大花销，使得时间上的效率很高。\n\n- 键的次序取决于添加顺序\n\t与建立hash表的时候发生的散列冲突有关。\n\t\n- 往字典里添加新键可能会改变已有键的顺序\n\t这个和散列冲突有关，所以**慎重进行**迭代一个字典的所有键的过程中同时对字典进行修改这种操作，很有可能会跳过一些已有的键。\n\n##### set的实现和导致的结果 #####\n由于也是基于散列表实现的，set的特点和上一小节提到的dict如出一辙:   \n\n- 集合里的元素必须可散列\n- 内存开销大\n- 能很快查询元素是否存在于集合\n- 元素的顺序取决于添加的顺序\n- 添加新元素可能改变已有顺序\n\n","slug":"fluent-python-3","published":1,"updated":"2019-04-25T01:27:24.956Z","comments":1,"layout":"post","link":"","_id":"cjuw5c6ga003adhyfr6fuwcnh","content":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-3-Dictionaries-and-Sets\"><a href=\"#Chapter-3-Dictionaries-and-Sets\" class=\"headerlink\" title=\"Chapter 3. Dictionaries and Sets\"></a>Chapter 3. Dictionaries and Sets</h3><h3 id=\"字典和集合\"><a href=\"#字典和集合\" class=\"headerlink\" title=\"字典和集合\"></a>字典和集合</h3><p>dict 类型不但在各种程序里广泛使用，它也是 Python 语言的基石。模块的命名空间、实<br>例的属性和函数的关键字参数中都可以看到字典的身影。跟它有关的内置函数都在<br>__builtins__.__dict__模块中。<br>Python 对字典做了高度优化，python字典性能优秀的原因是散列表。<br>集合同样依赖散列表。   </p>\n<p>*有部分翻译存在疑问，用括号标注原英文正文。</p>\n<h4 id=\"泛映射类型\"><a href=\"#泛映射类型\" class=\"headerlink\" title=\"泛映射类型\"></a>泛映射类型</h4><p><img src=\"https://raw.githubusercontent.com/aldslvda/blog-images/master/fluent-python-3.1.png\" alt=\"Figure-3-1\"><br>collections.abc 模块中有 Mapping 和 MutableMapping 这两个抽象基类,它们的作<br>用是为 dict 和其他类似的类型定义形式接口。<br>非抽象映射类型一般不会直接继承这些抽象基类，它们会直接对 dict 或是collections.User.Dict 进行扩展。这些抽象基类的主要作用是作为<strong>形式化的文档</strong>。</p>\n<p>标准库里的所有映射类型都是利用 dict 来实现的，因只有<strong>可散列的数据类型</strong>才能用作这些映射里的键。</p>\n<h5 id=\"可散列的数据类型\"><a href=\"#可散列的数据类型\" class=\"headerlink\" title=\"可散列的数据类型\"></a>可散列的数据类型</h5><p>如果一个对象是可散列的，那么在这个对象的生命周期中，它的散列值是不变的，而且这个对象需要实现 __hash__() 方法。另外可散列对象还要有__eq__() 方法，这样才能跟其他键做比较。</p>\n<p>Python文档<a href=\"https://docs.python.org/3/glossary.html#term-hashable\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/glossary.html#term-hashable</a>中提到，所有不可变的类型都是可散列的，但元组是一个例外，元组可散列的条件是元组的元素都可以散列。<br>一个对象可散列的条件是：如果一个对象实现了__eq__方法，并且在方法中用到了这个对象的内部状态的话，那么只有当所有这些内部状态都是不可变的情况下，这个对象才是可散列的。</p>\n<h5 id=\"创建字典的不同方式\"><a href=\"#创建字典的不同方式\" class=\"headerlink\" title=\"创建字典的不同方式\"></a>创建字典的不同方式</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = dict(one=<span class=\"number\">1</span>, two=<span class=\"number\">2</span>, three=<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = &#123;<span class=\"string\">'one'</span>: <span class=\"number\">1</span>, <span class=\"string\">'two'</span>: <span class=\"number\">2</span>, <span class=\"string\">'three'</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = dict(zip([<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = dict([(<span class=\"string\">'two'</span>, <span class=\"number\">2</span>), (<span class=\"string\">'one'</span>, <span class=\"number\">1</span>), (<span class=\"string\">'three'</span>, <span class=\"number\">3</span>)])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>e = dict(&#123;<span class=\"string\">'three'</span>: <span class=\"number\">3</span>, <span class=\"string\">'one'</span>: <span class=\"number\">1</span>, <span class=\"string\">'two'</span>: <span class=\"number\">2</span>&#125;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a == b == c == d == e</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<p>除此之外，字典推导也能创建一个字典, 和列表推导类似</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>DIAL_CODES = [ </span><br><span class=\"line\"><span class=\"meta\">... </span> (<span class=\"number\">86</span>, <span class=\"string\">'China'</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span> (<span class=\"number\">91</span>, <span class=\"string\">'India'</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span> (<span class=\"number\">1</span>, <span class=\"string\">'United States'</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span> (<span class=\"number\">62</span>, <span class=\"string\">'Indonesia'</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span> (<span class=\"number\">55</span>, <span class=\"string\">'Brazil'</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span> (<span class=\"number\">92</span>, <span class=\"string\">'Pakistan'</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span> (<span class=\"number\">880</span>, <span class=\"string\">'Bangladesh'</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span> (<span class=\"number\">234</span>, <span class=\"string\">'Nigeria'</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span> (<span class=\"number\">7</span>, <span class=\"string\">'Russia'</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span> (<span class=\"number\">81</span>, <span class=\"string\">'Japan'</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>country_code = &#123;country: code <span class=\"keyword\">for</span> code, country <span class=\"keyword\">in</span> DIAL_CODES&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"常用的映射方法\"><a href=\"#常用的映射方法\" class=\"headerlink\" title=\"常用的映射方法\"></a>常用的映射方法</h4><p>这里讲到一个能让程序更加高效的方法 setdefault()，能节省很多次的键查询。</p>\n<p>例如：<br>2.1:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_dict.setdefault(key, []).append(new_value)</span><br></pre></td></tr></table></figure>\n<p>2.2  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> key <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> my_dict:</span><br><span class=\"line\">\tmy_dict[key] = []</span><br><span class=\"line\">my_dict[key].append(new_value)</span><br></pre></td></tr></table></figure>\n<p>操作2.1和2.2达到的效果是一样的，但是2.1只用了一次键查询，而2.2会用到2-3次(是否有key存在)</p>\n<h4 id=\"映射的弹性键查询-flexible-key-lookup\"><a href=\"#映射的弹性键查询-flexible-key-lookup\" class=\"headerlink\" title=\"映射的弹性键查询(flexible key lookup)\"></a>映射的弹性键查询(flexible key lookup)</h4><p>场景：为了方便起见，就算某个键在映射里不存在，我们也希望在通过这个键读取值的时候能得到一个默认值。有两个方法能实现：使用defaultdict类或者自己实现一个类继承dict,实现__missing__方法。</p>\n<h5 id=\"defaultdict\"><a href=\"#defaultdict\" class=\"headerlink\" title=\"defaultdict\"></a>defaultdict</h5><p>有一个新字典dd = defaultdict(list),当使用表达式dd[key]而key在defaultdict中不存在的话，就会用list()建立新列表作为值，key作为键放入dd中，然后返回这个列表的引用。<br>这个用来生成默认值的可调用对象放在default_factory这个实例属性中。</p>\n<h5 id=\"特殊方法-missing\"><a href=\"#特殊方法-missing\" class=\"headerlink\" title=\"特殊方法 __missing__()\"></a>特殊方法 __missing__()</h5><p>当一个继承了dict的类实现了__missing__方法，在查询一个不存在的键的时候就会调用这个方法。值得一提的是，只有__getitem__方法会调用__missing__方法。</p>\n<h4 id=\"字典的变种\"><a href=\"#字典的变种\" class=\"headerlink\" title=\"字典的变种\"></a>字典的变种</h4><ul>\n<li>collections.OrderedDict:这个类的对象在添加键的时候会保持顺序，键的迭代顺序总是一样的</li>\n<li>collections,ChainMap:可以容纳数个映射对象，进行键查询的时候会逐个查询，直到找到为止。</li>\n<li>collections.Counter: 每次更新一个键的时候就会增加这个键的计数器, 比较有用的方法是most_common(n) 按次序返回最常见的n个键和他们的计数。</li>\n<li>collections.UserDict: 把标准dict用Python实现用于用户继承这个类，编写子类。</li>\n</ul>\n<h4 id=\"继承UserDict编写子类\"><a href=\"#继承UserDict编写子类\" class=\"headerlink\" title=\"继承UserDict编写子类\"></a>继承UserDict编写子类</h4><p>更倾向于从 UserDict 而不是从 dict 继承的主要原因是，后者有时会在某些方法的实现上走一些捷径，导致我们不得不在它的子类中重写这些方法，但是 UserDict 就不会带来这些问题。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> collections</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrKeyDict</span><span class=\"params\">(collections.UserDict)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__missing__</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(key, str):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> KeyError(key)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self[str(key)]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__contains__</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> str(key) <span class=\"keyword\">in</span> self.data</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setitem__</span><span class=\"params\">(self, key, item)</span>:</span></span><br><span class=\"line\">        self.data[str(key)] = item</span><br></pre></td></tr></table></figure>\n<p>UserDict 中有一个属性叫做data,它是dict 的一个实例，用于存储数据。</p>\n<h4 id=\"不可变的映射类型\"><a href=\"#不可变的映射类型\" class=\"headerlink\" title=\"不可变的映射类型\"></a>不可变的映射类型</h4><p>标准库里所有的映射类型都是可变的，但有时候也会有需要用到不可变映射的地方，例如不能让用户修改的映射。</p>\n<p>Python 3.3 开始，types 模块中引入了一个封装类名叫 MappingProxyType。如果给这个类一个映射，它会返回一个只读的映射视图。虽然是个只读视图，但是它是动态的。这意味着如果对原映射做出了改动，我们通过这个视图可以观察到，但是无法通过这个视图对原映射做出修改。</p>\n<p>* 何为副本？何为视图？<br>副本：就是原有数据的一份拷贝。<br>视图：可理解为原有数据的一个别称或引用，通过该别称或引用亦便可访问、操作原有数据，但原有数据不会产生拷贝。</p>\n<h4 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h4><p>集合的本质是许多唯一对象的聚集，所以集合的其中一个用途是去重。</p>\n<p>集合还实现了很多基础的中缀运算符。给定两个集合 a 和 b，a | b 返回的是它们的合集，a &amp; b 得到的是交集，而 a - b 得到的是差集。合理地利用这些操作，不仅能够让代码的行数变少，还能减少 Python 程序的运行时间。这样做同时也是为了让代码更易读。</p>\n<p>除了速度极快的查找功能（这也得归功于它背后的散列表），内置的 set 和 frozenset<br>提供了丰富的功能和操作。   </p>\n<h5 id=\"set-Literals（翻译比较诡异-集合字面量？？？）\"><a href=\"#set-Literals（翻译比较诡异-集合字面量？？？）\" class=\"headerlink\" title=\"set Literals（翻译比较诡异:集合字面量？？？）\"></a>set Literals（翻译比较诡异:集合字面量？？？）</h5><p>建立一个集合的时候可以使用{1，2..}类似的操作，但是创建空集的时候只能使用set()构造方法。</p>\n<h5 id=\"集合推导-类似列表推导\"><a href=\"#集合推导-类似列表推导\" class=\"headerlink\" title=\"集合推导(类似列表推导)\"></a>集合推导(类似列表推导)</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;chr(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">32</span>, <span class=\"number\">256</span>) <span class=\"keyword\">if</span> <span class=\"string\">'SIGN'</span> <span class=\"keyword\">in</span> name(chr(i),<span class=\"string\">''</span>)&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"集合的操作\"><a href=\"#集合的操作\" class=\"headerlink\" title=\"集合的操作\"></a>集合的操作</h5><p><img src=\"https://raw.githubusercontent.com/aldslvda/blog-images/master/fluent-python-3.1.png\" alt=\"Figure-3-2\"></p>\n<h4 id=\"dict和set的背后\"><a href=\"#dict和set的背后\" class=\"headerlink\" title=\"dict和set的背后\"></a>dict和set的背后</h4><p>要理解Python里字典和集合的长处和短处，它们背后的散列表是必须注意的。   </p>\n<ul>\n<li>Python里的字典和集合的效率有多高？<br>  由于散列表的存在，效率是非常高的（列表由于没有散列表，表现非常差）</li>\n</ul>\n<h5 id=\"dict的实现及其导致的结果\"><a href=\"#dict的实现及其导致的结果\" class=\"headerlink\" title=\"dict的实现及其导致的结果\"></a>dict的实现及其导致的结果</h5><ul>\n<li><p>键必须可散列（hashable）<br>  一个可散列的对象必须满足以下要求。<br>  (1) 支持 hash() 函数，并且通过 <strong>hash</strong>() 方法所得到的散列值是不变的。<br>  (2) 支持通过 <strong>eq</strong>() 方法来检测相等性。<br>  (3) 若 a == b 为真，则 hash(a) == hash(b) 也为真。所有由用户自定义的对象默认都是可散列的，因为它们的散列值由 id() 来获取，而且它们都是不相等的。</p>\n</li>\n<li><p>内存开销巨大<br>  由于使用了散列表，而散列表本身稀疏，会导致空间效率低下。空间的优化工作可以等到真正需要的时候开启，<strong>优化往往是可维护性的对立面</strong>。</p>\n</li>\n<li><p>键查询快<br>  由于在空间上的巨大花销，使得时间上的效率很高。</p>\n</li>\n<li><p>键的次序取决于添加顺序<br>  与建立hash表的时候发生的散列冲突有关。</p>\n</li>\n<li><p>往字典里添加新键可能会改变已有键的顺序<br>  这个和散列冲突有关，所以<strong>慎重进行</strong>迭代一个字典的所有键的过程中同时对字典进行修改这种操作，很有可能会跳过一些已有的键。</p>\n</li>\n</ul>\n<h5 id=\"set的实现和导致的结果\"><a href=\"#set的实现和导致的结果\" class=\"headerlink\" title=\"set的实现和导致的结果\"></a>set的实现和导致的结果</h5><p>由于也是基于散列表实现的，set的特点和上一小节提到的dict如出一辙:   </p>\n<ul>\n<li>集合里的元素必须可散列</li>\n<li>内存开销大</li>\n<li>能很快查询元素是否存在于集合</li>\n<li>元素的顺序取决于添加的顺序</li>\n<li>添加新元素可能改变已有顺序</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-3-Dictionaries-and-Sets\"><a href=\"#Chapter-3-Dictionaries-and-Sets\" class=\"headerlink\" title=\"Chapter 3. Dictionaries and Sets\"></a>Chapter 3. Dictionaries and Sets</h3><h3 id=\"字典和集合\"><a href=\"#字典和集合\" class=\"headerlink\" title=\"字典和集合\"></a>字典和集合</h3><p>dict 类型不但在各种程序里广泛使用，它也是 Python 语言的基石。模块的命名空间、实<br>例的属性和函数的关键字参数中都可以看到字典的身影。跟它有关的内置函数都在<br>__builtins__.__dict__模块中。<br>Python 对字典做了高度优化，python字典性能优秀的原因是散列表。<br>集合同样依赖散列表。   </p>\n<p>*有部分翻译存在疑问，用括号标注原英文正文。</p>\n<h4 id=\"泛映射类型\"><a href=\"#泛映射类型\" class=\"headerlink\" title=\"泛映射类型\"></a>泛映射类型</h4><p><img src=\"https://raw.githubusercontent.com/aldslvda/blog-images/master/fluent-python-3.1.png\" alt=\"Figure-3-1\"><br>collections.abc 模块中有 Mapping 和 MutableMapping 这两个抽象基类,它们的作<br>用是为 dict 和其他类似的类型定义形式接口。<br>非抽象映射类型一般不会直接继承这些抽象基类，它们会直接对 dict 或是collections.User.Dict 进行扩展。这些抽象基类的主要作用是作为<strong>形式化的文档</strong>。</p>\n<p>标准库里的所有映射类型都是利用 dict 来实现的，因只有<strong>可散列的数据类型</strong>才能用作这些映射里的键。</p>\n<h5 id=\"可散列的数据类型\"><a href=\"#可散列的数据类型\" class=\"headerlink\" title=\"可散列的数据类型\"></a>可散列的数据类型</h5><p>如果一个对象是可散列的，那么在这个对象的生命周期中，它的散列值是不变的，而且这个对象需要实现 __hash__() 方法。另外可散列对象还要有__eq__() 方法，这样才能跟其他键做比较。</p>\n<p>Python文档<a href=\"https://docs.python.org/3/glossary.html#term-hashable\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/glossary.html#term-hashable</a>中提到，所有不可变的类型都是可散列的，但元组是一个例外，元组可散列的条件是元组的元素都可以散列。<br>一个对象可散列的条件是：如果一个对象实现了__eq__方法，并且在方法中用到了这个对象的内部状态的话，那么只有当所有这些内部状态都是不可变的情况下，这个对象才是可散列的。</p>\n<h5 id=\"创建字典的不同方式\"><a href=\"#创建字典的不同方式\" class=\"headerlink\" title=\"创建字典的不同方式\"></a>创建字典的不同方式</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = dict(one=<span class=\"number\">1</span>, two=<span class=\"number\">2</span>, three=<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = &#123;<span class=\"string\">'one'</span>: <span class=\"number\">1</span>, <span class=\"string\">'two'</span>: <span class=\"number\">2</span>, <span class=\"string\">'three'</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = dict(zip([<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = dict([(<span class=\"string\">'two'</span>, <span class=\"number\">2</span>), (<span class=\"string\">'one'</span>, <span class=\"number\">1</span>), (<span class=\"string\">'three'</span>, <span class=\"number\">3</span>)])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>e = dict(&#123;<span class=\"string\">'three'</span>: <span class=\"number\">3</span>, <span class=\"string\">'one'</span>: <span class=\"number\">1</span>, <span class=\"string\">'two'</span>: <span class=\"number\">2</span>&#125;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a == b == c == d == e</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<p>除此之外，字典推导也能创建一个字典, 和列表推导类似</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>DIAL_CODES = [ </span><br><span class=\"line\"><span class=\"meta\">... </span> (<span class=\"number\">86</span>, <span class=\"string\">'China'</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span> (<span class=\"number\">91</span>, <span class=\"string\">'India'</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span> (<span class=\"number\">1</span>, <span class=\"string\">'United States'</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span> (<span class=\"number\">62</span>, <span class=\"string\">'Indonesia'</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span> (<span class=\"number\">55</span>, <span class=\"string\">'Brazil'</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span> (<span class=\"number\">92</span>, <span class=\"string\">'Pakistan'</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span> (<span class=\"number\">880</span>, <span class=\"string\">'Bangladesh'</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span> (<span class=\"number\">234</span>, <span class=\"string\">'Nigeria'</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span> (<span class=\"number\">7</span>, <span class=\"string\">'Russia'</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span> (<span class=\"number\">81</span>, <span class=\"string\">'Japan'</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>country_code = &#123;country: code <span class=\"keyword\">for</span> code, country <span class=\"keyword\">in</span> DIAL_CODES&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"常用的映射方法\"><a href=\"#常用的映射方法\" class=\"headerlink\" title=\"常用的映射方法\"></a>常用的映射方法</h4><p>这里讲到一个能让程序更加高效的方法 setdefault()，能节省很多次的键查询。</p>\n<p>例如：<br>2.1:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_dict.setdefault(key, []).append(new_value)</span><br></pre></td></tr></table></figure>\n<p>2.2  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> key <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> my_dict:</span><br><span class=\"line\">\tmy_dict[key] = []</span><br><span class=\"line\">my_dict[key].append(new_value)</span><br></pre></td></tr></table></figure>\n<p>操作2.1和2.2达到的效果是一样的，但是2.1只用了一次键查询，而2.2会用到2-3次(是否有key存在)</p>\n<h4 id=\"映射的弹性键查询-flexible-key-lookup\"><a href=\"#映射的弹性键查询-flexible-key-lookup\" class=\"headerlink\" title=\"映射的弹性键查询(flexible key lookup)\"></a>映射的弹性键查询(flexible key lookup)</h4><p>场景：为了方便起见，就算某个键在映射里不存在，我们也希望在通过这个键读取值的时候能得到一个默认值。有两个方法能实现：使用defaultdict类或者自己实现一个类继承dict,实现__missing__方法。</p>\n<h5 id=\"defaultdict\"><a href=\"#defaultdict\" class=\"headerlink\" title=\"defaultdict\"></a>defaultdict</h5><p>有一个新字典dd = defaultdict(list),当使用表达式dd[key]而key在defaultdict中不存在的话，就会用list()建立新列表作为值，key作为键放入dd中，然后返回这个列表的引用。<br>这个用来生成默认值的可调用对象放在default_factory这个实例属性中。</p>\n<h5 id=\"特殊方法-missing\"><a href=\"#特殊方法-missing\" class=\"headerlink\" title=\"特殊方法 __missing__()\"></a>特殊方法 __missing__()</h5><p>当一个继承了dict的类实现了__missing__方法，在查询一个不存在的键的时候就会调用这个方法。值得一提的是，只有__getitem__方法会调用__missing__方法。</p>\n<h4 id=\"字典的变种\"><a href=\"#字典的变种\" class=\"headerlink\" title=\"字典的变种\"></a>字典的变种</h4><ul>\n<li>collections.OrderedDict:这个类的对象在添加键的时候会保持顺序，键的迭代顺序总是一样的</li>\n<li>collections,ChainMap:可以容纳数个映射对象，进行键查询的时候会逐个查询，直到找到为止。</li>\n<li>collections.Counter: 每次更新一个键的时候就会增加这个键的计数器, 比较有用的方法是most_common(n) 按次序返回最常见的n个键和他们的计数。</li>\n<li>collections.UserDict: 把标准dict用Python实现用于用户继承这个类，编写子类。</li>\n</ul>\n<h4 id=\"继承UserDict编写子类\"><a href=\"#继承UserDict编写子类\" class=\"headerlink\" title=\"继承UserDict编写子类\"></a>继承UserDict编写子类</h4><p>更倾向于从 UserDict 而不是从 dict 继承的主要原因是，后者有时会在某些方法的实现上走一些捷径，导致我们不得不在它的子类中重写这些方法，但是 UserDict 就不会带来这些问题。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> collections</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrKeyDict</span><span class=\"params\">(collections.UserDict)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__missing__</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(key, str):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> KeyError(key)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self[str(key)]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__contains__</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> str(key) <span class=\"keyword\">in</span> self.data</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setitem__</span><span class=\"params\">(self, key, item)</span>:</span></span><br><span class=\"line\">        self.data[str(key)] = item</span><br></pre></td></tr></table></figure>\n<p>UserDict 中有一个属性叫做data,它是dict 的一个实例，用于存储数据。</p>\n<h4 id=\"不可变的映射类型\"><a href=\"#不可变的映射类型\" class=\"headerlink\" title=\"不可变的映射类型\"></a>不可变的映射类型</h4><p>标准库里所有的映射类型都是可变的，但有时候也会有需要用到不可变映射的地方，例如不能让用户修改的映射。</p>\n<p>Python 3.3 开始，types 模块中引入了一个封装类名叫 MappingProxyType。如果给这个类一个映射，它会返回一个只读的映射视图。虽然是个只读视图，但是它是动态的。这意味着如果对原映射做出了改动，我们通过这个视图可以观察到，但是无法通过这个视图对原映射做出修改。</p>\n<p>* 何为副本？何为视图？<br>副本：就是原有数据的一份拷贝。<br>视图：可理解为原有数据的一个别称或引用，通过该别称或引用亦便可访问、操作原有数据，但原有数据不会产生拷贝。</p>\n<h4 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h4><p>集合的本质是许多唯一对象的聚集，所以集合的其中一个用途是去重。</p>\n<p>集合还实现了很多基础的中缀运算符。给定两个集合 a 和 b，a | b 返回的是它们的合集，a &amp; b 得到的是交集，而 a - b 得到的是差集。合理地利用这些操作，不仅能够让代码的行数变少，还能减少 Python 程序的运行时间。这样做同时也是为了让代码更易读。</p>\n<p>除了速度极快的查找功能（这也得归功于它背后的散列表），内置的 set 和 frozenset<br>提供了丰富的功能和操作。   </p>\n<h5 id=\"set-Literals（翻译比较诡异-集合字面量？？？）\"><a href=\"#set-Literals（翻译比较诡异-集合字面量？？？）\" class=\"headerlink\" title=\"set Literals（翻译比较诡异:集合字面量？？？）\"></a>set Literals（翻译比较诡异:集合字面量？？？）</h5><p>建立一个集合的时候可以使用{1，2..}类似的操作，但是创建空集的时候只能使用set()构造方法。</p>\n<h5 id=\"集合推导-类似列表推导\"><a href=\"#集合推导-类似列表推导\" class=\"headerlink\" title=\"集合推导(类似列表推导)\"></a>集合推导(类似列表推导)</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;chr(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">32</span>, <span class=\"number\">256</span>) <span class=\"keyword\">if</span> <span class=\"string\">'SIGN'</span> <span class=\"keyword\">in</span> name(chr(i),<span class=\"string\">''</span>)&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"集合的操作\"><a href=\"#集合的操作\" class=\"headerlink\" title=\"集合的操作\"></a>集合的操作</h5><p><img src=\"https://raw.githubusercontent.com/aldslvda/blog-images/master/fluent-python-3.1.png\" alt=\"Figure-3-2\"></p>\n<h4 id=\"dict和set的背后\"><a href=\"#dict和set的背后\" class=\"headerlink\" title=\"dict和set的背后\"></a>dict和set的背后</h4><p>要理解Python里字典和集合的长处和短处，它们背后的散列表是必须注意的。   </p>\n<ul>\n<li>Python里的字典和集合的效率有多高？<br>  由于散列表的存在，效率是非常高的（列表由于没有散列表，表现非常差）</li>\n</ul>\n<h5 id=\"dict的实现及其导致的结果\"><a href=\"#dict的实现及其导致的结果\" class=\"headerlink\" title=\"dict的实现及其导致的结果\"></a>dict的实现及其导致的结果</h5><ul>\n<li><p>键必须可散列（hashable）<br>  一个可散列的对象必须满足以下要求。<br>  (1) 支持 hash() 函数，并且通过 <strong>hash</strong>() 方法所得到的散列值是不变的。<br>  (2) 支持通过 <strong>eq</strong>() 方法来检测相等性。<br>  (3) 若 a == b 为真，则 hash(a) == hash(b) 也为真。所有由用户自定义的对象默认都是可散列的，因为它们的散列值由 id() 来获取，而且它们都是不相等的。</p>\n</li>\n<li><p>内存开销巨大<br>  由于使用了散列表，而散列表本身稀疏，会导致空间效率低下。空间的优化工作可以等到真正需要的时候开启，<strong>优化往往是可维护性的对立面</strong>。</p>\n</li>\n<li><p>键查询快<br>  由于在空间上的巨大花销，使得时间上的效率很高。</p>\n</li>\n<li><p>键的次序取决于添加顺序<br>  与建立hash表的时候发生的散列冲突有关。</p>\n</li>\n<li><p>往字典里添加新键可能会改变已有键的顺序<br>  这个和散列冲突有关，所以<strong>慎重进行</strong>迭代一个字典的所有键的过程中同时对字典进行修改这种操作，很有可能会跳过一些已有的键。</p>\n</li>\n</ul>\n<h5 id=\"set的实现和导致的结果\"><a href=\"#set的实现和导致的结果\" class=\"headerlink\" title=\"set的实现和导致的结果\"></a>set的实现和导致的结果</h5><p>由于也是基于散列表实现的，set的特点和上一小节提到的dict如出一辙:   </p>\n<ul>\n<li>集合里的元素必须可散列</li>\n<li>内存开销大</li>\n<li>能很快查询元素是否存在于集合</li>\n<li>元素的顺序取决于添加的顺序</li>\n<li>添加新元素可能改变已有顺序</li>\n</ul>\n"},{"title":"fluent python 第四章小记","date":"2017-11-26T16:03:27.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true"],"toc":true,"comment":true,"_content":"\n## Fluent Python ##\n### Chapter 4. Texts versus Bytes ###\n### 第四章.  文本和字节 ###\n\\* 注: 本章中讨论的所有字符和字节的问题以Python3为主\nPython 3 明确区分了人类可读的文本字符串(text)和原始的字节序列(Bytes)。隐式地把字节序列转换成Unicode文本已成过去。\n\n#### 字符问题 ####\n字符串是一个相当简单的概念，但是字符的定义比较复杂。\nPython3的str对象中获取的单个元素是Unicode, 但是Python2的str对象获取的是原始的字节序列。\nUnicode 标准把字符的标识和具体的字节表述进行了如下的明确区分:   \n\n- 字符的标识，即码位，是 0~1 114 111(0x10fff)的数字（十进制），在 Unicode 标准中以4~6个十六进制数字表示，而且加前缀“U+”。例如，字母 A 的码位是 U+0041，欧元符号的码位是 U+20AC，高音谱号的码位是 U+1D11E。在 Unicode 6.3 中（这是 Python 3.4使用的标准），约 10% 的有效码位有对应的字符。\n\n- 字符的具体表述取决于所用的编码。编码是在码位和字节序列之间转换时使用的算法。在 UTF-8 编码中，A（U+0041）的码位编码成单个字节 \\x41，而在 UTF-16LE编码中编码成两个字节 \\x41\\x00。再举个例子，欧元符号（U+20AC）在 UTF-8 编码中是三个字节——\\xe2\\x82\\xac，而在 UTF-16LE 中编码成两个字节：\\xac\\x20。\n\n将码位(code points)转化成字节序列(Bytes)的过程是编码，将字符序列转化为码位的过程是解码。\n\n#### 字节概要 ####\n1. Python 内置了两种基本的二进制序列类型：Python 3 引入的不可变 bytes 类型和 Python 2.6 添加的可变bytearray 类型。   \n2. bytes 或 bytearray 对象的各个元素是介于 0~255(0x0~0xff)之间的整数。   \nbytes对象的切片还是bytes对象，最小单位是长度为1的bytes对象.     \n3. bytearray 对象的切片还是 bytearray 对象。   \n4. 除了格式化方法（format 和 format_map）和几个处理 Unicode 数据的方法（包括casefold、isdecimal、isidentifier、isnumeric、isprintable 和 encode）之外，str 类型的其他方法都支持 bytes 和 bytearray 类型。这意味着，我们可以使用熟悉的字符串方法处理二进制序列，如 endswith、replace、strip、translate、upper等，只有少数几个其他方法的参数是 bytes 对象，而不是 str 对象。此外，如果正则表达式编译自二进制序列而不是字符串，re 模块中的正则表达式函数也能处理二进制序列.   \n5. 二进制序列有个类方法是 str 没有的，名为 fromhex: \n\n```python\nbytes.fromhex('31 4B CE A9')\nb'1K\\xce\\xa9'\n```\n\n新建bytes或bytearray可以调用各自的构造方法:\n\n- 一个str对象和一个encoding参数\n- 一个提供0~0xff的整数的可迭代对象\n- 一个实现了缓冲协议的对象(buffer protocol, 例如bytes, bytearray, memory view, array.array)\n\n#### 结构体和内存视图(struct and memory view) ####\nstruct 模块能处理bytes、bytearray 和 memoryview 对象, 能将打包的字节序列和不同类型字段组成的元组相互转换。   \nmemoryview 类不是用于创建或存储字节序列的，而是共享内存，让你访问其他二进制序列、打包的数组和缓冲中的数据切片，而无需复制字节序列。   \n\n```python\nimport struct\nfmt = '<3s3sHH' \n#格式：< 是小字节序，3s3s 是两个 3 字节序列，HH 是两个 16 位二进制整数。\nwith open('filter.gif', 'rb') as fp:\n    img = memoryview(fp.read()) \n    #创建一个内存视图\n\nheader = img[:10] \n#header也是一个内存视图\nbytes(header) \n# b'GIF89a+\\x02\\xe6\\x00'\nstruct.unpack(fmt, header) \n# (b'GIF', b'89a', 555, 230) 分别代表文件类型,版本,宽度,高度\ndel header \n# 删除引用, 释放内存\ndel img\n```\n\n#### 基本的编解码器 ####\nPython 自带了超过 100 种编解码器（codec, encoder/decoder），用于在文本和字节之间相互转换。每个编解码器都有一个名称，如 'utf_8'，而且经常有几个别名，如'utf8'、'utf-8' 和 'U8'。这些名称可以传给open()、str.encode()、bytes.decode() 等函数的 encoding 参数。\n\n```python\n>>> for codec in ['latin_1', 'utf_8', 'utf_16']:\n... print(codec, 'El Niño'.encode(codec), sep='\\t')\n...\nlatin_1 b'El Ni\\xf1o'\nutf_8 b'El Ni\\xc3\\xb1o'\nutf_16 b'\\xff\\xfeE\\x00l\\x00 \\x00N\\x00i\\x00\\xf1\\x00o\\x00'\n```\n\n某些编码（如 ASCII 和多字节的 GB2312）不能表示所有 Unicode字符。然而，UTF 编码的设计目的就是处理每一个 Unicode 码位。  \n\n一些典型编码:\n\n- latin1: 一种重要的编码，是其他编码的基础，例如 cp1252 和 Unicode（注意，latin1 与cp1252 的字节值是一样的，甚至连码位也相同）\n- cp1252:Microsoft 制定的 latin1 超集，添加了有用的符号，例如弯引号和€（欧元）；有些Windows 应用把它称为“ANSI”，但它并不是 ANSI 标准。\n- cp437: IBM PC 最初的字符集，包含框图符号。与后来出现的 latin1 不兼容。\n- gb2312:用于编码简体中文的陈旧标准；这是亚洲语言中使用较广泛的多字节编码之一。\n- utf-8:目前 Web 中最常见的 8 位编码； 与 ASCII 兼容（纯 ASCII 文本是有效的 UTF-8 文本）。\n- utf-16le: UTF-16 的 16 位编码方案的一种形式；所有 UTF-16 支持通过转义序列（称为“代理对”，surrogate pair）表示超过 U+FFFF 的码位。\n\n#### 编解码中出现的问题 ####\n##### UnicodeEncodeError #####\n把文本转换成字节序列时，如果目标编码中**没有定义**某个字符，那就会抛出 UnicodeEncodeError\n\n##### UnicodeDecodeError #####\n不是每一个字节都包含有效的 ASCII 字符，也不是每一个字符序列都是有效的 UTF-8 或 UTF-16。因此，把二进制序列转换成文本时，如果假设是这两个编码中的一个，遇到无法转换的字节序列时会抛出 UnicodeDecodeError    \n一些陈旧的8位编码可以解码任何字节序列，不抛出错误，但是会得到无用的输出。\n\n##### 使用预期之外的编码加载模块时抛出的SyntaxError #####\nPython 3 默认使用 UTF-8 编码源码，Python 2（从 2.5 开始）则默认使用 ASCII。如果加载的 .py 模块中包含 UTF-8 之外的数据，而且没有声明编码，会抛出SyntaxError   \n这个问题可以在文件的前两行加入#encoding:${encoding_name}解决。\n\n##### 找出一个字节序列的编码 #####\n单纯的字节序列是无法找出编码的，必须通过协议/规定的格式告知解码者。——有些通信协议和文件格式，如 HTTP 和 XML，包含明确指明内容编码的首部。   \n但是字节流也可以通过寻找规则来判断可能的编码: 例如，如果 b'\\x00' 字节经常出现，那么可能是 16 位或 32位编码，而不是 8 位编码方案，因为纯文本中不能包含空字符；如果字节序列b'\\x20\\x00' 经常出现，那么可能是 UTF-16LE 编码中的空格字符（U+0020）    \n统一字符编码侦测包 Chardet（https://pypi.python.org/pypi/chardet）就是这样工作的，它能识别所支持的 30 种编码.    \n\n##### BOM：有用的鬼符 #####\nutf-16编码的序列开头会有几个额外的字节，称为BOM，即字节序标记（byte-order mark），指明字节序。\n小字节序设备中，低8位在前，高8位在后，大字节序的设备则反之。   \nUTF-16 有两个变种：UTF-16LE，显式指明使用小字节序；UTF-16BE，显式指明使用大字节序。如果使用这两个变种，不会生成 BOM    \n与字节序有关的问题只对一个字（word）占多个字节的编码（如 UTF-16 和 UTF-32）有影响。UTF-8 的一大优势是，不管设备使用哪种字节序，生成的字节序列始终一致，因此不需要 BOM。   \n\n#### 处理文本 ####\n处理文本的最佳实践是“Unicode 三明治”（要尽早把输入（例如读取文件时）的字节序列解码成字符串，处理过程全部用字符串，输出时尽量晚编码成字符序列)\n![Figure-4-1](https://github.com/aldslvda/blog-images/blob/master/fluent-python-4.1.png?raw=true)\n\n文本处理中的一些要点:\n\n- 需要在多台设备中或多种场合下运行的代码，一定不能依赖默认编码。打开文件时始终应该明确传入 encoding= 参数，因为不同的设备使用的默认编码可能不同。\n- 除非想判断编码，否则不要在二进制模式中打开文本文件；即便如此，也应该使用 Chardet，而不是重新发明轮子。常规代码只应该使用二进制模式打开二进制文件。\n\n#### 为了正确的比较规范化Unicode 字符串 ####\n在 Unicode 标准中，'é'和 'e\\u0301' 这样的序列叫“标准等价物”（canonical equivalent），应用程序应该把它们视作相同的字符。但是，Python 看到的是不同的码位序列，因此判定二者不相等。    \n上述的问题的解决方案是规范化Unicode字符串。通常是使用 unicodedata.normalize 函数提供的 Unicode 规范化。第一个参数是'NFC'、'NFD'、'NFKC' 和 'NFKD'之一。   \nNFC（Normalization Form C）使用最少的码位构成等价的字符串，而 NFD 把组合字符分解成基字符和单独的组合字符。这两种规范化方式都能让比较行为符合预期。\nNFKC 和 NFKD的首字母缩略词中，字母 K 表示“compatibility”（兼容性）。这两种是较严格的规范化形式，对“兼容字符”有影响。    \n**由于这一节的内容的领域偏向性太过严重，一般工作不会见到，只是略作了解，碰到相关问题再细查**\n\n#### 支持字符串和字节序列的双模式API ####\n##### 正则表达式 #####\n\n如果使用字节序列构建正则表达式，\\d 和 \\w 等模式只能匹配 ASCII 字符；相比之下，如果是字符串模式，就能匹配 ASCII 之外的 Unicode 数字或字母。\n\n```python\nimport re\nre_numbers_str = re.compile(r'\\d+')\nre_words_str = re.compile(r'\\w+')\nre_numbers_bytes = re.compile(rb'\\d+')\nre_words_bytes = re.compile(rb'\\w+')\ntext_str = (\"Ramanujan saw \\u0be7\\u0bed\\u0be8\\u0bef\" \n\" as 1729 = 1³ + 12³ = 9³ + 10³.\") \ntext_bytes = text_str.encode('utf_8') \nprint('Text', repr(text_str), sep='\\n ')\nprint('Numbers')\nprint(' str :', re_numbers_str.findall(text_str)) \nprint(' bytes:', re_numbers_bytes.findall(text_bytes)) \nprint('Words')\nprint(' str :', re_words_str.findall(text_str)) \nprint(' bytes:', re_words_bytes.findall(text_bytes)) \n```\n\n上面这段代码的输出:\n  \n> Text   \n>  'Ramanujan saw ௧௭௨௯ as 1729 = 1³ + 12³ = 9³ + 10³.'   \n> Numbers   \n>  str : ['௧௭௨௯', '1729', '1', '12', '9', '10']   \n>  bytes: [b'1729', b'1', b'12', b'9', b'10']   \n> Words   \n>  str : ['Ramanujan', 'saw', '௧௭௨௯', 'as', '1729', '1³', '12³', '9³', '10³']   \n>  bytes: [b'Ramanujan', b'saw', b'as', b'1729', b'1', b'12', b'9', b'10']   \n\n##### os函数 #####\nGNU/Linux 内核不理解 Unicode，对任何合理的编码方案来说，在文\n件名中使用字节序列都是无效的，无法解码成字符串。在不同操作系统中使用各种客户端的文件服务器，在遇到这个问题时尤其容易出错。    \n为了规避这个问题，os 模块中的所有函数、文件名或路径名参数既能使用字符串，也能使用字节序列。如果这样的函数使用字符串参数调用，该参数会使用sys.getfilesystemencoding() 得到的编解码器自动编码，然后操作系统会使用相同的编解码器解码。这几乎就是我们想要的行为，与 Unicode 三明治最佳实践一致。   \n利用这一特性可以修复一些含有鬼符的文件名。\n\n#### 总结 ####\n1. 随着 Unicode 的广泛使用（80% 的网站已经使用 UTF-8），我们必须把文本字符串与它们在文件中的二进制序列表述区分开，而 Python 3 中这个区分是强制的。   \n2. 这一部分要解决的问题大多是一些由于地区/语言不通造成的编码差异，这种差异可以通过规范化Unicode解决,也可以通过规范化编码解决。   \n3. Unicode 异常复杂，充满特殊情况，而且要覆盖各种人类语言和产业标准策略。所以要做到完美的处理非常困难。    \n4. Python 3.3 起，创建 str 对象时，解释器会检查里面的字符，然后为该字符串选择最经济的内存布局：如果字符都在 latin1 字符集中，那就使用 1 个字节存储每个码位；否则，根据字符串中的具体字符，选择 2 个或 4 个字节存储每个码位。\n5. Python 3 对 int 类型的处理方式：如果一个整数在一个机器字中放得下，那就存储在一个机器字中；否则解释器切换成变长表述，类似于Python 2 中的 long 类型。\n","source":"_posts/fluent-python-4.md","raw":"title: fluent python 第四章小记\ndate: 2017-11-27 00:03:27\ntags:\n- Python\n- bytes\n- unicode\n- fluent python\ncategories:\n- 读书笔记\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n## Fluent Python ##\n### Chapter 4. Texts versus Bytes ###\n### 第四章.  文本和字节 ###\n\\* 注: 本章中讨论的所有字符和字节的问题以Python3为主\nPython 3 明确区分了人类可读的文本字符串(text)和原始的字节序列(Bytes)。隐式地把字节序列转换成Unicode文本已成过去。\n\n#### 字符问题 ####\n字符串是一个相当简单的概念，但是字符的定义比较复杂。\nPython3的str对象中获取的单个元素是Unicode, 但是Python2的str对象获取的是原始的字节序列。\nUnicode 标准把字符的标识和具体的字节表述进行了如下的明确区分:   \n\n- 字符的标识，即码位，是 0~1 114 111(0x10fff)的数字（十进制），在 Unicode 标准中以4~6个十六进制数字表示，而且加前缀“U+”。例如，字母 A 的码位是 U+0041，欧元符号的码位是 U+20AC，高音谱号的码位是 U+1D11E。在 Unicode 6.3 中（这是 Python 3.4使用的标准），约 10% 的有效码位有对应的字符。\n\n- 字符的具体表述取决于所用的编码。编码是在码位和字节序列之间转换时使用的算法。在 UTF-8 编码中，A（U+0041）的码位编码成单个字节 \\x41，而在 UTF-16LE编码中编码成两个字节 \\x41\\x00。再举个例子，欧元符号（U+20AC）在 UTF-8 编码中是三个字节——\\xe2\\x82\\xac，而在 UTF-16LE 中编码成两个字节：\\xac\\x20。\n\n将码位(code points)转化成字节序列(Bytes)的过程是编码，将字符序列转化为码位的过程是解码。\n\n#### 字节概要 ####\n1. Python 内置了两种基本的二进制序列类型：Python 3 引入的不可变 bytes 类型和 Python 2.6 添加的可变bytearray 类型。   \n2. bytes 或 bytearray 对象的各个元素是介于 0~255(0x0~0xff)之间的整数。   \nbytes对象的切片还是bytes对象，最小单位是长度为1的bytes对象.     \n3. bytearray 对象的切片还是 bytearray 对象。   \n4. 除了格式化方法（format 和 format_map）和几个处理 Unicode 数据的方法（包括casefold、isdecimal、isidentifier、isnumeric、isprintable 和 encode）之外，str 类型的其他方法都支持 bytes 和 bytearray 类型。这意味着，我们可以使用熟悉的字符串方法处理二进制序列，如 endswith、replace、strip、translate、upper等，只有少数几个其他方法的参数是 bytes 对象，而不是 str 对象。此外，如果正则表达式编译自二进制序列而不是字符串，re 模块中的正则表达式函数也能处理二进制序列.   \n5. 二进制序列有个类方法是 str 没有的，名为 fromhex: \n\n```python\nbytes.fromhex('31 4B CE A9')\nb'1K\\xce\\xa9'\n```\n\n新建bytes或bytearray可以调用各自的构造方法:\n\n- 一个str对象和一个encoding参数\n- 一个提供0~0xff的整数的可迭代对象\n- 一个实现了缓冲协议的对象(buffer protocol, 例如bytes, bytearray, memory view, array.array)\n\n#### 结构体和内存视图(struct and memory view) ####\nstruct 模块能处理bytes、bytearray 和 memoryview 对象, 能将打包的字节序列和不同类型字段组成的元组相互转换。   \nmemoryview 类不是用于创建或存储字节序列的，而是共享内存，让你访问其他二进制序列、打包的数组和缓冲中的数据切片，而无需复制字节序列。   \n\n```python\nimport struct\nfmt = '<3s3sHH' \n#格式：< 是小字节序，3s3s 是两个 3 字节序列，HH 是两个 16 位二进制整数。\nwith open('filter.gif', 'rb') as fp:\n    img = memoryview(fp.read()) \n    #创建一个内存视图\n\nheader = img[:10] \n#header也是一个内存视图\nbytes(header) \n# b'GIF89a+\\x02\\xe6\\x00'\nstruct.unpack(fmt, header) \n# (b'GIF', b'89a', 555, 230) 分别代表文件类型,版本,宽度,高度\ndel header \n# 删除引用, 释放内存\ndel img\n```\n\n#### 基本的编解码器 ####\nPython 自带了超过 100 种编解码器（codec, encoder/decoder），用于在文本和字节之间相互转换。每个编解码器都有一个名称，如 'utf_8'，而且经常有几个别名，如'utf8'、'utf-8' 和 'U8'。这些名称可以传给open()、str.encode()、bytes.decode() 等函数的 encoding 参数。\n\n```python\n>>> for codec in ['latin_1', 'utf_8', 'utf_16']:\n... print(codec, 'El Niño'.encode(codec), sep='\\t')\n...\nlatin_1 b'El Ni\\xf1o'\nutf_8 b'El Ni\\xc3\\xb1o'\nutf_16 b'\\xff\\xfeE\\x00l\\x00 \\x00N\\x00i\\x00\\xf1\\x00o\\x00'\n```\n\n某些编码（如 ASCII 和多字节的 GB2312）不能表示所有 Unicode字符。然而，UTF 编码的设计目的就是处理每一个 Unicode 码位。  \n\n一些典型编码:\n\n- latin1: 一种重要的编码，是其他编码的基础，例如 cp1252 和 Unicode（注意，latin1 与cp1252 的字节值是一样的，甚至连码位也相同）\n- cp1252:Microsoft 制定的 latin1 超集，添加了有用的符号，例如弯引号和€（欧元）；有些Windows 应用把它称为“ANSI”，但它并不是 ANSI 标准。\n- cp437: IBM PC 最初的字符集，包含框图符号。与后来出现的 latin1 不兼容。\n- gb2312:用于编码简体中文的陈旧标准；这是亚洲语言中使用较广泛的多字节编码之一。\n- utf-8:目前 Web 中最常见的 8 位编码； 与 ASCII 兼容（纯 ASCII 文本是有效的 UTF-8 文本）。\n- utf-16le: UTF-16 的 16 位编码方案的一种形式；所有 UTF-16 支持通过转义序列（称为“代理对”，surrogate pair）表示超过 U+FFFF 的码位。\n\n#### 编解码中出现的问题 ####\n##### UnicodeEncodeError #####\n把文本转换成字节序列时，如果目标编码中**没有定义**某个字符，那就会抛出 UnicodeEncodeError\n\n##### UnicodeDecodeError #####\n不是每一个字节都包含有效的 ASCII 字符，也不是每一个字符序列都是有效的 UTF-8 或 UTF-16。因此，把二进制序列转换成文本时，如果假设是这两个编码中的一个，遇到无法转换的字节序列时会抛出 UnicodeDecodeError    \n一些陈旧的8位编码可以解码任何字节序列，不抛出错误，但是会得到无用的输出。\n\n##### 使用预期之外的编码加载模块时抛出的SyntaxError #####\nPython 3 默认使用 UTF-8 编码源码，Python 2（从 2.5 开始）则默认使用 ASCII。如果加载的 .py 模块中包含 UTF-8 之外的数据，而且没有声明编码，会抛出SyntaxError   \n这个问题可以在文件的前两行加入#encoding:${encoding_name}解决。\n\n##### 找出一个字节序列的编码 #####\n单纯的字节序列是无法找出编码的，必须通过协议/规定的格式告知解码者。——有些通信协议和文件格式，如 HTTP 和 XML，包含明确指明内容编码的首部。   \n但是字节流也可以通过寻找规则来判断可能的编码: 例如，如果 b'\\x00' 字节经常出现，那么可能是 16 位或 32位编码，而不是 8 位编码方案，因为纯文本中不能包含空字符；如果字节序列b'\\x20\\x00' 经常出现，那么可能是 UTF-16LE 编码中的空格字符（U+0020）    \n统一字符编码侦测包 Chardet（https://pypi.python.org/pypi/chardet）就是这样工作的，它能识别所支持的 30 种编码.    \n\n##### BOM：有用的鬼符 #####\nutf-16编码的序列开头会有几个额外的字节，称为BOM，即字节序标记（byte-order mark），指明字节序。\n小字节序设备中，低8位在前，高8位在后，大字节序的设备则反之。   \nUTF-16 有两个变种：UTF-16LE，显式指明使用小字节序；UTF-16BE，显式指明使用大字节序。如果使用这两个变种，不会生成 BOM    \n与字节序有关的问题只对一个字（word）占多个字节的编码（如 UTF-16 和 UTF-32）有影响。UTF-8 的一大优势是，不管设备使用哪种字节序，生成的字节序列始终一致，因此不需要 BOM。   \n\n#### 处理文本 ####\n处理文本的最佳实践是“Unicode 三明治”（要尽早把输入（例如读取文件时）的字节序列解码成字符串，处理过程全部用字符串，输出时尽量晚编码成字符序列)\n![Figure-4-1](https://github.com/aldslvda/blog-images/blob/master/fluent-python-4.1.png?raw=true)\n\n文本处理中的一些要点:\n\n- 需要在多台设备中或多种场合下运行的代码，一定不能依赖默认编码。打开文件时始终应该明确传入 encoding= 参数，因为不同的设备使用的默认编码可能不同。\n- 除非想判断编码，否则不要在二进制模式中打开文本文件；即便如此，也应该使用 Chardet，而不是重新发明轮子。常规代码只应该使用二进制模式打开二进制文件。\n\n#### 为了正确的比较规范化Unicode 字符串 ####\n在 Unicode 标准中，'é'和 'e\\u0301' 这样的序列叫“标准等价物”（canonical equivalent），应用程序应该把它们视作相同的字符。但是，Python 看到的是不同的码位序列，因此判定二者不相等。    \n上述的问题的解决方案是规范化Unicode字符串。通常是使用 unicodedata.normalize 函数提供的 Unicode 规范化。第一个参数是'NFC'、'NFD'、'NFKC' 和 'NFKD'之一。   \nNFC（Normalization Form C）使用最少的码位构成等价的字符串，而 NFD 把组合字符分解成基字符和单独的组合字符。这两种规范化方式都能让比较行为符合预期。\nNFKC 和 NFKD的首字母缩略词中，字母 K 表示“compatibility”（兼容性）。这两种是较严格的规范化形式，对“兼容字符”有影响。    \n**由于这一节的内容的领域偏向性太过严重，一般工作不会见到，只是略作了解，碰到相关问题再细查**\n\n#### 支持字符串和字节序列的双模式API ####\n##### 正则表达式 #####\n\n如果使用字节序列构建正则表达式，\\d 和 \\w 等模式只能匹配 ASCII 字符；相比之下，如果是字符串模式，就能匹配 ASCII 之外的 Unicode 数字或字母。\n\n```python\nimport re\nre_numbers_str = re.compile(r'\\d+')\nre_words_str = re.compile(r'\\w+')\nre_numbers_bytes = re.compile(rb'\\d+')\nre_words_bytes = re.compile(rb'\\w+')\ntext_str = (\"Ramanujan saw \\u0be7\\u0bed\\u0be8\\u0bef\" \n\" as 1729 = 1³ + 12³ = 9³ + 10³.\") \ntext_bytes = text_str.encode('utf_8') \nprint('Text', repr(text_str), sep='\\n ')\nprint('Numbers')\nprint(' str :', re_numbers_str.findall(text_str)) \nprint(' bytes:', re_numbers_bytes.findall(text_bytes)) \nprint('Words')\nprint(' str :', re_words_str.findall(text_str)) \nprint(' bytes:', re_words_bytes.findall(text_bytes)) \n```\n\n上面这段代码的输出:\n  \n> Text   \n>  'Ramanujan saw ௧௭௨௯ as 1729 = 1³ + 12³ = 9³ + 10³.'   \n> Numbers   \n>  str : ['௧௭௨௯', '1729', '1', '12', '9', '10']   \n>  bytes: [b'1729', b'1', b'12', b'9', b'10']   \n> Words   \n>  str : ['Ramanujan', 'saw', '௧௭௨௯', 'as', '1729', '1³', '12³', '9³', '10³']   \n>  bytes: [b'Ramanujan', b'saw', b'as', b'1729', b'1', b'12', b'9', b'10']   \n\n##### os函数 #####\nGNU/Linux 内核不理解 Unicode，对任何合理的编码方案来说，在文\n件名中使用字节序列都是无效的，无法解码成字符串。在不同操作系统中使用各种客户端的文件服务器，在遇到这个问题时尤其容易出错。    \n为了规避这个问题，os 模块中的所有函数、文件名或路径名参数既能使用字符串，也能使用字节序列。如果这样的函数使用字符串参数调用，该参数会使用sys.getfilesystemencoding() 得到的编解码器自动编码，然后操作系统会使用相同的编解码器解码。这几乎就是我们想要的行为，与 Unicode 三明治最佳实践一致。   \n利用这一特性可以修复一些含有鬼符的文件名。\n\n#### 总结 ####\n1. 随着 Unicode 的广泛使用（80% 的网站已经使用 UTF-8），我们必须把文本字符串与它们在文件中的二进制序列表述区分开，而 Python 3 中这个区分是强制的。   \n2. 这一部分要解决的问题大多是一些由于地区/语言不通造成的编码差异，这种差异可以通过规范化Unicode解决,也可以通过规范化编码解决。   \n3. Unicode 异常复杂，充满特殊情况，而且要覆盖各种人类语言和产业标准策略。所以要做到完美的处理非常困难。    \n4. Python 3.3 起，创建 str 对象时，解释器会检查里面的字符，然后为该字符串选择最经济的内存布局：如果字符都在 latin1 字符集中，那就使用 1 个字节存储每个码位；否则，根据字符串中的具体字符，选择 2 个或 4 个字节存储每个码位。\n5. Python 3 对 int 类型的处理方式：如果一个整数在一个机器字中放得下，那就存储在一个机器字中；否则解释器切换成变长表述，类似于Python 2 中的 long 类型。\n","slug":"fluent-python-4","published":1,"updated":"2019-04-25T01:27:25.242Z","comments":1,"layout":"post","link":"","_id":"cjuw5c6gb003cdhyfze1raqis","content":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-4-Texts-versus-Bytes\"><a href=\"#Chapter-4-Texts-versus-Bytes\" class=\"headerlink\" title=\"Chapter 4. Texts versus Bytes\"></a>Chapter 4. Texts versus Bytes</h3><h3 id=\"第四章-文本和字节\"><a href=\"#第四章-文本和字节\" class=\"headerlink\" title=\"第四章.  文本和字节\"></a>第四章.  文本和字节</h3><p>* 注: 本章中讨论的所有字符和字节的问题以Python3为主<br>Python 3 明确区分了人类可读的文本字符串(text)和原始的字节序列(Bytes)。隐式地把字节序列转换成Unicode文本已成过去。</p>\n<h4 id=\"字符问题\"><a href=\"#字符问题\" class=\"headerlink\" title=\"字符问题\"></a>字符问题</h4><p>字符串是一个相当简单的概念，但是字符的定义比较复杂。<br>Python3的str对象中获取的单个元素是Unicode, 但是Python2的str对象获取的是原始的字节序列。<br>Unicode 标准把字符的标识和具体的字节表述进行了如下的明确区分:   </p>\n<ul>\n<li><p>字符的标识，即码位，是 0~1 114 111(0x10fff)的数字（十进制），在 Unicode 标准中以4~6个十六进制数字表示，而且加前缀“U+”。例如，字母 A 的码位是 U+0041，欧元符号的码位是 U+20AC，高音谱号的码位是 U+1D11E。在 Unicode 6.3 中（这是 Python 3.4使用的标准），约 10% 的有效码位有对应的字符。</p>\n</li>\n<li><p>字符的具体表述取决于所用的编码。编码是在码位和字节序列之间转换时使用的算法。在 UTF-8 编码中，A（U+0041）的码位编码成单个字节 \\x41，而在 UTF-16LE编码中编码成两个字节 \\x41\\x00。再举个例子，欧元符号（U+20AC）在 UTF-8 编码中是三个字节——\\xe2\\x82\\xac，而在 UTF-16LE 中编码成两个字节：\\xac\\x20。</p>\n</li>\n</ul>\n<p>将码位(code points)转化成字节序列(Bytes)的过程是编码，将字符序列转化为码位的过程是解码。</p>\n<h4 id=\"字节概要\"><a href=\"#字节概要\" class=\"headerlink\" title=\"字节概要\"></a>字节概要</h4><ol>\n<li>Python 内置了两种基本的二进制序列类型：Python 3 引入的不可变 bytes 类型和 Python 2.6 添加的可变bytearray 类型。   </li>\n<li>bytes 或 bytearray 对象的各个元素是介于 0~255(0x0~0xff)之间的整数。<br>bytes对象的切片还是bytes对象，最小单位是长度为1的bytes对象.     </li>\n<li>bytearray 对象的切片还是 bytearray 对象。   </li>\n<li>除了格式化方法（format 和 format_map）和几个处理 Unicode 数据的方法（包括casefold、isdecimal、isidentifier、isnumeric、isprintable 和 encode）之外，str 类型的其他方法都支持 bytes 和 bytearray 类型。这意味着，我们可以使用熟悉的字符串方法处理二进制序列，如 endswith、replace、strip、translate、upper等，只有少数几个其他方法的参数是 bytes 对象，而不是 str 对象。此外，如果正则表达式编译自二进制序列而不是字符串，re 模块中的正则表达式函数也能处理二进制序列.   </li>\n<li>二进制序列有个类方法是 str 没有的，名为 fromhex: </li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bytes.fromhex(<span class=\"string\">'31 4B CE A9'</span>)</span><br><span class=\"line\"><span class=\"string\">b'1K\\xce\\xa9'</span></span><br></pre></td></tr></table></figure>\n<p>新建bytes或bytearray可以调用各自的构造方法:</p>\n<ul>\n<li>一个str对象和一个encoding参数</li>\n<li>一个提供0~0xff的整数的可迭代对象</li>\n<li>一个实现了缓冲协议的对象(buffer protocol, 例如bytes, bytearray, memory view, array.array)</li>\n</ul>\n<h4 id=\"结构体和内存视图-struct-and-memory-view\"><a href=\"#结构体和内存视图-struct-and-memory-view\" class=\"headerlink\" title=\"结构体和内存视图(struct and memory view)\"></a>结构体和内存视图(struct and memory view)</h4><p>struct 模块能处理bytes、bytearray 和 memoryview 对象, 能将打包的字节序列和不同类型字段组成的元组相互转换。<br>memoryview 类不是用于创建或存储字节序列的，而是共享内存，让你访问其他二进制序列、打包的数组和缓冲中的数据切片，而无需复制字节序列。   </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\">fmt = <span class=\"string\">'&lt;3s3sHH'</span> </span><br><span class=\"line\"><span class=\"comment\">#格式：&lt; 是小字节序，3s3s 是两个 3 字节序列，HH 是两个 16 位二进制整数。</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'filter.gif'</span>, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    img = memoryview(fp.read()) </span><br><span class=\"line\">    <span class=\"comment\">#创建一个内存视图</span></span><br><span class=\"line\"></span><br><span class=\"line\">header = img[:<span class=\"number\">10</span>] </span><br><span class=\"line\"><span class=\"comment\">#header也是一个内存视图</span></span><br><span class=\"line\">bytes(header) </span><br><span class=\"line\"><span class=\"comment\"># b'GIF89a+\\x02\\xe6\\x00'</span></span><br><span class=\"line\">struct.unpack(fmt, header) </span><br><span class=\"line\"><span class=\"comment\"># (b'GIF', b'89a', 555, 230) 分别代表文件类型,版本,宽度,高度</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> header </span><br><span class=\"line\"><span class=\"comment\"># 删除引用, 释放内存</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> img</span><br></pre></td></tr></table></figure>\n<h4 id=\"基本的编解码器\"><a href=\"#基本的编解码器\" class=\"headerlink\" title=\"基本的编解码器\"></a>基本的编解码器</h4><p>Python 自带了超过 100 种编解码器（codec, encoder/decoder），用于在文本和字节之间相互转换。每个编解码器都有一个名称，如 ‘utf_8’，而且经常有几个别名，如’utf8’、’utf-8’ 和 ‘U8’。这些名称可以传给open()、str.encode()、bytes.decode() 等函数的 encoding 参数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> codec <span class=\"keyword\">in</span> [<span class=\"string\">'latin_1'</span>, <span class=\"string\">'utf_8'</span>, <span class=\"string\">'utf_16'</span>]:</span><br><span class=\"line\"><span class=\"meta\">... </span>print(codec, <span class=\"string\">'El Niño'</span>.encode(codec), sep=<span class=\"string\">'\\t'</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\">latin_1 <span class=\"string\">b'El Ni\\xf1o'</span></span><br><span class=\"line\">utf_8 <span class=\"string\">b'El Ni\\xc3\\xb1o'</span></span><br><span class=\"line\">utf_16 <span class=\"string\">b'\\xff\\xfeE\\x00l\\x00 \\x00N\\x00i\\x00\\xf1\\x00o\\x00'</span></span><br></pre></td></tr></table></figure>\n<p>某些编码（如 ASCII 和多字节的 GB2312）不能表示所有 Unicode字符。然而，UTF 编码的设计目的就是处理每一个 Unicode 码位。  </p>\n<p>一些典型编码:</p>\n<ul>\n<li>latin1: 一种重要的编码，是其他编码的基础，例如 cp1252 和 Unicode（注意，latin1 与cp1252 的字节值是一样的，甚至连码位也相同）</li>\n<li>cp1252:Microsoft 制定的 latin1 超集，添加了有用的符号，例如弯引号和€（欧元）；有些Windows 应用把它称为“ANSI”，但它并不是 ANSI 标准。</li>\n<li>cp437: IBM PC 最初的字符集，包含框图符号。与后来出现的 latin1 不兼容。</li>\n<li>gb2312:用于编码简体中文的陈旧标准；这是亚洲语言中使用较广泛的多字节编码之一。</li>\n<li>utf-8:目前 Web 中最常见的 8 位编码； 与 ASCII 兼容（纯 ASCII 文本是有效的 UTF-8 文本）。</li>\n<li>utf-16le: UTF-16 的 16 位编码方案的一种形式；所有 UTF-16 支持通过转义序列（称为“代理对”，surrogate pair）表示超过 U+FFFF 的码位。</li>\n</ul>\n<h4 id=\"编解码中出现的问题\"><a href=\"#编解码中出现的问题\" class=\"headerlink\" title=\"编解码中出现的问题\"></a>编解码中出现的问题</h4><h5 id=\"UnicodeEncodeError\"><a href=\"#UnicodeEncodeError\" class=\"headerlink\" title=\"UnicodeEncodeError\"></a>UnicodeEncodeError</h5><p>把文本转换成字节序列时，如果目标编码中<strong>没有定义</strong>某个字符，那就会抛出 UnicodeEncodeError</p>\n<h5 id=\"UnicodeDecodeError\"><a href=\"#UnicodeDecodeError\" class=\"headerlink\" title=\"UnicodeDecodeError\"></a>UnicodeDecodeError</h5><p>不是每一个字节都包含有效的 ASCII 字符，也不是每一个字符序列都是有效的 UTF-8 或 UTF-16。因此，把二进制序列转换成文本时，如果假设是这两个编码中的一个，遇到无法转换的字节序列时会抛出 UnicodeDecodeError<br>一些陈旧的8位编码可以解码任何字节序列，不抛出错误，但是会得到无用的输出。</p>\n<h5 id=\"使用预期之外的编码加载模块时抛出的SyntaxError\"><a href=\"#使用预期之外的编码加载模块时抛出的SyntaxError\" class=\"headerlink\" title=\"使用预期之外的编码加载模块时抛出的SyntaxError\"></a>使用预期之外的编码加载模块时抛出的SyntaxError</h5><p>Python 3 默认使用 UTF-8 编码源码，Python 2（从 2.5 开始）则默认使用 ASCII。如果加载的 .py 模块中包含 UTF-8 之外的数据，而且没有声明编码，会抛出SyntaxError<br>这个问题可以在文件的前两行加入#encoding:${encoding_name}解决。</p>\n<h5 id=\"找出一个字节序列的编码\"><a href=\"#找出一个字节序列的编码\" class=\"headerlink\" title=\"找出一个字节序列的编码\"></a>找出一个字节序列的编码</h5><p>单纯的字节序列是无法找出编码的，必须通过协议/规定的格式告知解码者。——有些通信协议和文件格式，如 HTTP 和 XML，包含明确指明内容编码的首部。<br>但是字节流也可以通过寻找规则来判断可能的编码: 例如，如果 b’\\x00’ 字节经常出现，那么可能是 16 位或 32位编码，而不是 8 位编码方案，因为纯文本中不能包含空字符；如果字节序列b’\\x20\\x00’ 经常出现，那么可能是 UTF-16LE 编码中的空格字符（U+0020）<br>统一字符编码侦测包 Chardet（<a href=\"https://pypi.python.org/pypi/chardet）就是这样工作的，它能识别所支持的\" target=\"_blank\" rel=\"noopener\">https://pypi.python.org/pypi/chardet）就是这样工作的，它能识别所支持的</a> 30 种编码.    </p>\n<h5 id=\"BOM：有用的鬼符\"><a href=\"#BOM：有用的鬼符\" class=\"headerlink\" title=\"BOM：有用的鬼符\"></a>BOM：有用的鬼符</h5><p>utf-16编码的序列开头会有几个额外的字节，称为BOM，即字节序标记（byte-order mark），指明字节序。<br>小字节序设备中，低8位在前，高8位在后，大字节序的设备则反之。<br>UTF-16 有两个变种：UTF-16LE，显式指明使用小字节序；UTF-16BE，显式指明使用大字节序。如果使用这两个变种，不会生成 BOM<br>与字节序有关的问题只对一个字（word）占多个字节的编码（如 UTF-16 和 UTF-32）有影响。UTF-8 的一大优势是，不管设备使用哪种字节序，生成的字节序列始终一致，因此不需要 BOM。   </p>\n<h4 id=\"处理文本\"><a href=\"#处理文本\" class=\"headerlink\" title=\"处理文本\"></a>处理文本</h4><p>处理文本的最佳实践是“Unicode 三明治”（要尽早把输入（例如读取文件时）的字节序列解码成字符串，处理过程全部用字符串，输出时尽量晚编码成字符序列)<br><img src=\"https://github.com/aldslvda/blog-images/blob/master/fluent-python-4.1.png?raw=true\" alt=\"Figure-4-1\"></p>\n<p>文本处理中的一些要点:</p>\n<ul>\n<li>需要在多台设备中或多种场合下运行的代码，一定不能依赖默认编码。打开文件时始终应该明确传入 encoding= 参数，因为不同的设备使用的默认编码可能不同。</li>\n<li>除非想判断编码，否则不要在二进制模式中打开文本文件；即便如此，也应该使用 Chardet，而不是重新发明轮子。常规代码只应该使用二进制模式打开二进制文件。</li>\n</ul>\n<h4 id=\"为了正确的比较规范化Unicode-字符串\"><a href=\"#为了正确的比较规范化Unicode-字符串\" class=\"headerlink\" title=\"为了正确的比较规范化Unicode 字符串\"></a>为了正确的比较规范化Unicode 字符串</h4><p>在 Unicode 标准中，’é’和 ‘e\\u0301’ 这样的序列叫“标准等价物”（canonical equivalent），应用程序应该把它们视作相同的字符。但是，Python 看到的是不同的码位序列，因此判定二者不相等。<br>上述的问题的解决方案是规范化Unicode字符串。通常是使用 unicodedata.normalize 函数提供的 Unicode 规范化。第一个参数是’NFC’、’NFD’、’NFKC’ 和 ‘NFKD’之一。<br>NFC（Normalization Form C）使用最少的码位构成等价的字符串，而 NFD 把组合字符分解成基字符和单独的组合字符。这两种规范化方式都能让比较行为符合预期。<br>NFKC 和 NFKD的首字母缩略词中，字母 K 表示“compatibility”（兼容性）。这两种是较严格的规范化形式，对“兼容字符”有影响。<br><strong>由于这一节的内容的领域偏向性太过严重，一般工作不会见到，只是略作了解，碰到相关问题再细查</strong></p>\n<h4 id=\"支持字符串和字节序列的双模式API\"><a href=\"#支持字符串和字节序列的双模式API\" class=\"headerlink\" title=\"支持字符串和字节序列的双模式API\"></a>支持字符串和字节序列的双模式API</h4><h5 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h5><p>如果使用字节序列构建正则表达式，\\d 和 \\w 等模式只能匹配 ASCII 字符；相比之下，如果是字符串模式，就能匹配 ASCII 之外的 Unicode 数字或字母。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">re_numbers_str = re.compile(<span class=\"string\">r'\\d+'</span>)</span><br><span class=\"line\">re_words_str = re.compile(<span class=\"string\">r'\\w+'</span>)</span><br><span class=\"line\">re_numbers_bytes = re.compile(r<span class=\"string\">b'\\d+'</span>)</span><br><span class=\"line\">re_words_bytes = re.compile(r<span class=\"string\">b'\\w+'</span>)</span><br><span class=\"line\">text_str = (<span class=\"string\">\"Ramanujan saw \\u0be7\\u0bed\\u0be8\\u0bef\"</span> </span><br><span class=\"line\"><span class=\"string\">\" as 1729 = 1³ + 12³ = 9³ + 10³.\"</span>) </span><br><span class=\"line\">text_bytes = text_str.encode(<span class=\"string\">'utf_8'</span>) </span><br><span class=\"line\">print(<span class=\"string\">'Text'</span>, repr(text_str), sep=<span class=\"string\">'\\n '</span>)</span><br><span class=\"line\">print(<span class=\"string\">'Numbers'</span>)</span><br><span class=\"line\">print(<span class=\"string\">' str :'</span>, re_numbers_str.findall(text_str)) </span><br><span class=\"line\">print(<span class=\"string\">' bytes:'</span>, re_numbers_bytes.findall(text_bytes)) </span><br><span class=\"line\">print(<span class=\"string\">'Words'</span>)</span><br><span class=\"line\">print(<span class=\"string\">' str :'</span>, re_words_str.findall(text_str)) </span><br><span class=\"line\">print(<span class=\"string\">' bytes:'</span>, re_words_bytes.findall(text_bytes))</span><br></pre></td></tr></table></figure>\n<p>上面这段代码的输出:</p>\n<blockquote>\n<p>Text<br> ‘Ramanujan saw ௧௭௨௯ as 1729 = 1³ + 12³ = 9³ + 10³.’<br>Numbers<br> str : [‘௧௭௨௯’, ‘1729’, ‘1’, ‘12’, ‘9’, ‘10’]<br> bytes: [b’1729’, b’1’, b’12’, b’9’, b’10’]<br>Words<br> str : [‘Ramanujan’, ‘saw’, ‘௧௭௨௯’, ‘as’, ‘1729’, ‘1³’, ‘12³’, ‘9³’, ‘10³’]<br> bytes: [b’Ramanujan’, b’saw’, b’as’, b’1729’, b’1’, b’12’, b’9’, b’10’]   </p>\n</blockquote>\n<h5 id=\"os函数\"><a href=\"#os函数\" class=\"headerlink\" title=\"os函数\"></a>os函数</h5><p>GNU/Linux 内核不理解 Unicode，对任何合理的编码方案来说，在文<br>件名中使用字节序列都是无效的，无法解码成字符串。在不同操作系统中使用各种客户端的文件服务器，在遇到这个问题时尤其容易出错。<br>为了规避这个问题，os 模块中的所有函数、文件名或路径名参数既能使用字符串，也能使用字节序列。如果这样的函数使用字符串参数调用，该参数会使用sys.getfilesystemencoding() 得到的编解码器自动编码，然后操作系统会使用相同的编解码器解码。这几乎就是我们想要的行为，与 Unicode 三明治最佳实践一致。<br>利用这一特性可以修复一些含有鬼符的文件名。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ol>\n<li>随着 Unicode 的广泛使用（80% 的网站已经使用 UTF-8），我们必须把文本字符串与它们在文件中的二进制序列表述区分开，而 Python 3 中这个区分是强制的。   </li>\n<li>这一部分要解决的问题大多是一些由于地区/语言不通造成的编码差异，这种差异可以通过规范化Unicode解决,也可以通过规范化编码解决。   </li>\n<li>Unicode 异常复杂，充满特殊情况，而且要覆盖各种人类语言和产业标准策略。所以要做到完美的处理非常困难。    </li>\n<li>Python 3.3 起，创建 str 对象时，解释器会检查里面的字符，然后为该字符串选择最经济的内存布局：如果字符都在 latin1 字符集中，那就使用 1 个字节存储每个码位；否则，根据字符串中的具体字符，选择 2 个或 4 个字节存储每个码位。</li>\n<li>Python 3 对 int 类型的处理方式：如果一个整数在一个机器字中放得下，那就存储在一个机器字中；否则解释器切换成变长表述，类似于Python 2 中的 long 类型。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-4-Texts-versus-Bytes\"><a href=\"#Chapter-4-Texts-versus-Bytes\" class=\"headerlink\" title=\"Chapter 4. Texts versus Bytes\"></a>Chapter 4. Texts versus Bytes</h3><h3 id=\"第四章-文本和字节\"><a href=\"#第四章-文本和字节\" class=\"headerlink\" title=\"第四章.  文本和字节\"></a>第四章.  文本和字节</h3><p>* 注: 本章中讨论的所有字符和字节的问题以Python3为主<br>Python 3 明确区分了人类可读的文本字符串(text)和原始的字节序列(Bytes)。隐式地把字节序列转换成Unicode文本已成过去。</p>\n<h4 id=\"字符问题\"><a href=\"#字符问题\" class=\"headerlink\" title=\"字符问题\"></a>字符问题</h4><p>字符串是一个相当简单的概念，但是字符的定义比较复杂。<br>Python3的str对象中获取的单个元素是Unicode, 但是Python2的str对象获取的是原始的字节序列。<br>Unicode 标准把字符的标识和具体的字节表述进行了如下的明确区分:   </p>\n<ul>\n<li><p>字符的标识，即码位，是 0~1 114 111(0x10fff)的数字（十进制），在 Unicode 标准中以4~6个十六进制数字表示，而且加前缀“U+”。例如，字母 A 的码位是 U+0041，欧元符号的码位是 U+20AC，高音谱号的码位是 U+1D11E。在 Unicode 6.3 中（这是 Python 3.4使用的标准），约 10% 的有效码位有对应的字符。</p>\n</li>\n<li><p>字符的具体表述取决于所用的编码。编码是在码位和字节序列之间转换时使用的算法。在 UTF-8 编码中，A（U+0041）的码位编码成单个字节 \\x41，而在 UTF-16LE编码中编码成两个字节 \\x41\\x00。再举个例子，欧元符号（U+20AC）在 UTF-8 编码中是三个字节——\\xe2\\x82\\xac，而在 UTF-16LE 中编码成两个字节：\\xac\\x20。</p>\n</li>\n</ul>\n<p>将码位(code points)转化成字节序列(Bytes)的过程是编码，将字符序列转化为码位的过程是解码。</p>\n<h4 id=\"字节概要\"><a href=\"#字节概要\" class=\"headerlink\" title=\"字节概要\"></a>字节概要</h4><ol>\n<li>Python 内置了两种基本的二进制序列类型：Python 3 引入的不可变 bytes 类型和 Python 2.6 添加的可变bytearray 类型。   </li>\n<li>bytes 或 bytearray 对象的各个元素是介于 0~255(0x0~0xff)之间的整数。<br>bytes对象的切片还是bytes对象，最小单位是长度为1的bytes对象.     </li>\n<li>bytearray 对象的切片还是 bytearray 对象。   </li>\n<li>除了格式化方法（format 和 format_map）和几个处理 Unicode 数据的方法（包括casefold、isdecimal、isidentifier、isnumeric、isprintable 和 encode）之外，str 类型的其他方法都支持 bytes 和 bytearray 类型。这意味着，我们可以使用熟悉的字符串方法处理二进制序列，如 endswith、replace、strip、translate、upper等，只有少数几个其他方法的参数是 bytes 对象，而不是 str 对象。此外，如果正则表达式编译自二进制序列而不是字符串，re 模块中的正则表达式函数也能处理二进制序列.   </li>\n<li>二进制序列有个类方法是 str 没有的，名为 fromhex: </li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bytes.fromhex(<span class=\"string\">'31 4B CE A9'</span>)</span><br><span class=\"line\"><span class=\"string\">b'1K\\xce\\xa9'</span></span><br></pre></td></tr></table></figure>\n<p>新建bytes或bytearray可以调用各自的构造方法:</p>\n<ul>\n<li>一个str对象和一个encoding参数</li>\n<li>一个提供0~0xff的整数的可迭代对象</li>\n<li>一个实现了缓冲协议的对象(buffer protocol, 例如bytes, bytearray, memory view, array.array)</li>\n</ul>\n<h4 id=\"结构体和内存视图-struct-and-memory-view\"><a href=\"#结构体和内存视图-struct-and-memory-view\" class=\"headerlink\" title=\"结构体和内存视图(struct and memory view)\"></a>结构体和内存视图(struct and memory view)</h4><p>struct 模块能处理bytes、bytearray 和 memoryview 对象, 能将打包的字节序列和不同类型字段组成的元组相互转换。<br>memoryview 类不是用于创建或存储字节序列的，而是共享内存，让你访问其他二进制序列、打包的数组和缓冲中的数据切片，而无需复制字节序列。   </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\">fmt = <span class=\"string\">'&lt;3s3sHH'</span> </span><br><span class=\"line\"><span class=\"comment\">#格式：&lt; 是小字节序，3s3s 是两个 3 字节序列，HH 是两个 16 位二进制整数。</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'filter.gif'</span>, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    img = memoryview(fp.read()) </span><br><span class=\"line\">    <span class=\"comment\">#创建一个内存视图</span></span><br><span class=\"line\"></span><br><span class=\"line\">header = img[:<span class=\"number\">10</span>] </span><br><span class=\"line\"><span class=\"comment\">#header也是一个内存视图</span></span><br><span class=\"line\">bytes(header) </span><br><span class=\"line\"><span class=\"comment\"># b'GIF89a+\\x02\\xe6\\x00'</span></span><br><span class=\"line\">struct.unpack(fmt, header) </span><br><span class=\"line\"><span class=\"comment\"># (b'GIF', b'89a', 555, 230) 分别代表文件类型,版本,宽度,高度</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> header </span><br><span class=\"line\"><span class=\"comment\"># 删除引用, 释放内存</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> img</span><br></pre></td></tr></table></figure>\n<h4 id=\"基本的编解码器\"><a href=\"#基本的编解码器\" class=\"headerlink\" title=\"基本的编解码器\"></a>基本的编解码器</h4><p>Python 自带了超过 100 种编解码器（codec, encoder/decoder），用于在文本和字节之间相互转换。每个编解码器都有一个名称，如 ‘utf_8’，而且经常有几个别名，如’utf8’、’utf-8’ 和 ‘U8’。这些名称可以传给open()、str.encode()、bytes.decode() 等函数的 encoding 参数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> codec <span class=\"keyword\">in</span> [<span class=\"string\">'latin_1'</span>, <span class=\"string\">'utf_8'</span>, <span class=\"string\">'utf_16'</span>]:</span><br><span class=\"line\"><span class=\"meta\">... </span>print(codec, <span class=\"string\">'El Niño'</span>.encode(codec), sep=<span class=\"string\">'\\t'</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\">latin_1 <span class=\"string\">b'El Ni\\xf1o'</span></span><br><span class=\"line\">utf_8 <span class=\"string\">b'El Ni\\xc3\\xb1o'</span></span><br><span class=\"line\">utf_16 <span class=\"string\">b'\\xff\\xfeE\\x00l\\x00 \\x00N\\x00i\\x00\\xf1\\x00o\\x00'</span></span><br></pre></td></tr></table></figure>\n<p>某些编码（如 ASCII 和多字节的 GB2312）不能表示所有 Unicode字符。然而，UTF 编码的设计目的就是处理每一个 Unicode 码位。  </p>\n<p>一些典型编码:</p>\n<ul>\n<li>latin1: 一种重要的编码，是其他编码的基础，例如 cp1252 和 Unicode（注意，latin1 与cp1252 的字节值是一样的，甚至连码位也相同）</li>\n<li>cp1252:Microsoft 制定的 latin1 超集，添加了有用的符号，例如弯引号和€（欧元）；有些Windows 应用把它称为“ANSI”，但它并不是 ANSI 标准。</li>\n<li>cp437: IBM PC 最初的字符集，包含框图符号。与后来出现的 latin1 不兼容。</li>\n<li>gb2312:用于编码简体中文的陈旧标准；这是亚洲语言中使用较广泛的多字节编码之一。</li>\n<li>utf-8:目前 Web 中最常见的 8 位编码； 与 ASCII 兼容（纯 ASCII 文本是有效的 UTF-8 文本）。</li>\n<li>utf-16le: UTF-16 的 16 位编码方案的一种形式；所有 UTF-16 支持通过转义序列（称为“代理对”，surrogate pair）表示超过 U+FFFF 的码位。</li>\n</ul>\n<h4 id=\"编解码中出现的问题\"><a href=\"#编解码中出现的问题\" class=\"headerlink\" title=\"编解码中出现的问题\"></a>编解码中出现的问题</h4><h5 id=\"UnicodeEncodeError\"><a href=\"#UnicodeEncodeError\" class=\"headerlink\" title=\"UnicodeEncodeError\"></a>UnicodeEncodeError</h5><p>把文本转换成字节序列时，如果目标编码中<strong>没有定义</strong>某个字符，那就会抛出 UnicodeEncodeError</p>\n<h5 id=\"UnicodeDecodeError\"><a href=\"#UnicodeDecodeError\" class=\"headerlink\" title=\"UnicodeDecodeError\"></a>UnicodeDecodeError</h5><p>不是每一个字节都包含有效的 ASCII 字符，也不是每一个字符序列都是有效的 UTF-8 或 UTF-16。因此，把二进制序列转换成文本时，如果假设是这两个编码中的一个，遇到无法转换的字节序列时会抛出 UnicodeDecodeError<br>一些陈旧的8位编码可以解码任何字节序列，不抛出错误，但是会得到无用的输出。</p>\n<h5 id=\"使用预期之外的编码加载模块时抛出的SyntaxError\"><a href=\"#使用预期之外的编码加载模块时抛出的SyntaxError\" class=\"headerlink\" title=\"使用预期之外的编码加载模块时抛出的SyntaxError\"></a>使用预期之外的编码加载模块时抛出的SyntaxError</h5><p>Python 3 默认使用 UTF-8 编码源码，Python 2（从 2.5 开始）则默认使用 ASCII。如果加载的 .py 模块中包含 UTF-8 之外的数据，而且没有声明编码，会抛出SyntaxError<br>这个问题可以在文件的前两行加入#encoding:${encoding_name}解决。</p>\n<h5 id=\"找出一个字节序列的编码\"><a href=\"#找出一个字节序列的编码\" class=\"headerlink\" title=\"找出一个字节序列的编码\"></a>找出一个字节序列的编码</h5><p>单纯的字节序列是无法找出编码的，必须通过协议/规定的格式告知解码者。——有些通信协议和文件格式，如 HTTP 和 XML，包含明确指明内容编码的首部。<br>但是字节流也可以通过寻找规则来判断可能的编码: 例如，如果 b’\\x00’ 字节经常出现，那么可能是 16 位或 32位编码，而不是 8 位编码方案，因为纯文本中不能包含空字符；如果字节序列b’\\x20\\x00’ 经常出现，那么可能是 UTF-16LE 编码中的空格字符（U+0020）<br>统一字符编码侦测包 Chardet（<a href=\"https://pypi.python.org/pypi/chardet）就是这样工作的，它能识别所支持的\" target=\"_blank\" rel=\"noopener\">https://pypi.python.org/pypi/chardet）就是这样工作的，它能识别所支持的</a> 30 种编码.    </p>\n<h5 id=\"BOM：有用的鬼符\"><a href=\"#BOM：有用的鬼符\" class=\"headerlink\" title=\"BOM：有用的鬼符\"></a>BOM：有用的鬼符</h5><p>utf-16编码的序列开头会有几个额外的字节，称为BOM，即字节序标记（byte-order mark），指明字节序。<br>小字节序设备中，低8位在前，高8位在后，大字节序的设备则反之。<br>UTF-16 有两个变种：UTF-16LE，显式指明使用小字节序；UTF-16BE，显式指明使用大字节序。如果使用这两个变种，不会生成 BOM<br>与字节序有关的问题只对一个字（word）占多个字节的编码（如 UTF-16 和 UTF-32）有影响。UTF-8 的一大优势是，不管设备使用哪种字节序，生成的字节序列始终一致，因此不需要 BOM。   </p>\n<h4 id=\"处理文本\"><a href=\"#处理文本\" class=\"headerlink\" title=\"处理文本\"></a>处理文本</h4><p>处理文本的最佳实践是“Unicode 三明治”（要尽早把输入（例如读取文件时）的字节序列解码成字符串，处理过程全部用字符串，输出时尽量晚编码成字符序列)<br><img src=\"https://github.com/aldslvda/blog-images/blob/master/fluent-python-4.1.png?raw=true\" alt=\"Figure-4-1\"></p>\n<p>文本处理中的一些要点:</p>\n<ul>\n<li>需要在多台设备中或多种场合下运行的代码，一定不能依赖默认编码。打开文件时始终应该明确传入 encoding= 参数，因为不同的设备使用的默认编码可能不同。</li>\n<li>除非想判断编码，否则不要在二进制模式中打开文本文件；即便如此，也应该使用 Chardet，而不是重新发明轮子。常规代码只应该使用二进制模式打开二进制文件。</li>\n</ul>\n<h4 id=\"为了正确的比较规范化Unicode-字符串\"><a href=\"#为了正确的比较规范化Unicode-字符串\" class=\"headerlink\" title=\"为了正确的比较规范化Unicode 字符串\"></a>为了正确的比较规范化Unicode 字符串</h4><p>在 Unicode 标准中，’é’和 ‘e\\u0301’ 这样的序列叫“标准等价物”（canonical equivalent），应用程序应该把它们视作相同的字符。但是，Python 看到的是不同的码位序列，因此判定二者不相等。<br>上述的问题的解决方案是规范化Unicode字符串。通常是使用 unicodedata.normalize 函数提供的 Unicode 规范化。第一个参数是’NFC’、’NFD’、’NFKC’ 和 ‘NFKD’之一。<br>NFC（Normalization Form C）使用最少的码位构成等价的字符串，而 NFD 把组合字符分解成基字符和单独的组合字符。这两种规范化方式都能让比较行为符合预期。<br>NFKC 和 NFKD的首字母缩略词中，字母 K 表示“compatibility”（兼容性）。这两种是较严格的规范化形式，对“兼容字符”有影响。<br><strong>由于这一节的内容的领域偏向性太过严重，一般工作不会见到，只是略作了解，碰到相关问题再细查</strong></p>\n<h4 id=\"支持字符串和字节序列的双模式API\"><a href=\"#支持字符串和字节序列的双模式API\" class=\"headerlink\" title=\"支持字符串和字节序列的双模式API\"></a>支持字符串和字节序列的双模式API</h4><h5 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h5><p>如果使用字节序列构建正则表达式，\\d 和 \\w 等模式只能匹配 ASCII 字符；相比之下，如果是字符串模式，就能匹配 ASCII 之外的 Unicode 数字或字母。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">re_numbers_str = re.compile(<span class=\"string\">r'\\d+'</span>)</span><br><span class=\"line\">re_words_str = re.compile(<span class=\"string\">r'\\w+'</span>)</span><br><span class=\"line\">re_numbers_bytes = re.compile(r<span class=\"string\">b'\\d+'</span>)</span><br><span class=\"line\">re_words_bytes = re.compile(r<span class=\"string\">b'\\w+'</span>)</span><br><span class=\"line\">text_str = (<span class=\"string\">\"Ramanujan saw \\u0be7\\u0bed\\u0be8\\u0bef\"</span> </span><br><span class=\"line\"><span class=\"string\">\" as 1729 = 1³ + 12³ = 9³ + 10³.\"</span>) </span><br><span class=\"line\">text_bytes = text_str.encode(<span class=\"string\">'utf_8'</span>) </span><br><span class=\"line\">print(<span class=\"string\">'Text'</span>, repr(text_str), sep=<span class=\"string\">'\\n '</span>)</span><br><span class=\"line\">print(<span class=\"string\">'Numbers'</span>)</span><br><span class=\"line\">print(<span class=\"string\">' str :'</span>, re_numbers_str.findall(text_str)) </span><br><span class=\"line\">print(<span class=\"string\">' bytes:'</span>, re_numbers_bytes.findall(text_bytes)) </span><br><span class=\"line\">print(<span class=\"string\">'Words'</span>)</span><br><span class=\"line\">print(<span class=\"string\">' str :'</span>, re_words_str.findall(text_str)) </span><br><span class=\"line\">print(<span class=\"string\">' bytes:'</span>, re_words_bytes.findall(text_bytes))</span><br></pre></td></tr></table></figure>\n<p>上面这段代码的输出:</p>\n<blockquote>\n<p>Text<br> ‘Ramanujan saw ௧௭௨௯ as 1729 = 1³ + 12³ = 9³ + 10³.’<br>Numbers<br> str : [‘௧௭௨௯’, ‘1729’, ‘1’, ‘12’, ‘9’, ‘10’]<br> bytes: [b’1729’, b’1’, b’12’, b’9’, b’10’]<br>Words<br> str : [‘Ramanujan’, ‘saw’, ‘௧௭௨௯’, ‘as’, ‘1729’, ‘1³’, ‘12³’, ‘9³’, ‘10³’]<br> bytes: [b’Ramanujan’, b’saw’, b’as’, b’1729’, b’1’, b’12’, b’9’, b’10’]   </p>\n</blockquote>\n<h5 id=\"os函数\"><a href=\"#os函数\" class=\"headerlink\" title=\"os函数\"></a>os函数</h5><p>GNU/Linux 内核不理解 Unicode，对任何合理的编码方案来说，在文<br>件名中使用字节序列都是无效的，无法解码成字符串。在不同操作系统中使用各种客户端的文件服务器，在遇到这个问题时尤其容易出错。<br>为了规避这个问题，os 模块中的所有函数、文件名或路径名参数既能使用字符串，也能使用字节序列。如果这样的函数使用字符串参数调用，该参数会使用sys.getfilesystemencoding() 得到的编解码器自动编码，然后操作系统会使用相同的编解码器解码。这几乎就是我们想要的行为，与 Unicode 三明治最佳实践一致。<br>利用这一特性可以修复一些含有鬼符的文件名。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ol>\n<li>随着 Unicode 的广泛使用（80% 的网站已经使用 UTF-8），我们必须把文本字符串与它们在文件中的二进制序列表述区分开，而 Python 3 中这个区分是强制的。   </li>\n<li>这一部分要解决的问题大多是一些由于地区/语言不通造成的编码差异，这种差异可以通过规范化Unicode解决,也可以通过规范化编码解决。   </li>\n<li>Unicode 异常复杂，充满特殊情况，而且要覆盖各种人类语言和产业标准策略。所以要做到完美的处理非常困难。    </li>\n<li>Python 3.3 起，创建 str 对象时，解释器会检查里面的字符，然后为该字符串选择最经济的内存布局：如果字符都在 latin1 字符集中，那就使用 1 个字节存储每个码位；否则，根据字符串中的具体字符，选择 2 个或 4 个字节存储每个码位。</li>\n<li>Python 3 对 int 类型的处理方式：如果一个整数在一个机器字中放得下，那就存储在一个机器字中；否则解释器切换成变长表述，类似于Python 2 中的 long 类型。</li>\n</ol>\n"},{"title":"fluent python 第五章小记","date":"2017-12-13T13:21:21.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true"],"toc":true,"comment":true,"_content":"\n## Fluent Python ##\n### Chapter 5. First Class Functions ###\n### 第五章. 一等函数\n首先解释一下标题的含义:   \n编程语言理论家把“一等对象”定义为满足下述条件的程序实体：\n\n- 在运行时创建\n- 能赋值给变量或数据结构中的元素\n- 能作为参数传给函数\n- 能作为函数的返回结果\n\n在Python中，整数、字符串和字典都是一等对象，特别提到的是，函数也是一等对象，这一特性称为一等函数。\n\n#### 把函数视作对象\n\n```python\n\n>>> print.__doc__\n\"print(value, ..., sep=' ', end='\\\\n', file=sys.stdout, flush=False)\\n\\nPrints the values to a stream, or to sys.stdout by default.\\nOptional keyword arguments:\\nfile:  a file-like object (stream); defaults to the current sys.stdout.\\nsep:   string inserted between values, default a space.\\nend:   string appended after the last value, default a newline.\\nflush: whether to forcibly flush the stream.\"\n>>> type(print)\n<class 'builtin_function_or_method'>\n\n```\n\n由上面的控制台输出可以看到函数print有一个名为\\_\\_doc\\_\\_的属性, 同时是builtin\\_function\\_or\\_method的一个实例。\n\n```python\n\n>> def plus(a):\n...     return a+1\n...\n>>> map(plus, range(10))\n<map object at 0x109553c50>\n>>> list(map(plus, range(10)))\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n```\n\n由上面的控制台输出可以看到函数是可以作为参数被传递的。   \n有了一等函数，就可以使用函数式编程。\n\n#### 高阶函数    \n接受函数为参数，或者把函数作为结果返回的函数是高阶函数（higher-orderfunction），第一节中提到的map就是一个高阶函数。\n\n##### 常见的高阶函数\n函数式语言通常会提供map、filter和reduce这三个高阶函数。\n\n- 在Python中，map/filter有更好用的替代品，Python2中map/filter返回的是列表，所以比较好的替代品是列表推导，Python3中这两个函数的返回则是生成器，所以比较好的替代是生成器表达式   \n\nreduce比较特别：\n\n```python\n\n>>> from functools import reduce \n>>> from operator import add \n>>> reduce(add, range(100)) \n4950\n>>> sum(100)\n4950\n\n```\n\nsum 和 reduce 的通用思想是把某个操作连续应用到序列的元素上，累计之前的结果，把一系列值归约成一个值。     \n类似的归约函数还有all()和any(), all()传入一个可迭代对象，若所有元素都为True,返回True,否则返回False; 而any()只要有一个True就返回True。\n\n#### 匿名函数  \n为了使用高阶函数，有时创建一次性的小型函数更便利， 这便是匿名函数的由来。\n\nlamda函数就是在python表达式内创建匿名函数，但由于句法的限制，lambda函数的定义体只能用纯表达式。\n\n\"Functional Programming HOWTO\" 中提到，如果使用lambda表达式使得代码难以理解，建议按下面的步骤重构:\n\n- 编写注释，说明lambda表达式的作用       \n- 研究注释，用一个名称概括       \n- 用这个名称定义一个函数，把lambda表达式转换成这个函数    \n- 删除注释\n\n#### 可调用对象\nPython 的数据模型文档指出了7种可调用对象：\n\n- 用户定义的函数:    \n    使用lambda表达式或者def语句创建  \n- 内置函数: \n    使用CPython实现的函数   \n- 内置方法:\n    使用C语言实现的方法   \n- 方法:\n    类的定义题中实现的函数   \n- 类:\n    调用时会创建一个实例，然后执行构造函数\n- 类的实例:\n    如果类定义了\\_\\_call\\_\\_方法，那么它的实例可以作为函数调用。  \n- 生成器函数:\n    使用了yeild关键字的函数或方法, 返回生成器对象。\n\n#### 用户定义的可调用类型\n不仅python函数式对象，对象也可以表现得像函数，只需要实现方法\\_\\_call\\_\\_。\n\n```python\n\nimport random\nclass BingoCage:\n    def __init__(self, items):\n        self._items = list(items)\n        random.shuffle(self._items)\n    def pick(self):\n        try:\n            return self._items.pop()\n        except IndexError:\n            raise LookupError('pick from empty BingoCage')\n    def __call__(self):\n        return self.pick()\n\n```\n这样调用BingoCage的实例时，效果和调用pick方法一样。  \n\n实现 \\_\\_call\\_\\_ 方法的类是创建函数类对象的简便方式，此时必须在内部维护一个状态，让它在调用之间可用，例如 BingoCage 中的剩余元素。装饰器就是这样。装饰器必须是函数，而且有时要在多次调用之间“记住”某些事 [ 例如备忘（memoization），即缓存消耗大的计算结果，供后面使用 ]。\n\n创建保有内部状态的函数，还有一种截然不同的方式 —— 使用闭包。\n\n#### 从定位参数到仅限关键字参数    \nPython提供了极为灵活的参数处理机制，Python3提供了 keyword-only argument。调用函数时使用*和*展开可迭代对象，映射到单个参数。  \n\n下面的例子中，tag函数用于生成html标签\n\n```python\n\ndef tag(name, *content, cls=None, **attrs):\n    \"\"\"生成一个或多个HTML标签\"\"\"\n    if cls is not None:\n        attrs['class'] = cls\n    if attrs:\n        attr_str = ''.join(' %s=\"%s\"' % (attr, value)\n                        for attr, value in sorted(attrs.items()))\n    else:\n        attr_str = ''\n    if content:\n        return '\\n'.join('<%s%s>%s</%s>' %\n                (name, attr_str, c, name) for c in content)\n    else:\n        return '<%s%s />' % (name, attr_str)\n\n```\n\n下面是这个函数的几种调用方式\n\n```python\n\n>>> tag('br')\n'<br />'\n>>> tag('p', 'hello')\n'<p>hello</p>'\n>>> print(tag('p', 'hello', 'world'))\n<p>hello</p>\n<p>world</p>\n>>> tag('p', 'hello', id=33)\n'<p id=\"33\">hello</p>'\n>>> print(tag('p', 'hello', 'world', cls='sidebar'))\n<p class=\"sidebar\">hello</p>\n<p class=\"sidebar\">world</p>\n>>> tag(content='testing', name=\"img\")\n'<img content=\"testing\" />'\n>>> my_tag = {'name': 'img', 'title': 'Sunset Boulevard',\n... 'src': 'sunset.jpg', 'cls': 'framed'}\n>>> tag(**my_tag)\n'<img class=\"framed\" src=\"sunset.jpg\" title=\"Sunset Boulevard\" />'\n\n```\n\n#### 获取关于参数的信息    \n这里举一个处理web请求的例子: \n\n```python\n\nimport bobo\n@bobo.query('/')\ndef hello(person):\n    return 'Hello %s!' % person\n\n```\n在上面这段代码中，bobo是一个web微框架，bobo.query()装饰器将hello()函数与请求处理机制结合在一起，使得hello()自动接收请求中的person作为参数，若没有person参数，则返回403.\n\n函数对象有个 \\_\\_defaults\\_\\_ 属性，它的值是一个元组，里面保存着定位参数和关键字参数的默认值。仅限关键字参数的默认值在 \\_\\_kwdefaults\\_\\_ 属性中。然而，参数的名称在 \\_\\_code\\_\\_ 属性中，它的值是一个 code 对象引用，自身也有很多属性。\n\n下面举一个[clip.py](https://github.com/aldslvda/readings/blob/master/Fluent-Python/5.%20First%20Class%20Functions/clip.py)的例子，讲解函数对象用于获取参数信息的属性。\n\n```python\n\ndef clip(text, max_len=80):\n    \"\"\"在max_len前面或后面的第一个空格处截断文本\n    \"\"\"\n    end = None\n    if len(text) > max_len:\n        space_before = text.rfind(' ', 0, max_len)\n        if space_before >= 0:\n            end = space_before\n        else:\n            space_after = text.rfind(' ', max_len)\n        if space_after >= 0:\n            end = space_after\n            if end is None: # 没找到空格\n                end = len(text)\n    return text[:end].rstrip()\n\n```\n\n我们在控制台输入下面的命令，查看属性\n\n```python\n\n>>> from clip import clip\n>>> clip.__defaults__\n(80,)\n>>> clip.__code__\n<code object clip at 0x10dadcc90, file \"/Users/NickAl/study/github/readings/Fluent-Python/5. First Class Functions/clip.py\", line 2>\n>>> clip.__code__.co_varnames\n('text', 'max_len', 'end', 'space_before', 'space_after')\n>>> clip.__code__.co_argcount\n2\n\n```\n\n参数名称在 \\_\\_code\\_\\_.co\\_varnames中，不过里面还有函数定义体中创建的局部变量。因此，参数名称是前 N 个字符串，N的值由 \\_\\_code\\\\_.co\\_argcount 确定。顺便说一下，这里不包含前缀为 * 或 ** 的长度可变的参数。参数的默认值只能通过它们在 \\_\\_defaults\\_\\_ 元组中的位置确定，因此要从后向前扫描才能把参数和默认值对应起来。\n\n另一种查看属性的方式是，使用inspect 模块\n\n```python\n>>> from clip import clip\n>>> from inspect import signature\n>>> sig = signature(clip)\n>>> sig\n<Signature (text, max_len=80)>\n>>> for name, param in sig.parameters.items():\n...     print(param.kind, ':', name, '=', param.default)\n...\nPOSITIONAL_OR_KEYWORD : text = <class 'inspect._empty'>\nPOSITIONAL_OR_KEYWORD : max_len = 80\n\n```\n\ninspect.signature 函数返回一个 inspect.Signature 对象，它有一个 parameters 属性，这是一个有序映射，把参数名和 inspect.Parameter 对象对应起来。\n\ninspect.Signature的kind属性有下面5种:\n\n- POSITIONAL\\_OR\\_KEYWORD:可以通过定位参数和关键字参数传入的形参（多数 Python 函数的参数属于此类）。\n- VAR\\_POSITIONAL:定位参数元组。\n- VAR\\_KEYWORD:关键字参数字典。\n- KEYWORD\\_ONLY:仅限关键字参数（Python 3 新增）。\n- POSITIONAL\\_ONLY:仅限定位参数；目前，Python 声明函数的句法不支持，但是有些使用 C 语言实现且不接受关键字参数的函数（如 divmod）支持。\n\n#### 函数注解\n\nPython 3 提供了一种句法，用于为函数声明中的参数和返回值附加元数据, 这就是注解。\n在clip.py中声明一个新的函数clip\\_with\\_anno, 只在声明时加入注解，其他一样。\n\n```python\n\ndef clip_with_anno(text:str, max_len: 'int > 0' = 80) -> str:\n\n```\n\n```python\n\n>>> from clip import clip_with_anno\n>>> clip_with_anno.__annotations__\n{'text': <class 'str'>, 'max_len': 'int > 0', 'return': <class 'str'>}\n\n```\n\n注解和参数、返回值的对应关系一目了然。然而Python本身对注解没有任何操作。\n\n#### Python标准库中为支持函数式编程提供的包\n\n##### operator模块\n下面展示了使用reduce计算阶乘的两种方式，区别是是否使用了operator库。\n\n```python\n\nfrom functools import reduce\nfrom operator import mul\n\ndef fact(n):\n    return reduce(lambda a, b: a*b, range(1, n+1))\ndef fact_with_mul(n):\n    return reduce(mul, range(1, n+1))\n\n```\n\n上面的例子使用mul避免了lambda表达式的使用。\noperator还提供了一些有效的函数:\n\n- attrgetter 与 itemgetter这样获取对象属性和可迭代对象的元素的函数。\n- methodcaller 创建的函数会在对象上调用参数指定的方法\n\n##### functools.partial\nfunctools.partial 这个高阶函数用于**部分应用**一个函数。部分应用是指，基于一个函数创建一个新的可调用对象，把原函数的某些参数固定。使用这个函数可以把接受一个或多个参数的函数改编成需要回调的 API，这样参数更少.\n\n```python\n\n>>> from operator import mul\n>>> from functools import partial\n>>> triple = partial(mul, 3)\n>>> triple(7)\n21\n>>> list(map(triple, range(1, 10)))\n[3, 6, 9, 12, 15, 18, 21, 24, 27]\n\n```\n\n#### 小结\n这一小节主要讲了Python函数的一等性质，即函数也是对象这一概念，并说明了这一性质的一部分应用场景，以及功能有限的lambda函数的一些替代方式。\n\n高强度加班了两周，终终终终于有时间吧这章看完啦![1](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/01.png?raw=true)\n\nTo be continued ... 敬请期待![1](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/25.png?raw=true)\n","source":"_posts/fluent-python-5.md","raw":"title: fluent python 第五章小记\ndate: 2017-12-13 21:21:21\ntags:\n- Python\n- functional\n- fluent python\ncategories:\n- 读书笔记\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n## Fluent Python ##\n### Chapter 5. First Class Functions ###\n### 第五章. 一等函数\n首先解释一下标题的含义:   \n编程语言理论家把“一等对象”定义为满足下述条件的程序实体：\n\n- 在运行时创建\n- 能赋值给变量或数据结构中的元素\n- 能作为参数传给函数\n- 能作为函数的返回结果\n\n在Python中，整数、字符串和字典都是一等对象，特别提到的是，函数也是一等对象，这一特性称为一等函数。\n\n#### 把函数视作对象\n\n```python\n\n>>> print.__doc__\n\"print(value, ..., sep=' ', end='\\\\n', file=sys.stdout, flush=False)\\n\\nPrints the values to a stream, or to sys.stdout by default.\\nOptional keyword arguments:\\nfile:  a file-like object (stream); defaults to the current sys.stdout.\\nsep:   string inserted between values, default a space.\\nend:   string appended after the last value, default a newline.\\nflush: whether to forcibly flush the stream.\"\n>>> type(print)\n<class 'builtin_function_or_method'>\n\n```\n\n由上面的控制台输出可以看到函数print有一个名为\\_\\_doc\\_\\_的属性, 同时是builtin\\_function\\_or\\_method的一个实例。\n\n```python\n\n>> def plus(a):\n...     return a+1\n...\n>>> map(plus, range(10))\n<map object at 0x109553c50>\n>>> list(map(plus, range(10)))\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n```\n\n由上面的控制台输出可以看到函数是可以作为参数被传递的。   \n有了一等函数，就可以使用函数式编程。\n\n#### 高阶函数    \n接受函数为参数，或者把函数作为结果返回的函数是高阶函数（higher-orderfunction），第一节中提到的map就是一个高阶函数。\n\n##### 常见的高阶函数\n函数式语言通常会提供map、filter和reduce这三个高阶函数。\n\n- 在Python中，map/filter有更好用的替代品，Python2中map/filter返回的是列表，所以比较好的替代品是列表推导，Python3中这两个函数的返回则是生成器，所以比较好的替代是生成器表达式   \n\nreduce比较特别：\n\n```python\n\n>>> from functools import reduce \n>>> from operator import add \n>>> reduce(add, range(100)) \n4950\n>>> sum(100)\n4950\n\n```\n\nsum 和 reduce 的通用思想是把某个操作连续应用到序列的元素上，累计之前的结果，把一系列值归约成一个值。     \n类似的归约函数还有all()和any(), all()传入一个可迭代对象，若所有元素都为True,返回True,否则返回False; 而any()只要有一个True就返回True。\n\n#### 匿名函数  \n为了使用高阶函数，有时创建一次性的小型函数更便利， 这便是匿名函数的由来。\n\nlamda函数就是在python表达式内创建匿名函数，但由于句法的限制，lambda函数的定义体只能用纯表达式。\n\n\"Functional Programming HOWTO\" 中提到，如果使用lambda表达式使得代码难以理解，建议按下面的步骤重构:\n\n- 编写注释，说明lambda表达式的作用       \n- 研究注释，用一个名称概括       \n- 用这个名称定义一个函数，把lambda表达式转换成这个函数    \n- 删除注释\n\n#### 可调用对象\nPython 的数据模型文档指出了7种可调用对象：\n\n- 用户定义的函数:    \n    使用lambda表达式或者def语句创建  \n- 内置函数: \n    使用CPython实现的函数   \n- 内置方法:\n    使用C语言实现的方法   \n- 方法:\n    类的定义题中实现的函数   \n- 类:\n    调用时会创建一个实例，然后执行构造函数\n- 类的实例:\n    如果类定义了\\_\\_call\\_\\_方法，那么它的实例可以作为函数调用。  \n- 生成器函数:\n    使用了yeild关键字的函数或方法, 返回生成器对象。\n\n#### 用户定义的可调用类型\n不仅python函数式对象，对象也可以表现得像函数，只需要实现方法\\_\\_call\\_\\_。\n\n```python\n\nimport random\nclass BingoCage:\n    def __init__(self, items):\n        self._items = list(items)\n        random.shuffle(self._items)\n    def pick(self):\n        try:\n            return self._items.pop()\n        except IndexError:\n            raise LookupError('pick from empty BingoCage')\n    def __call__(self):\n        return self.pick()\n\n```\n这样调用BingoCage的实例时，效果和调用pick方法一样。  \n\n实现 \\_\\_call\\_\\_ 方法的类是创建函数类对象的简便方式，此时必须在内部维护一个状态，让它在调用之间可用，例如 BingoCage 中的剩余元素。装饰器就是这样。装饰器必须是函数，而且有时要在多次调用之间“记住”某些事 [ 例如备忘（memoization），即缓存消耗大的计算结果，供后面使用 ]。\n\n创建保有内部状态的函数，还有一种截然不同的方式 —— 使用闭包。\n\n#### 从定位参数到仅限关键字参数    \nPython提供了极为灵活的参数处理机制，Python3提供了 keyword-only argument。调用函数时使用*和*展开可迭代对象，映射到单个参数。  \n\n下面的例子中，tag函数用于生成html标签\n\n```python\n\ndef tag(name, *content, cls=None, **attrs):\n    \"\"\"生成一个或多个HTML标签\"\"\"\n    if cls is not None:\n        attrs['class'] = cls\n    if attrs:\n        attr_str = ''.join(' %s=\"%s\"' % (attr, value)\n                        for attr, value in sorted(attrs.items()))\n    else:\n        attr_str = ''\n    if content:\n        return '\\n'.join('<%s%s>%s</%s>' %\n                (name, attr_str, c, name) for c in content)\n    else:\n        return '<%s%s />' % (name, attr_str)\n\n```\n\n下面是这个函数的几种调用方式\n\n```python\n\n>>> tag('br')\n'<br />'\n>>> tag('p', 'hello')\n'<p>hello</p>'\n>>> print(tag('p', 'hello', 'world'))\n<p>hello</p>\n<p>world</p>\n>>> tag('p', 'hello', id=33)\n'<p id=\"33\">hello</p>'\n>>> print(tag('p', 'hello', 'world', cls='sidebar'))\n<p class=\"sidebar\">hello</p>\n<p class=\"sidebar\">world</p>\n>>> tag(content='testing', name=\"img\")\n'<img content=\"testing\" />'\n>>> my_tag = {'name': 'img', 'title': 'Sunset Boulevard',\n... 'src': 'sunset.jpg', 'cls': 'framed'}\n>>> tag(**my_tag)\n'<img class=\"framed\" src=\"sunset.jpg\" title=\"Sunset Boulevard\" />'\n\n```\n\n#### 获取关于参数的信息    \n这里举一个处理web请求的例子: \n\n```python\n\nimport bobo\n@bobo.query('/')\ndef hello(person):\n    return 'Hello %s!' % person\n\n```\n在上面这段代码中，bobo是一个web微框架，bobo.query()装饰器将hello()函数与请求处理机制结合在一起，使得hello()自动接收请求中的person作为参数，若没有person参数，则返回403.\n\n函数对象有个 \\_\\_defaults\\_\\_ 属性，它的值是一个元组，里面保存着定位参数和关键字参数的默认值。仅限关键字参数的默认值在 \\_\\_kwdefaults\\_\\_ 属性中。然而，参数的名称在 \\_\\_code\\_\\_ 属性中，它的值是一个 code 对象引用，自身也有很多属性。\n\n下面举一个[clip.py](https://github.com/aldslvda/readings/blob/master/Fluent-Python/5.%20First%20Class%20Functions/clip.py)的例子，讲解函数对象用于获取参数信息的属性。\n\n```python\n\ndef clip(text, max_len=80):\n    \"\"\"在max_len前面或后面的第一个空格处截断文本\n    \"\"\"\n    end = None\n    if len(text) > max_len:\n        space_before = text.rfind(' ', 0, max_len)\n        if space_before >= 0:\n            end = space_before\n        else:\n            space_after = text.rfind(' ', max_len)\n        if space_after >= 0:\n            end = space_after\n            if end is None: # 没找到空格\n                end = len(text)\n    return text[:end].rstrip()\n\n```\n\n我们在控制台输入下面的命令，查看属性\n\n```python\n\n>>> from clip import clip\n>>> clip.__defaults__\n(80,)\n>>> clip.__code__\n<code object clip at 0x10dadcc90, file \"/Users/NickAl/study/github/readings/Fluent-Python/5. First Class Functions/clip.py\", line 2>\n>>> clip.__code__.co_varnames\n('text', 'max_len', 'end', 'space_before', 'space_after')\n>>> clip.__code__.co_argcount\n2\n\n```\n\n参数名称在 \\_\\_code\\_\\_.co\\_varnames中，不过里面还有函数定义体中创建的局部变量。因此，参数名称是前 N 个字符串，N的值由 \\_\\_code\\\\_.co\\_argcount 确定。顺便说一下，这里不包含前缀为 * 或 ** 的长度可变的参数。参数的默认值只能通过它们在 \\_\\_defaults\\_\\_ 元组中的位置确定，因此要从后向前扫描才能把参数和默认值对应起来。\n\n另一种查看属性的方式是，使用inspect 模块\n\n```python\n>>> from clip import clip\n>>> from inspect import signature\n>>> sig = signature(clip)\n>>> sig\n<Signature (text, max_len=80)>\n>>> for name, param in sig.parameters.items():\n...     print(param.kind, ':', name, '=', param.default)\n...\nPOSITIONAL_OR_KEYWORD : text = <class 'inspect._empty'>\nPOSITIONAL_OR_KEYWORD : max_len = 80\n\n```\n\ninspect.signature 函数返回一个 inspect.Signature 对象，它有一个 parameters 属性，这是一个有序映射，把参数名和 inspect.Parameter 对象对应起来。\n\ninspect.Signature的kind属性有下面5种:\n\n- POSITIONAL\\_OR\\_KEYWORD:可以通过定位参数和关键字参数传入的形参（多数 Python 函数的参数属于此类）。\n- VAR\\_POSITIONAL:定位参数元组。\n- VAR\\_KEYWORD:关键字参数字典。\n- KEYWORD\\_ONLY:仅限关键字参数（Python 3 新增）。\n- POSITIONAL\\_ONLY:仅限定位参数；目前，Python 声明函数的句法不支持，但是有些使用 C 语言实现且不接受关键字参数的函数（如 divmod）支持。\n\n#### 函数注解\n\nPython 3 提供了一种句法，用于为函数声明中的参数和返回值附加元数据, 这就是注解。\n在clip.py中声明一个新的函数clip\\_with\\_anno, 只在声明时加入注解，其他一样。\n\n```python\n\ndef clip_with_anno(text:str, max_len: 'int > 0' = 80) -> str:\n\n```\n\n```python\n\n>>> from clip import clip_with_anno\n>>> clip_with_anno.__annotations__\n{'text': <class 'str'>, 'max_len': 'int > 0', 'return': <class 'str'>}\n\n```\n\n注解和参数、返回值的对应关系一目了然。然而Python本身对注解没有任何操作。\n\n#### Python标准库中为支持函数式编程提供的包\n\n##### operator模块\n下面展示了使用reduce计算阶乘的两种方式，区别是是否使用了operator库。\n\n```python\n\nfrom functools import reduce\nfrom operator import mul\n\ndef fact(n):\n    return reduce(lambda a, b: a*b, range(1, n+1))\ndef fact_with_mul(n):\n    return reduce(mul, range(1, n+1))\n\n```\n\n上面的例子使用mul避免了lambda表达式的使用。\noperator还提供了一些有效的函数:\n\n- attrgetter 与 itemgetter这样获取对象属性和可迭代对象的元素的函数。\n- methodcaller 创建的函数会在对象上调用参数指定的方法\n\n##### functools.partial\nfunctools.partial 这个高阶函数用于**部分应用**一个函数。部分应用是指，基于一个函数创建一个新的可调用对象，把原函数的某些参数固定。使用这个函数可以把接受一个或多个参数的函数改编成需要回调的 API，这样参数更少.\n\n```python\n\n>>> from operator import mul\n>>> from functools import partial\n>>> triple = partial(mul, 3)\n>>> triple(7)\n21\n>>> list(map(triple, range(1, 10)))\n[3, 6, 9, 12, 15, 18, 21, 24, 27]\n\n```\n\n#### 小结\n这一小节主要讲了Python函数的一等性质，即函数也是对象这一概念，并说明了这一性质的一部分应用场景，以及功能有限的lambda函数的一些替代方式。\n\n高强度加班了两周，终终终终于有时间吧这章看完啦![1](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/01.png?raw=true)\n\nTo be continued ... 敬请期待![1](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/25.png?raw=true)\n","slug":"fluent-python-5","published":1,"updated":"2019-04-25T01:27:25.755Z","comments":1,"layout":"post","link":"","_id":"cjuw5c6gd003fdhyffmae0td5","content":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-5-First-Class-Functions\"><a href=\"#Chapter-5-First-Class-Functions\" class=\"headerlink\" title=\"Chapter 5. First Class Functions\"></a>Chapter 5. First Class Functions</h3><h3 id=\"第五章-一等函数\"><a href=\"#第五章-一等函数\" class=\"headerlink\" title=\"第五章. 一等函数\"></a>第五章. 一等函数</h3><p>首先解释一下标题的含义:<br>编程语言理论家把“一等对象”定义为满足下述条件的程序实体：</p>\n<ul>\n<li>在运行时创建</li>\n<li>能赋值给变量或数据结构中的元素</li>\n<li>能作为参数传给函数</li>\n<li>能作为函数的返回结果</li>\n</ul>\n<p>在Python中，整数、字符串和字典都是一等对象，特别提到的是，函数也是一等对象，这一特性称为一等函数。</p>\n<h4 id=\"把函数视作对象\"><a href=\"#把函数视作对象\" class=\"headerlink\" title=\"把函数视作对象\"></a>把函数视作对象</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span>.__doc__</span><br><span class=\"line\"><span class=\"string\">\"print(value, ..., sep=' ', end='\\\\n', file=sys.stdout, flush=False)\\n\\nPrints the values to a stream, or to sys.stdout by default.\\nOptional keyword arguments:\\nfile:  a file-like object (stream); defaults to the current sys.stdout.\\nsep:   string inserted between values, default a space.\\nend:   string appended after the last value, default a newline.\\nflush: whether to forcibly flush the stream.\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(<span class=\"keyword\">print</span>)</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">builtin_function_or_method</span>'&gt;</span></span><br></pre></td></tr></table></figure>\n<p>由上面的控制台输出可以看到函数print有一个名为__doc__的属性, 同时是builtin_function_or_method的一个实例。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;&gt; <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plus</span><span class=\"params\">(a)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> a+<span class=\"number\">1</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>map(plus, range(<span class=\"number\">10</span>))</span><br><span class=\"line\">&lt;map object at <span class=\"number\">0x109553c50</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(map(plus, range(<span class=\"number\">10</span>)))</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]</span><br></pre></td></tr></table></figure>\n<p>由上面的控制台输出可以看到函数是可以作为参数被传递的。<br>有了一等函数，就可以使用函数式编程。</p>\n<h4 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h4><p>接受函数为参数，或者把函数作为结果返回的函数是高阶函数（higher-orderfunction），第一节中提到的map就是一个高阶函数。</p>\n<h5 id=\"常见的高阶函数\"><a href=\"#常见的高阶函数\" class=\"headerlink\" title=\"常见的高阶函数\"></a>常见的高阶函数</h5><p>函数式语言通常会提供map、filter和reduce这三个高阶函数。</p>\n<ul>\n<li>在Python中，map/filter有更好用的替代品，Python2中map/filter返回的是列表，所以比较好的替代品是列表推导，Python3中这两个函数的返回则是生成器，所以比较好的替代是生成器表达式   </li>\n</ul>\n<p>reduce比较特别：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> operator <span class=\"keyword\">import</span> add </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>reduce(add, range(<span class=\"number\">100</span>)) </span><br><span class=\"line\"><span class=\"number\">4950</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sum(<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"number\">4950</span></span><br></pre></td></tr></table></figure>\n<p>sum 和 reduce 的通用思想是把某个操作连续应用到序列的元素上，累计之前的结果，把一系列值归约成一个值。<br>类似的归约函数还有all()和any(), all()传入一个可迭代对象，若所有元素都为True,返回True,否则返回False; 而any()只要有一个True就返回True。</p>\n<h4 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h4><p>为了使用高阶函数，有时创建一次性的小型函数更便利， 这便是匿名函数的由来。</p>\n<p>lamda函数就是在python表达式内创建匿名函数，但由于句法的限制，lambda函数的定义体只能用纯表达式。</p>\n<p>“Functional Programming HOWTO” 中提到，如果使用lambda表达式使得代码难以理解，建议按下面的步骤重构:</p>\n<ul>\n<li>编写注释，说明lambda表达式的作用       </li>\n<li>研究注释，用一个名称概括       </li>\n<li>用这个名称定义一个函数，把lambda表达式转换成这个函数    </li>\n<li>删除注释</li>\n</ul>\n<h4 id=\"可调用对象\"><a href=\"#可调用对象\" class=\"headerlink\" title=\"可调用对象\"></a>可调用对象</h4><p>Python 的数据模型文档指出了7种可调用对象：</p>\n<ul>\n<li>用户定义的函数:<br>  使用lambda表达式或者def语句创建  </li>\n<li>内置函数:<br>  使用CPython实现的函数   </li>\n<li>内置方法:<br>  使用C语言实现的方法   </li>\n<li>方法:<br>  类的定义题中实现的函数   </li>\n<li>类:<br>  调用时会创建一个实例，然后执行构造函数</li>\n<li>类的实例:<br>  如果类定义了__call__方法，那么它的实例可以作为函数调用。  </li>\n<li>生成器函数:<br>  使用了yeild关键字的函数或方法, 返回生成器对象。</li>\n</ul>\n<h4 id=\"用户定义的可调用类型\"><a href=\"#用户定义的可调用类型\" class=\"headerlink\" title=\"用户定义的可调用类型\"></a>用户定义的可调用类型</h4><p>不仅python函数式对象，对象也可以表现得像函数，只需要实现方法__call__。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BingoCage</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, items)</span>:</span></span><br><span class=\"line\">        self._items = list(items)</span><br><span class=\"line\">        random.shuffle(self._items)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pick</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self._items.pop()</span><br><span class=\"line\">        <span class=\"keyword\">except</span> IndexError:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> LookupError(<span class=\"string\">'pick from empty BingoCage'</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.pick()</span><br></pre></td></tr></table></figure>\n<p>这样调用BingoCage的实例时，效果和调用pick方法一样。  </p>\n<p>实现 __call__ 方法的类是创建函数类对象的简便方式，此时必须在内部维护一个状态，让它在调用之间可用，例如 BingoCage 中的剩余元素。装饰器就是这样。装饰器必须是函数，而且有时要在多次调用之间“记住”某些事 [ 例如备忘（memoization），即缓存消耗大的计算结果，供后面使用 ]。</p>\n<p>创建保有内部状态的函数，还有一种截然不同的方式 —— 使用闭包。</p>\n<h4 id=\"从定位参数到仅限关键字参数\"><a href=\"#从定位参数到仅限关键字参数\" class=\"headerlink\" title=\"从定位参数到仅限关键字参数\"></a>从定位参数到仅限关键字参数</h4><p>Python提供了极为灵活的参数处理机制，Python3提供了 keyword-only argument。调用函数时使用<em>和</em>展开可迭代对象，映射到单个参数。  </p>\n<p>下面的例子中，tag函数用于生成html标签</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tag</span><span class=\"params\">(name, *content, cls=None, **attrs)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"生成一个或多个HTML标签\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> cls <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        attrs[<span class=\"string\">'class'</span>] = cls</span><br><span class=\"line\">    <span class=\"keyword\">if</span> attrs:</span><br><span class=\"line\">        attr_str = <span class=\"string\">''</span>.join(<span class=\"string\">' %s=\"%s\"'</span> % (attr, value)</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> attr, value <span class=\"keyword\">in</span> sorted(attrs.items()))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        attr_str = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> content:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'\\n'</span>.join(<span class=\"string\">'&lt;%s%s&gt;%s&lt;/%s&gt;'</span> %</span><br><span class=\"line\">                (name, attr_str, c, name) <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> content)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;%s%s /&gt;'</span> % (name, attr_str)</span><br></pre></td></tr></table></figure>\n<p>下面是这个函数的几种调用方式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tag(<span class=\"string\">'br'</span>)</span><br><span class=\"line\"><span class=\"string\">'&lt;br /&gt;'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tag(<span class=\"string\">'p'</span>, <span class=\"string\">'hello'</span>)</span><br><span class=\"line\"><span class=\"string\">'&lt;p&gt;hello&lt;/p&gt;'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(tag(<span class=\"string\">'p'</span>, <span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>))</span><br><span class=\"line\">&lt;p&gt;hello&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;world&lt;/p&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tag(<span class=\"string\">'p'</span>, <span class=\"string\">'hello'</span>, id=<span class=\"number\">33</span>)</span><br><span class=\"line\"><span class=\"string\">'&lt;p id=\"33\"&gt;hello&lt;/p&gt;'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(tag(<span class=\"string\">'p'</span>, <span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>, cls=<span class=\"string\">'sidebar'</span>))</span><br><span class=\"line\">&lt;p class=\"sidebar\"&gt;hello&lt;/p&gt;</span><br><span class=\"line\">&lt;p class=\"sidebar\"&gt;world&lt;/p&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tag(content=<span class=\"string\">'testing'</span>, name=<span class=\"string\">\"img\"</span>)</span><br><span class=\"line\"><span class=\"string\">'&lt;img content=\"testing\" /&gt;'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_tag = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'img'</span>, <span class=\"string\">'title'</span>: <span class=\"string\">'Sunset Boulevard'</span>,</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"string\">'src'</span>: <span class=\"string\">'sunset.jpg'</span>, <span class=\"string\">'cls'</span>: <span class=\"string\">'framed'</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tag(**my_tag)</span><br><span class=\"line\"><span class=\"string\">'&lt;img class=\"framed\" src=\"sunset.jpg\" title=\"Sunset Boulevard\" /&gt;'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"获取关于参数的信息\"><a href=\"#获取关于参数的信息\" class=\"headerlink\" title=\"获取关于参数的信息\"></a>获取关于参数的信息</h4><p>这里举一个处理web请求的例子: </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> bobo</span><br><span class=\"line\"><span class=\"meta\">@bobo.query('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(person)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello %s!'</span> % person</span><br></pre></td></tr></table></figure>\n<p>在上面这段代码中，bobo是一个web微框架，bobo.query()装饰器将hello()函数与请求处理机制结合在一起，使得hello()自动接收请求中的person作为参数，若没有person参数，则返回403.</p>\n<p>函数对象有个 __defaults__ 属性，它的值是一个元组，里面保存着定位参数和关键字参数的默认值。仅限关键字参数的默认值在 __kwdefaults__ 属性中。然而，参数的名称在 __code__ 属性中，它的值是一个 code 对象引用，自身也有很多属性。</p>\n<p>下面举一个<a href=\"https://github.com/aldslvda/readings/blob/master/Fluent-Python/5.%20First%20Class%20Functions/clip.py\" target=\"_blank\" rel=\"noopener\">clip.py</a>的例子，讲解函数对象用于获取参数信息的属性。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clip</span><span class=\"params\">(text, max_len=<span class=\"number\">80</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"在max_len前面或后面的第一个空格处截断文本</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    end = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(text) &gt; max_len:</span><br><span class=\"line\">        space_before = text.rfind(<span class=\"string\">' '</span>, <span class=\"number\">0</span>, max_len)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> space_before &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            end = space_before</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            space_after = text.rfind(<span class=\"string\">' '</span>, max_len)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> space_after &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            end = space_after</span><br><span class=\"line\">            <span class=\"keyword\">if</span> end <span class=\"keyword\">is</span> <span class=\"literal\">None</span>: <span class=\"comment\"># 没找到空格</span></span><br><span class=\"line\">                end = len(text)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> text[:end].rstrip()</span><br></pre></td></tr></table></figure>\n<p>我们在控制台输入下面的命令，查看属性</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> clip <span class=\"keyword\">import</span> clip</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>clip.__defaults__</span><br><span class=\"line\">(<span class=\"number\">80</span>,)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>clip.__code__</span><br><span class=\"line\">&lt;code object clip at <span class=\"number\">0x10dadcc90</span>, file <span class=\"string\">\"/Users/NickAl/study/github/readings/Fluent-Python/5. First Class Functions/clip.py\"</span>, line <span class=\"number\">2</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>clip.__code__.co_varnames</span><br><span class=\"line\">(<span class=\"string\">'text'</span>, <span class=\"string\">'max_len'</span>, <span class=\"string\">'end'</span>, <span class=\"string\">'space_before'</span>, <span class=\"string\">'space_after'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>clip.__code__.co_argcount</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>参数名称在 __code__.co_varnames中，不过里面还有函数定义体中创建的局部变量。因此，参数名称是前 N 个字符串，N的值由 __code\\_.co_argcount 确定。顺便说一下，这里不包含前缀为 * 或 ** 的长度可变的参数。参数的默认值只能通过它们在 __defaults__ 元组中的位置确定，因此要从后向前扫描才能把参数和默认值对应起来。</p>\n<p>另一种查看属性的方式是，使用inspect 模块</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> clip <span class=\"keyword\">import</span> clip</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> inspect <span class=\"keyword\">import</span> signature</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sig = signature(clip)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sig</span><br><span class=\"line\">&lt;Signature (text, max_len=<span class=\"number\">80</span>)&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> name, param <span class=\"keyword\">in</span> sig.parameters.items():</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(param.kind, <span class=\"string\">':'</span>, name, <span class=\"string\">'='</span>, param.default)</span><br><span class=\"line\">...</span><br><span class=\"line\">POSITIONAL_OR_KEYWORD : text = &lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">inspect</span>.<span class=\"title\">_empty</span>'&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">POSITIONAL_OR_KEYWORD</span> :</span> max_len = <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<p>inspect.signature 函数返回一个 inspect.Signature 对象，它有一个 parameters 属性，这是一个有序映射，把参数名和 inspect.Parameter 对象对应起来。</p>\n<p>inspect.Signature的kind属性有下面5种:</p>\n<ul>\n<li>POSITIONAL_OR_KEYWORD:可以通过定位参数和关键字参数传入的形参（多数 Python 函数的参数属于此类）。</li>\n<li>VAR_POSITIONAL:定位参数元组。</li>\n<li>VAR_KEYWORD:关键字参数字典。</li>\n<li>KEYWORD_ONLY:仅限关键字参数（Python 3 新增）。</li>\n<li>POSITIONAL_ONLY:仅限定位参数；目前，Python 声明函数的句法不支持，但是有些使用 C 语言实现且不接受关键字参数的函数（如 divmod）支持。</li>\n</ul>\n<h4 id=\"函数注解\"><a href=\"#函数注解\" class=\"headerlink\" title=\"函数注解\"></a>函数注解</h4><p>Python 3 提供了一种句法，用于为函数声明中的参数和返回值附加元数据, 这就是注解。<br>在clip.py中声明一个新的函数clip_with_anno, 只在声明时加入注解，其他一样。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clip_with_anno</span><span class=\"params\">(text:str, max_len: <span class=\"string\">'int &gt; 0'</span> = <span class=\"number\">80</span>)</span> -&gt; str:</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> clip <span class=\"keyword\">import</span> clip_with_anno</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>clip_with_anno.__annotations__</span><br><span class=\"line\">&#123;'text': &lt;class 'str'&gt;, 'max_len': 'int &gt; 0', 'return': &lt;class 'str'&gt;&#125;</span><br></pre></td></tr></table></figure>\n<p>注解和参数、返回值的对应关系一目了然。然而Python本身对注解没有任何操作。</p>\n<h4 id=\"Python标准库中为支持函数式编程提供的包\"><a href=\"#Python标准库中为支持函数式编程提供的包\" class=\"headerlink\" title=\"Python标准库中为支持函数式编程提供的包\"></a>Python标准库中为支持函数式编程提供的包</h4><h5 id=\"operator模块\"><a href=\"#operator模块\" class=\"headerlink\" title=\"operator模块\"></a>operator模块</h5><p>下面展示了使用reduce计算阶乘的两种方式，区别是是否使用了operator库。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\"><span class=\"keyword\">from</span> operator <span class=\"keyword\">import</span> mul</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fact</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> reduce(<span class=\"keyword\">lambda</span> a, b: a*b, range(<span class=\"number\">1</span>, n+<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fact_with_mul</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> reduce(mul, range(<span class=\"number\">1</span>, n+<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n<p>上面的例子使用mul避免了lambda表达式的使用。<br>operator还提供了一些有效的函数:</p>\n<ul>\n<li>attrgetter 与 itemgetter这样获取对象属性和可迭代对象的元素的函数。</li>\n<li>methodcaller 创建的函数会在对象上调用参数指定的方法</li>\n</ul>\n<h5 id=\"functools-partial\"><a href=\"#functools-partial\" class=\"headerlink\" title=\"functools.partial\"></a>functools.partial</h5><p>functools.partial 这个高阶函数用于<strong>部分应用</strong>一个函数。部分应用是指，基于一个函数创建一个新的可调用对象，把原函数的某些参数固定。使用这个函数可以把接受一个或多个参数的函数改编成需要回调的 API，这样参数更少.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> operator <span class=\"keyword\">import</span> mul</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> partial</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>triple = partial(mul, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>triple(<span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(map(triple, range(<span class=\"number\">1</span>, <span class=\"number\">10</span>)))</span><br><span class=\"line\">[<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">15</span>, <span class=\"number\">18</span>, <span class=\"number\">21</span>, <span class=\"number\">24</span>, <span class=\"number\">27</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>这一小节主要讲了Python函数的一等性质，即函数也是对象这一概念，并说明了这一性质的一部分应用场景，以及功能有限的lambda函数的一些替代方式。</p>\n<p>高强度加班了两周，终终终终于有时间吧这章看完啦<img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/01.png?raw=true\" alt=\"1\"></p>\n<p>To be continued … 敬请期待<img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/25.png?raw=true\" alt=\"1\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-5-First-Class-Functions\"><a href=\"#Chapter-5-First-Class-Functions\" class=\"headerlink\" title=\"Chapter 5. First Class Functions\"></a>Chapter 5. First Class Functions</h3><h3 id=\"第五章-一等函数\"><a href=\"#第五章-一等函数\" class=\"headerlink\" title=\"第五章. 一等函数\"></a>第五章. 一等函数</h3><p>首先解释一下标题的含义:<br>编程语言理论家把“一等对象”定义为满足下述条件的程序实体：</p>\n<ul>\n<li>在运行时创建</li>\n<li>能赋值给变量或数据结构中的元素</li>\n<li>能作为参数传给函数</li>\n<li>能作为函数的返回结果</li>\n</ul>\n<p>在Python中，整数、字符串和字典都是一等对象，特别提到的是，函数也是一等对象，这一特性称为一等函数。</p>\n<h4 id=\"把函数视作对象\"><a href=\"#把函数视作对象\" class=\"headerlink\" title=\"把函数视作对象\"></a>把函数视作对象</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span>.__doc__</span><br><span class=\"line\"><span class=\"string\">\"print(value, ..., sep=' ', end='\\\\n', file=sys.stdout, flush=False)\\n\\nPrints the values to a stream, or to sys.stdout by default.\\nOptional keyword arguments:\\nfile:  a file-like object (stream); defaults to the current sys.stdout.\\nsep:   string inserted between values, default a space.\\nend:   string appended after the last value, default a newline.\\nflush: whether to forcibly flush the stream.\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(<span class=\"keyword\">print</span>)</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">builtin_function_or_method</span>'&gt;</span></span><br></pre></td></tr></table></figure>\n<p>由上面的控制台输出可以看到函数print有一个名为__doc__的属性, 同时是builtin_function_or_method的一个实例。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;&gt; <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plus</span><span class=\"params\">(a)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> a+<span class=\"number\">1</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>map(plus, range(<span class=\"number\">10</span>))</span><br><span class=\"line\">&lt;map object at <span class=\"number\">0x109553c50</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(map(plus, range(<span class=\"number\">10</span>)))</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]</span><br></pre></td></tr></table></figure>\n<p>由上面的控制台输出可以看到函数是可以作为参数被传递的。<br>有了一等函数，就可以使用函数式编程。</p>\n<h4 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h4><p>接受函数为参数，或者把函数作为结果返回的函数是高阶函数（higher-orderfunction），第一节中提到的map就是一个高阶函数。</p>\n<h5 id=\"常见的高阶函数\"><a href=\"#常见的高阶函数\" class=\"headerlink\" title=\"常见的高阶函数\"></a>常见的高阶函数</h5><p>函数式语言通常会提供map、filter和reduce这三个高阶函数。</p>\n<ul>\n<li>在Python中，map/filter有更好用的替代品，Python2中map/filter返回的是列表，所以比较好的替代品是列表推导，Python3中这两个函数的返回则是生成器，所以比较好的替代是生成器表达式   </li>\n</ul>\n<p>reduce比较特别：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> operator <span class=\"keyword\">import</span> add </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>reduce(add, range(<span class=\"number\">100</span>)) </span><br><span class=\"line\"><span class=\"number\">4950</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sum(<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"number\">4950</span></span><br></pre></td></tr></table></figure>\n<p>sum 和 reduce 的通用思想是把某个操作连续应用到序列的元素上，累计之前的结果，把一系列值归约成一个值。<br>类似的归约函数还有all()和any(), all()传入一个可迭代对象，若所有元素都为True,返回True,否则返回False; 而any()只要有一个True就返回True。</p>\n<h4 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h4><p>为了使用高阶函数，有时创建一次性的小型函数更便利， 这便是匿名函数的由来。</p>\n<p>lamda函数就是在python表达式内创建匿名函数，但由于句法的限制，lambda函数的定义体只能用纯表达式。</p>\n<p>“Functional Programming HOWTO” 中提到，如果使用lambda表达式使得代码难以理解，建议按下面的步骤重构:</p>\n<ul>\n<li>编写注释，说明lambda表达式的作用       </li>\n<li>研究注释，用一个名称概括       </li>\n<li>用这个名称定义一个函数，把lambda表达式转换成这个函数    </li>\n<li>删除注释</li>\n</ul>\n<h4 id=\"可调用对象\"><a href=\"#可调用对象\" class=\"headerlink\" title=\"可调用对象\"></a>可调用对象</h4><p>Python 的数据模型文档指出了7种可调用对象：</p>\n<ul>\n<li>用户定义的函数:<br>  使用lambda表达式或者def语句创建  </li>\n<li>内置函数:<br>  使用CPython实现的函数   </li>\n<li>内置方法:<br>  使用C语言实现的方法   </li>\n<li>方法:<br>  类的定义题中实现的函数   </li>\n<li>类:<br>  调用时会创建一个实例，然后执行构造函数</li>\n<li>类的实例:<br>  如果类定义了__call__方法，那么它的实例可以作为函数调用。  </li>\n<li>生成器函数:<br>  使用了yeild关键字的函数或方法, 返回生成器对象。</li>\n</ul>\n<h4 id=\"用户定义的可调用类型\"><a href=\"#用户定义的可调用类型\" class=\"headerlink\" title=\"用户定义的可调用类型\"></a>用户定义的可调用类型</h4><p>不仅python函数式对象，对象也可以表现得像函数，只需要实现方法__call__。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BingoCage</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, items)</span>:</span></span><br><span class=\"line\">        self._items = list(items)</span><br><span class=\"line\">        random.shuffle(self._items)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pick</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self._items.pop()</span><br><span class=\"line\">        <span class=\"keyword\">except</span> IndexError:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> LookupError(<span class=\"string\">'pick from empty BingoCage'</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.pick()</span><br></pre></td></tr></table></figure>\n<p>这样调用BingoCage的实例时，效果和调用pick方法一样。  </p>\n<p>实现 __call__ 方法的类是创建函数类对象的简便方式，此时必须在内部维护一个状态，让它在调用之间可用，例如 BingoCage 中的剩余元素。装饰器就是这样。装饰器必须是函数，而且有时要在多次调用之间“记住”某些事 [ 例如备忘（memoization），即缓存消耗大的计算结果，供后面使用 ]。</p>\n<p>创建保有内部状态的函数，还有一种截然不同的方式 —— 使用闭包。</p>\n<h4 id=\"从定位参数到仅限关键字参数\"><a href=\"#从定位参数到仅限关键字参数\" class=\"headerlink\" title=\"从定位参数到仅限关键字参数\"></a>从定位参数到仅限关键字参数</h4><p>Python提供了极为灵活的参数处理机制，Python3提供了 keyword-only argument。调用函数时使用<em>和</em>展开可迭代对象，映射到单个参数。  </p>\n<p>下面的例子中，tag函数用于生成html标签</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tag</span><span class=\"params\">(name, *content, cls=None, **attrs)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"生成一个或多个HTML标签\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> cls <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        attrs[<span class=\"string\">'class'</span>] = cls</span><br><span class=\"line\">    <span class=\"keyword\">if</span> attrs:</span><br><span class=\"line\">        attr_str = <span class=\"string\">''</span>.join(<span class=\"string\">' %s=\"%s\"'</span> % (attr, value)</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> attr, value <span class=\"keyword\">in</span> sorted(attrs.items()))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        attr_str = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> content:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'\\n'</span>.join(<span class=\"string\">'&lt;%s%s&gt;%s&lt;/%s&gt;'</span> %</span><br><span class=\"line\">                (name, attr_str, c, name) <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> content)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;%s%s /&gt;'</span> % (name, attr_str)</span><br></pre></td></tr></table></figure>\n<p>下面是这个函数的几种调用方式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tag(<span class=\"string\">'br'</span>)</span><br><span class=\"line\"><span class=\"string\">'&lt;br /&gt;'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tag(<span class=\"string\">'p'</span>, <span class=\"string\">'hello'</span>)</span><br><span class=\"line\"><span class=\"string\">'&lt;p&gt;hello&lt;/p&gt;'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(tag(<span class=\"string\">'p'</span>, <span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>))</span><br><span class=\"line\">&lt;p&gt;hello&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;world&lt;/p&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tag(<span class=\"string\">'p'</span>, <span class=\"string\">'hello'</span>, id=<span class=\"number\">33</span>)</span><br><span class=\"line\"><span class=\"string\">'&lt;p id=\"33\"&gt;hello&lt;/p&gt;'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(tag(<span class=\"string\">'p'</span>, <span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>, cls=<span class=\"string\">'sidebar'</span>))</span><br><span class=\"line\">&lt;p class=\"sidebar\"&gt;hello&lt;/p&gt;</span><br><span class=\"line\">&lt;p class=\"sidebar\"&gt;world&lt;/p&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tag(content=<span class=\"string\">'testing'</span>, name=<span class=\"string\">\"img\"</span>)</span><br><span class=\"line\"><span class=\"string\">'&lt;img content=\"testing\" /&gt;'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_tag = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'img'</span>, <span class=\"string\">'title'</span>: <span class=\"string\">'Sunset Boulevard'</span>,</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"string\">'src'</span>: <span class=\"string\">'sunset.jpg'</span>, <span class=\"string\">'cls'</span>: <span class=\"string\">'framed'</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tag(**my_tag)</span><br><span class=\"line\"><span class=\"string\">'&lt;img class=\"framed\" src=\"sunset.jpg\" title=\"Sunset Boulevard\" /&gt;'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"获取关于参数的信息\"><a href=\"#获取关于参数的信息\" class=\"headerlink\" title=\"获取关于参数的信息\"></a>获取关于参数的信息</h4><p>这里举一个处理web请求的例子: </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> bobo</span><br><span class=\"line\"><span class=\"meta\">@bobo.query('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(person)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello %s!'</span> % person</span><br></pre></td></tr></table></figure>\n<p>在上面这段代码中，bobo是一个web微框架，bobo.query()装饰器将hello()函数与请求处理机制结合在一起，使得hello()自动接收请求中的person作为参数，若没有person参数，则返回403.</p>\n<p>函数对象有个 __defaults__ 属性，它的值是一个元组，里面保存着定位参数和关键字参数的默认值。仅限关键字参数的默认值在 __kwdefaults__ 属性中。然而，参数的名称在 __code__ 属性中，它的值是一个 code 对象引用，自身也有很多属性。</p>\n<p>下面举一个<a href=\"https://github.com/aldslvda/readings/blob/master/Fluent-Python/5.%20First%20Class%20Functions/clip.py\" target=\"_blank\" rel=\"noopener\">clip.py</a>的例子，讲解函数对象用于获取参数信息的属性。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clip</span><span class=\"params\">(text, max_len=<span class=\"number\">80</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"在max_len前面或后面的第一个空格处截断文本</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    end = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(text) &gt; max_len:</span><br><span class=\"line\">        space_before = text.rfind(<span class=\"string\">' '</span>, <span class=\"number\">0</span>, max_len)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> space_before &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            end = space_before</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            space_after = text.rfind(<span class=\"string\">' '</span>, max_len)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> space_after &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            end = space_after</span><br><span class=\"line\">            <span class=\"keyword\">if</span> end <span class=\"keyword\">is</span> <span class=\"literal\">None</span>: <span class=\"comment\"># 没找到空格</span></span><br><span class=\"line\">                end = len(text)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> text[:end].rstrip()</span><br></pre></td></tr></table></figure>\n<p>我们在控制台输入下面的命令，查看属性</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> clip <span class=\"keyword\">import</span> clip</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>clip.__defaults__</span><br><span class=\"line\">(<span class=\"number\">80</span>,)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>clip.__code__</span><br><span class=\"line\">&lt;code object clip at <span class=\"number\">0x10dadcc90</span>, file <span class=\"string\">\"/Users/NickAl/study/github/readings/Fluent-Python/5. First Class Functions/clip.py\"</span>, line <span class=\"number\">2</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>clip.__code__.co_varnames</span><br><span class=\"line\">(<span class=\"string\">'text'</span>, <span class=\"string\">'max_len'</span>, <span class=\"string\">'end'</span>, <span class=\"string\">'space_before'</span>, <span class=\"string\">'space_after'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>clip.__code__.co_argcount</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>参数名称在 __code__.co_varnames中，不过里面还有函数定义体中创建的局部变量。因此，参数名称是前 N 个字符串，N的值由 __code\\_.co_argcount 确定。顺便说一下，这里不包含前缀为 * 或 ** 的长度可变的参数。参数的默认值只能通过它们在 __defaults__ 元组中的位置确定，因此要从后向前扫描才能把参数和默认值对应起来。</p>\n<p>另一种查看属性的方式是，使用inspect 模块</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> clip <span class=\"keyword\">import</span> clip</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> inspect <span class=\"keyword\">import</span> signature</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sig = signature(clip)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sig</span><br><span class=\"line\">&lt;Signature (text, max_len=<span class=\"number\">80</span>)&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> name, param <span class=\"keyword\">in</span> sig.parameters.items():</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(param.kind, <span class=\"string\">':'</span>, name, <span class=\"string\">'='</span>, param.default)</span><br><span class=\"line\">...</span><br><span class=\"line\">POSITIONAL_OR_KEYWORD : text = &lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">inspect</span>.<span class=\"title\">_empty</span>'&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">POSITIONAL_OR_KEYWORD</span> :</span> max_len = <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<p>inspect.signature 函数返回一个 inspect.Signature 对象，它有一个 parameters 属性，这是一个有序映射，把参数名和 inspect.Parameter 对象对应起来。</p>\n<p>inspect.Signature的kind属性有下面5种:</p>\n<ul>\n<li>POSITIONAL_OR_KEYWORD:可以通过定位参数和关键字参数传入的形参（多数 Python 函数的参数属于此类）。</li>\n<li>VAR_POSITIONAL:定位参数元组。</li>\n<li>VAR_KEYWORD:关键字参数字典。</li>\n<li>KEYWORD_ONLY:仅限关键字参数（Python 3 新增）。</li>\n<li>POSITIONAL_ONLY:仅限定位参数；目前，Python 声明函数的句法不支持，但是有些使用 C 语言实现且不接受关键字参数的函数（如 divmod）支持。</li>\n</ul>\n<h4 id=\"函数注解\"><a href=\"#函数注解\" class=\"headerlink\" title=\"函数注解\"></a>函数注解</h4><p>Python 3 提供了一种句法，用于为函数声明中的参数和返回值附加元数据, 这就是注解。<br>在clip.py中声明一个新的函数clip_with_anno, 只在声明时加入注解，其他一样。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clip_with_anno</span><span class=\"params\">(text:str, max_len: <span class=\"string\">'int &gt; 0'</span> = <span class=\"number\">80</span>)</span> -&gt; str:</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> clip <span class=\"keyword\">import</span> clip_with_anno</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>clip_with_anno.__annotations__</span><br><span class=\"line\">&#123;'text': &lt;class 'str'&gt;, 'max_len': 'int &gt; 0', 'return': &lt;class 'str'&gt;&#125;</span><br></pre></td></tr></table></figure>\n<p>注解和参数、返回值的对应关系一目了然。然而Python本身对注解没有任何操作。</p>\n<h4 id=\"Python标准库中为支持函数式编程提供的包\"><a href=\"#Python标准库中为支持函数式编程提供的包\" class=\"headerlink\" title=\"Python标准库中为支持函数式编程提供的包\"></a>Python标准库中为支持函数式编程提供的包</h4><h5 id=\"operator模块\"><a href=\"#operator模块\" class=\"headerlink\" title=\"operator模块\"></a>operator模块</h5><p>下面展示了使用reduce计算阶乘的两种方式，区别是是否使用了operator库。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\"><span class=\"keyword\">from</span> operator <span class=\"keyword\">import</span> mul</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fact</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> reduce(<span class=\"keyword\">lambda</span> a, b: a*b, range(<span class=\"number\">1</span>, n+<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fact_with_mul</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> reduce(mul, range(<span class=\"number\">1</span>, n+<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n<p>上面的例子使用mul避免了lambda表达式的使用。<br>operator还提供了一些有效的函数:</p>\n<ul>\n<li>attrgetter 与 itemgetter这样获取对象属性和可迭代对象的元素的函数。</li>\n<li>methodcaller 创建的函数会在对象上调用参数指定的方法</li>\n</ul>\n<h5 id=\"functools-partial\"><a href=\"#functools-partial\" class=\"headerlink\" title=\"functools.partial\"></a>functools.partial</h5><p>functools.partial 这个高阶函数用于<strong>部分应用</strong>一个函数。部分应用是指，基于一个函数创建一个新的可调用对象，把原函数的某些参数固定。使用这个函数可以把接受一个或多个参数的函数改编成需要回调的 API，这样参数更少.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> operator <span class=\"keyword\">import</span> mul</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> partial</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>triple = partial(mul, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>triple(<span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(map(triple, range(<span class=\"number\">1</span>, <span class=\"number\">10</span>)))</span><br><span class=\"line\">[<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">15</span>, <span class=\"number\">18</span>, <span class=\"number\">21</span>, <span class=\"number\">24</span>, <span class=\"number\">27</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>这一小节主要讲了Python函数的一等性质，即函数也是对象这一概念，并说明了这一性质的一部分应用场景，以及功能有限的lambda函数的一些替代方式。</p>\n<p>高强度加班了两周，终终终终于有时间吧这章看完啦<img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/01.png?raw=true\" alt=\"1\"></p>\n<p>To be continued … 敬请期待<img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/25.png?raw=true\" alt=\"1\"></p>\n"},{"title":"Fluent Python 第八章小结","date":"2018-04-25T09:39:00.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true"],"toc":true,"comment":true,"_content":"\n## Fluent Python ##\n### Chapter 8. Object References, Mutability,and Recycling\n### 第八章:对象引用、可变性和垃圾回收   \n\n本章的主题是对象与对象名称之间的区别。名称不是对象，而是单独的东西。先以一个比喻说明 Python 的变量：变量是标注，而不是盒子。    \n本章的内容有点儿枯燥，但是这些话题却是解决 Python 程序中很多不易察觉的 bug 的关键。   \n\n#### 变量不是盒子\n\nPython中的变量类似Java中的引用式变量，最好将它们理解为附加在对象上的标注。   \n下面的控制台交互和图示很好的解释了\"变量不是盒子\"这一观点:\n\n```python    \n>>> a = [1,2,3]\n>>> b=a\n>>> a.append(4)\n>>> b\n[1, 2, 3, 4]\n```\n![变量不是盒子](https://github.com/aldslvda/blog-images/blob/master/fluent-python-8.1.png?raw=true)    \n\n对引用式变量来说，说把变量分配给对象更合理，反过来说就有问题。毕竟，对象在赋值之前就创建了。为了理解 Python 中的赋值语句，应该始终先读右边。对象在右边创建或获取，在此之后左边的变量才会绑定到对象上，这就像为对象贴上标注。\n\n#### 标识，相等性和别名\n首先看下面的例子和图示:\n\n```python    \n>>> charles = {'name': 'Charles L. Dodgson', 'born': 1832}\n>>> lewis = charles\n>>> lewis is charles\nTrue\n>>> id(charles), id(lewis)\n(4300473992, 4300473992)\n>>> lewis['balance'] = 950\n>>> charles\n{'name': 'Charles L. Dodgson', 'balance': 950, 'born': 1832}\n>>> alex = {'name': 'Charles L. Dodgson', 'born': 1832, 'balance': 950}\n>>> alex == charles\nTrue\n>>> alex is not charles\nTrue\n>>> id(alex)\n4382361712\n```\n\nlewis 和 charles 是别名，即两个变量绑定同一个对象。而 alex 不是 charles 的别名，因为二者绑定的是不同的对象。alex 和charles 绑定的对象具有相同的值（== 比较的就是值），但是它们的标识不同。\n\n>  每个变量都有标识、类型和值。对象一旦创建，它的标识绝不会变；你可以把标识理解为对象在内存中的地址。is 运算符比较两个对象的标识；id() 函数返回对象标识的整数表示。\n\n##### is和==\n== 运算符比较两个对象的值（对象中保存的数据），而 is 比较对象的标识。  \n通常，我们关注的是值，而不是标识，因此 Python 代码中 == 出现的频率比 is 高。  \n\n##### 元组的相对不可变性  \n元组与多数 Python 集合（列表、字典、集，等等）一样，保存的是对象的引用。 如果引用的元素是可变的，即便元组本身不可变，元素依然可变。也就是说，元组的不可变性其实是指 tuple 数据结构的物理内容（即保存的引用）不可变，与引用的对象无关。\n\n下面的例子能显而易见地看出元组的相对不可变性:\n\n```python    \n>>> t1 = (1, 2, [30, 40])\n>>> t2 = (1, 2, [30, 40])\n>>> t1 == t2\nTrue\n>>> id(t1[-1])\n4302515784\n>>> t1[-1].append(99)\n>>> t1\n(1, 2, [30, 40, 99])\n>>> id(t1[-1])\n4302515784\n>>> t1 == t2\nFalse\n```\n\n#### 默认做浅复制\n\n复制列表（或多数内置的可变集合）最简单的方式是使用内置的类型构造方法: \n\n```python    \n>>> l1 = [3, [55, 44], (7, 8, 9)]\n>>> l2 = list(l1)\n>>> l2\n[3, [55, 44], (7, 8, 9)]\n>>> l2 == l1\nTrue\n>>> l2 is l1\nFalse\n```\n这样构造出的l2和l1并不是同一个对象，l2 = l1[:] 也可以得到同样的效果。 \n\n然而，构造方法或 [:] 做的是浅复制（即复制了最外层容器，副本中的元素是源容器中元素的引用）。如果所有元素都是不可变的，那么这样没有问题，还能节省内存。但是，如果有可变的元素，可能会出现错误(l1, l2 会随着可变对象的修改同时发生变化)。  \n\n这时需要做深复制(deepcopy),下面的例子里我们会将深复制和浅复制对比:    \n首先定义一个类\n\n```python     \nclass Bus:\n    def __init__(self, passengers=None):\n        if passengers is None:\n            self.passengers = []\n        else:\n            self.passengers = list(passengers)\n    def pick(self, name):\n        self.passengers.append(name)\n    def drop(self, name):\n        self.passengers.remove(name)\n```\n\n接下来在控制台对类的实例进行操作:\n```python     \n>>> from bus import Bus\n>>> import copy\n>>> bus1 = Bus(['Alice', 'Bill', 'Claire', 'David'])\n>>> bus2 = copy.copy(bus1)\n>>> bus3 = copy.deepcopy(bus1)\n>>> id(bus1), id(bus2), id(bus3)\n(4571562840, 4571563288, 4571563512)\n>>> bus1.drop('Bill')\n>>> bus2.passengers\n['Alice', 'Claire', 'David']\n>>> id(bus1.passengers), id(bus2.passengers), id(bus3.passengers)\n(4571550024, 4571550024, 4566929352)\n>>> bus3.passengers\n['Alice', 'Bill', 'Claire', 'David']\n```\n\nbus2 是bus1的浅复制副本， bus3是深复制副本。\n\ndeepcopy 函数会记住已经复制的对象，因此能优雅地处理循环引用，下面的控制台交互是一个例子。\n\n```python     \n>>> a = [10, 20]\n>>> b = [a, 30]\n>>> a.append(b)\n>>> a\n[10, 20, [[...], 30]]\n>>> from copy import deepcopy\n>>> c = deepcopy(a)\n>>> c\n[10, 20, [[...], 30]]   \n```\n\n\n\n#### 函数的参数作为引用\n\nPython 唯一支持的参数传递模式是共享传参（call by sharing), 共享传参指函数的各个形式参数获得实参中各个引用的副本。也就是说，函数内部的形参是实参的别名。      \n这种方案的结果是，函数可能会修改作为参数传入的可变对象，但是无法修改那些对象的标识（即不能把一个对象替换成另一个对象）。    \n\n下面的例子展示了函数会修改接收到的**可变对象**:\n\n```python    \n>>> def f(a, b):\n... a += b\n... return a\n...\n>>> x = 1\n>>> y = 2\n>>> f(x, y)\n3 >>> x, y\n(1, 2)\n>>> a = [1, 2]\n>>> b = [3, 4]\n>>> f(a, b)\n[1, 2, 3, 4]\n>>> a, b\n([1, 2, 3, 4], [3, 4])\n>>> t = (10, 20)\n>>> u = (30, 40)\n>>> f(t, u)\n(10, 20, 30, 40)\n>>> t, u\n((10, 20), (30, 40))\n```\n\n##### 可变类型不要作为传入参数默认值\n默认值在定义函数时计算（通常在加载模块时），因此默认值变成了函数对象的属性。如果默认值是可变对象，而且修改了它的值，那么后续的函数调用都会受到影响。\n\n##### 防止可变参数造成的影响    \n下面的例子说明了可变参数可能造成的影响 \n\n```python   \nclass TwilightBus:\n    def __init__(self, passengers=None):\n        if passengers is None:\n            self.passengers = []\n        else:\n            self.passengers = passengers\n    def pick(self, name):\n        self.passengers.append(name)\n    def drop(self, name):\n        self.passengers.remove(name)\n\nbasketball_team = ['Sue', 'Tina', 'Maya', 'Diana', 'Pat']\nbus = TwilightBus(basketball_team)\nbus.drop('Tina')\nbus.drop('Pat')\nprint(basketball_team)\n>>> ['Sue', 'Maya', 'Diana']\n\n```\n\n可以看到当乘客从bus上下车后，同时也从篮球队中剔除了，这是不合理的，这是由于传入参数的时候，passengers 仅仅是作为basketball_team的别名而不是创建了一个新对象，这样对passengers的操作会影响到basketball_team\n\n解决办法如下(修改__init__函数)：\n\n```python\ndef __init__(self, passengers=None):\n    if passengers is None:\n        self.passengers = []\n    else:\n        self.passengers = list(passengers)\n```\n\n这样不仅可以防止可变参数造成的影响，同时还能让passengers的类型更加灵活（任何可迭代的对象）\n\n#### del和垃圾回收\n对象本身不会自行销毁，但当对象不能被获取时，可能会被当做垃圾回收。\n\ndel 语句删除名称，而不是对象。del 命令可能会导致对象被当作垃圾回收，但是仅当删除的变量保存的是对象的最后一个引用，或者无法得到对象时。 重新绑定也可能会导致对象的引用数量归零，导致对象被销毁。\n\n在 CPython 中，垃圾回收使用的主要算法是引用计数。实际上，每个对象都会统计有多少引用指向自己。当引用计数归零时，对象立即就被销毁：CPython 会在对象上调用\\_\\_del\\_\\_ 方法（如果定义了），然后释放分配给对象的内存。CPython　2.0 增加了分代垃圾回收算法，用于检测引用循环中涉及的对象组——如果一组对象之间全是相互引用，即使再出色的引用方式也会导致组中的对象不可获取。\n_注： Python 的其他实现有更复杂的垃圾回收程序，而且不依赖引用计数，这意味着，对象的引用数量为零时可能不会立即调用\\_\\_del\\_\\_ 方法_\n\n下面的例子用weakref展示了一个对象生命周期结束时的场景：\n\n```python\nimport weakref\ns1 = {1, 2, 3}\ns2 = s1\ndef bye():\n    print('goodbye')\nender = weakref.finalize(s1, bye)\n\n>>> ender.alive\nTrue\n>>> del s1\n>>> ender.alive\nTrue\n>>> s2 = 'sapm'\ngoodbye\n>>> ender.alive\nFalse\n```\n\n#### 弱引用\n正是因为有引用，对象才会在内存中存在。\n\n弱引用不会增加对象的引用数量。引用的目标对象称为所指对象（referent）。因此我们说，弱引用不会妨碍所指对象被当作垃圾回收。\n\n弱引用在缓存应用中很有用，因为我们不想仅因为被缓存引用着而始终保存缓存对象。\n\n然而，weakref模块的文档指出，weakref.ref类其实是低层接口，供高级用途使用，多数程序最好使用 weakref 集合和 finalize。也就是说，应该使用 WeakKeyDictionary、WeakValueDictionary、WeakSet 和finalize（在内部使用弱引用），不要自己动手创建并处理 weakref.ref 实例。\n\n##### WeakValueDictionary简介\n\nWeakValueDictionary 类实现的是一种可变映射，里面的值是对象的弱引用。被引用的对象在程序中的其他地方被当作垃圾回收后，对应的键会自动从 WeakValueDictionary中删除。因此，WeakValueDictionary 经常用于缓存。\n\n下面是一个例子：\n\n```python    \nclass Cheese:\n    def __init__(self, kind):\n        self.kind = kind\n    def __repr__(self):\n        return 'Cheese(%r)' % self.kind\n\n>>> import weakref\n>>> stock = weakref.WeakValueDictionary()\n>>> catalog = [Cheese('Red Leicester'), Cheese('Tilsit'), Cheese('Brie'), Cheese('Parmesan')]\n>>> for cheese in catalog:\n... stock[cheese.kind] = cheese\n...\n>>> sorted(stock.keys())\n['Brie', 'Parmesan', 'Red Leicester', 'Tilsit']\n>>> del catalog\n>>> sorted(stock.keys())\n['Parmesan']\n>>> del cheese\n>>> sorted(stock.keys())\n[]\n\n```\nParmesan 没有被删除仅仅是因为for循环中的cheese变量引用了它，这里的cheese是全局变量。\n\n##### 弱引用的局限\n\n不是每个 Python 对象都可以作为弱引用的目标（或称所指对象）。基本的 list 和 dict实例不能作为所指对象，但是它们的子类可以，int 和 tuple 实例不能作为弱引用的目标，甚至它们的子类也不行。\n\n#### 小结\n每个 Python 对象都有标识、类型和值。只有对象的值会不时变化。\n\n变量保存的是引用，这一点对 Python 编程有很多实际的影响。    \n- 简单的赋值不创建副本。  \n- 对 += 或 *= 所做的增量赋值来说，如果左边的变量绑定的是不可变对象，会创建新对象；如果是可变对象，会就地修改。   \n- 为现有的变量赋予新值，不会修改之前绑定的变量。这叫重新绑定：现在变量绑定了其他对象。如果变量是之前那个对象的最后一个引用，对象会被当作垃圾回收。   \n- 函数的参数以别名的形式传递，这意味着，函数可能会修改通过参数传入的可变对象。这一行为无法避免，除非在本地创建副本，或者使用不可变对象（例如，传入元组，而不传入列表）。   \n- 使用可变类型作为函数参数的默认值有危险，因为如果就地修改了参数，默认值也就变了，这会影响以后使用默认值的调用。\n","source":"_posts/fluent-python-8.md","raw":"title: Fluent Python 第八章小结\ndate: 2018-04-25 17:39:00\ntags:\n- Python\n- 对象引用\n- 垃圾回收\n- Mutability\n- fluent python\ncategories:\n- 读书笔记\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n## Fluent Python ##\n### Chapter 8. Object References, Mutability,and Recycling\n### 第八章:对象引用、可变性和垃圾回收   \n\n本章的主题是对象与对象名称之间的区别。名称不是对象，而是单独的东西。先以一个比喻说明 Python 的变量：变量是标注，而不是盒子。    \n本章的内容有点儿枯燥，但是这些话题却是解决 Python 程序中很多不易察觉的 bug 的关键。   \n\n#### 变量不是盒子\n\nPython中的变量类似Java中的引用式变量，最好将它们理解为附加在对象上的标注。   \n下面的控制台交互和图示很好的解释了\"变量不是盒子\"这一观点:\n\n```python    \n>>> a = [1,2,3]\n>>> b=a\n>>> a.append(4)\n>>> b\n[1, 2, 3, 4]\n```\n![变量不是盒子](https://github.com/aldslvda/blog-images/blob/master/fluent-python-8.1.png?raw=true)    \n\n对引用式变量来说，说把变量分配给对象更合理，反过来说就有问题。毕竟，对象在赋值之前就创建了。为了理解 Python 中的赋值语句，应该始终先读右边。对象在右边创建或获取，在此之后左边的变量才会绑定到对象上，这就像为对象贴上标注。\n\n#### 标识，相等性和别名\n首先看下面的例子和图示:\n\n```python    \n>>> charles = {'name': 'Charles L. Dodgson', 'born': 1832}\n>>> lewis = charles\n>>> lewis is charles\nTrue\n>>> id(charles), id(lewis)\n(4300473992, 4300473992)\n>>> lewis['balance'] = 950\n>>> charles\n{'name': 'Charles L. Dodgson', 'balance': 950, 'born': 1832}\n>>> alex = {'name': 'Charles L. Dodgson', 'born': 1832, 'balance': 950}\n>>> alex == charles\nTrue\n>>> alex is not charles\nTrue\n>>> id(alex)\n4382361712\n```\n\nlewis 和 charles 是别名，即两个变量绑定同一个对象。而 alex 不是 charles 的别名，因为二者绑定的是不同的对象。alex 和charles 绑定的对象具有相同的值（== 比较的就是值），但是它们的标识不同。\n\n>  每个变量都有标识、类型和值。对象一旦创建，它的标识绝不会变；你可以把标识理解为对象在内存中的地址。is 运算符比较两个对象的标识；id() 函数返回对象标识的整数表示。\n\n##### is和==\n== 运算符比较两个对象的值（对象中保存的数据），而 is 比较对象的标识。  \n通常，我们关注的是值，而不是标识，因此 Python 代码中 == 出现的频率比 is 高。  \n\n##### 元组的相对不可变性  \n元组与多数 Python 集合（列表、字典、集，等等）一样，保存的是对象的引用。 如果引用的元素是可变的，即便元组本身不可变，元素依然可变。也就是说，元组的不可变性其实是指 tuple 数据结构的物理内容（即保存的引用）不可变，与引用的对象无关。\n\n下面的例子能显而易见地看出元组的相对不可变性:\n\n```python    \n>>> t1 = (1, 2, [30, 40])\n>>> t2 = (1, 2, [30, 40])\n>>> t1 == t2\nTrue\n>>> id(t1[-1])\n4302515784\n>>> t1[-1].append(99)\n>>> t1\n(1, 2, [30, 40, 99])\n>>> id(t1[-1])\n4302515784\n>>> t1 == t2\nFalse\n```\n\n#### 默认做浅复制\n\n复制列表（或多数内置的可变集合）最简单的方式是使用内置的类型构造方法: \n\n```python    \n>>> l1 = [3, [55, 44], (7, 8, 9)]\n>>> l2 = list(l1)\n>>> l2\n[3, [55, 44], (7, 8, 9)]\n>>> l2 == l1\nTrue\n>>> l2 is l1\nFalse\n```\n这样构造出的l2和l1并不是同一个对象，l2 = l1[:] 也可以得到同样的效果。 \n\n然而，构造方法或 [:] 做的是浅复制（即复制了最外层容器，副本中的元素是源容器中元素的引用）。如果所有元素都是不可变的，那么这样没有问题，还能节省内存。但是，如果有可变的元素，可能会出现错误(l1, l2 会随着可变对象的修改同时发生变化)。  \n\n这时需要做深复制(deepcopy),下面的例子里我们会将深复制和浅复制对比:    \n首先定义一个类\n\n```python     \nclass Bus:\n    def __init__(self, passengers=None):\n        if passengers is None:\n            self.passengers = []\n        else:\n            self.passengers = list(passengers)\n    def pick(self, name):\n        self.passengers.append(name)\n    def drop(self, name):\n        self.passengers.remove(name)\n```\n\n接下来在控制台对类的实例进行操作:\n```python     \n>>> from bus import Bus\n>>> import copy\n>>> bus1 = Bus(['Alice', 'Bill', 'Claire', 'David'])\n>>> bus2 = copy.copy(bus1)\n>>> bus3 = copy.deepcopy(bus1)\n>>> id(bus1), id(bus2), id(bus3)\n(4571562840, 4571563288, 4571563512)\n>>> bus1.drop('Bill')\n>>> bus2.passengers\n['Alice', 'Claire', 'David']\n>>> id(bus1.passengers), id(bus2.passengers), id(bus3.passengers)\n(4571550024, 4571550024, 4566929352)\n>>> bus3.passengers\n['Alice', 'Bill', 'Claire', 'David']\n```\n\nbus2 是bus1的浅复制副本， bus3是深复制副本。\n\ndeepcopy 函数会记住已经复制的对象，因此能优雅地处理循环引用，下面的控制台交互是一个例子。\n\n```python     \n>>> a = [10, 20]\n>>> b = [a, 30]\n>>> a.append(b)\n>>> a\n[10, 20, [[...], 30]]\n>>> from copy import deepcopy\n>>> c = deepcopy(a)\n>>> c\n[10, 20, [[...], 30]]   \n```\n\n\n\n#### 函数的参数作为引用\n\nPython 唯一支持的参数传递模式是共享传参（call by sharing), 共享传参指函数的各个形式参数获得实参中各个引用的副本。也就是说，函数内部的形参是实参的别名。      \n这种方案的结果是，函数可能会修改作为参数传入的可变对象，但是无法修改那些对象的标识（即不能把一个对象替换成另一个对象）。    \n\n下面的例子展示了函数会修改接收到的**可变对象**:\n\n```python    \n>>> def f(a, b):\n... a += b\n... return a\n...\n>>> x = 1\n>>> y = 2\n>>> f(x, y)\n3 >>> x, y\n(1, 2)\n>>> a = [1, 2]\n>>> b = [3, 4]\n>>> f(a, b)\n[1, 2, 3, 4]\n>>> a, b\n([1, 2, 3, 4], [3, 4])\n>>> t = (10, 20)\n>>> u = (30, 40)\n>>> f(t, u)\n(10, 20, 30, 40)\n>>> t, u\n((10, 20), (30, 40))\n```\n\n##### 可变类型不要作为传入参数默认值\n默认值在定义函数时计算（通常在加载模块时），因此默认值变成了函数对象的属性。如果默认值是可变对象，而且修改了它的值，那么后续的函数调用都会受到影响。\n\n##### 防止可变参数造成的影响    \n下面的例子说明了可变参数可能造成的影响 \n\n```python   \nclass TwilightBus:\n    def __init__(self, passengers=None):\n        if passengers is None:\n            self.passengers = []\n        else:\n            self.passengers = passengers\n    def pick(self, name):\n        self.passengers.append(name)\n    def drop(self, name):\n        self.passengers.remove(name)\n\nbasketball_team = ['Sue', 'Tina', 'Maya', 'Diana', 'Pat']\nbus = TwilightBus(basketball_team)\nbus.drop('Tina')\nbus.drop('Pat')\nprint(basketball_team)\n>>> ['Sue', 'Maya', 'Diana']\n\n```\n\n可以看到当乘客从bus上下车后，同时也从篮球队中剔除了，这是不合理的，这是由于传入参数的时候，passengers 仅仅是作为basketball_team的别名而不是创建了一个新对象，这样对passengers的操作会影响到basketball_team\n\n解决办法如下(修改__init__函数)：\n\n```python\ndef __init__(self, passengers=None):\n    if passengers is None:\n        self.passengers = []\n    else:\n        self.passengers = list(passengers)\n```\n\n这样不仅可以防止可变参数造成的影响，同时还能让passengers的类型更加灵活（任何可迭代的对象）\n\n#### del和垃圾回收\n对象本身不会自行销毁，但当对象不能被获取时，可能会被当做垃圾回收。\n\ndel 语句删除名称，而不是对象。del 命令可能会导致对象被当作垃圾回收，但是仅当删除的变量保存的是对象的最后一个引用，或者无法得到对象时。 重新绑定也可能会导致对象的引用数量归零，导致对象被销毁。\n\n在 CPython 中，垃圾回收使用的主要算法是引用计数。实际上，每个对象都会统计有多少引用指向自己。当引用计数归零时，对象立即就被销毁：CPython 会在对象上调用\\_\\_del\\_\\_ 方法（如果定义了），然后释放分配给对象的内存。CPython　2.0 增加了分代垃圾回收算法，用于检测引用循环中涉及的对象组——如果一组对象之间全是相互引用，即使再出色的引用方式也会导致组中的对象不可获取。\n_注： Python 的其他实现有更复杂的垃圾回收程序，而且不依赖引用计数，这意味着，对象的引用数量为零时可能不会立即调用\\_\\_del\\_\\_ 方法_\n\n下面的例子用weakref展示了一个对象生命周期结束时的场景：\n\n```python\nimport weakref\ns1 = {1, 2, 3}\ns2 = s1\ndef bye():\n    print('goodbye')\nender = weakref.finalize(s1, bye)\n\n>>> ender.alive\nTrue\n>>> del s1\n>>> ender.alive\nTrue\n>>> s2 = 'sapm'\ngoodbye\n>>> ender.alive\nFalse\n```\n\n#### 弱引用\n正是因为有引用，对象才会在内存中存在。\n\n弱引用不会增加对象的引用数量。引用的目标对象称为所指对象（referent）。因此我们说，弱引用不会妨碍所指对象被当作垃圾回收。\n\n弱引用在缓存应用中很有用，因为我们不想仅因为被缓存引用着而始终保存缓存对象。\n\n然而，weakref模块的文档指出，weakref.ref类其实是低层接口，供高级用途使用，多数程序最好使用 weakref 集合和 finalize。也就是说，应该使用 WeakKeyDictionary、WeakValueDictionary、WeakSet 和finalize（在内部使用弱引用），不要自己动手创建并处理 weakref.ref 实例。\n\n##### WeakValueDictionary简介\n\nWeakValueDictionary 类实现的是一种可变映射，里面的值是对象的弱引用。被引用的对象在程序中的其他地方被当作垃圾回收后，对应的键会自动从 WeakValueDictionary中删除。因此，WeakValueDictionary 经常用于缓存。\n\n下面是一个例子：\n\n```python    \nclass Cheese:\n    def __init__(self, kind):\n        self.kind = kind\n    def __repr__(self):\n        return 'Cheese(%r)' % self.kind\n\n>>> import weakref\n>>> stock = weakref.WeakValueDictionary()\n>>> catalog = [Cheese('Red Leicester'), Cheese('Tilsit'), Cheese('Brie'), Cheese('Parmesan')]\n>>> for cheese in catalog:\n... stock[cheese.kind] = cheese\n...\n>>> sorted(stock.keys())\n['Brie', 'Parmesan', 'Red Leicester', 'Tilsit']\n>>> del catalog\n>>> sorted(stock.keys())\n['Parmesan']\n>>> del cheese\n>>> sorted(stock.keys())\n[]\n\n```\nParmesan 没有被删除仅仅是因为for循环中的cheese变量引用了它，这里的cheese是全局变量。\n\n##### 弱引用的局限\n\n不是每个 Python 对象都可以作为弱引用的目标（或称所指对象）。基本的 list 和 dict实例不能作为所指对象，但是它们的子类可以，int 和 tuple 实例不能作为弱引用的目标，甚至它们的子类也不行。\n\n#### 小结\n每个 Python 对象都有标识、类型和值。只有对象的值会不时变化。\n\n变量保存的是引用，这一点对 Python 编程有很多实际的影响。    \n- 简单的赋值不创建副本。  \n- 对 += 或 *= 所做的增量赋值来说，如果左边的变量绑定的是不可变对象，会创建新对象；如果是可变对象，会就地修改。   \n- 为现有的变量赋予新值，不会修改之前绑定的变量。这叫重新绑定：现在变量绑定了其他对象。如果变量是之前那个对象的最后一个引用，对象会被当作垃圾回收。   \n- 函数的参数以别名的形式传递，这意味着，函数可能会修改通过参数传入的可变对象。这一行为无法避免，除非在本地创建副本，或者使用不可变对象（例如，传入元组，而不传入列表）。   \n- 使用可变类型作为函数参数的默认值有危险，因为如果就地修改了参数，默认值也就变了，这会影响以后使用默认值的调用。\n","slug":"fluent-python-8","published":1,"updated":"2019-04-25T01:27:25.960Z","comments":1,"layout":"post","link":"","_id":"cjuw5c6gf003hdhyfm7x4jv32","content":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-8-Object-References-Mutability-and-Recycling\"><a href=\"#Chapter-8-Object-References-Mutability-and-Recycling\" class=\"headerlink\" title=\"Chapter 8. Object References, Mutability,and Recycling\"></a>Chapter 8. Object References, Mutability,and Recycling</h3><h3 id=\"第八章-对象引用、可变性和垃圾回收\"><a href=\"#第八章-对象引用、可变性和垃圾回收\" class=\"headerlink\" title=\"第八章:对象引用、可变性和垃圾回收\"></a>第八章:对象引用、可变性和垃圾回收</h3><p>本章的主题是对象与对象名称之间的区别。名称不是对象，而是单独的东西。先以一个比喻说明 Python 的变量：变量是标注，而不是盒子。<br>本章的内容有点儿枯燥，但是这些话题却是解决 Python 程序中很多不易察觉的 bug 的关键。   </p>\n<h4 id=\"变量不是盒子\"><a href=\"#变量不是盒子\" class=\"headerlink\" title=\"变量不是盒子\"></a>变量不是盒子</h4><p>Python中的变量类似Java中的引用式变量，最好将它们理解为附加在对象上的标注。<br>下面的控制台交互和图示很好的解释了”变量不是盒子”这一观点:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b=a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.append(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/aldslvda/blog-images/blob/master/fluent-python-8.1.png?raw=true\" alt=\"变量不是盒子\">    </p>\n<p>对引用式变量来说，说把变量分配给对象更合理，反过来说就有问题。毕竟，对象在赋值之前就创建了。为了理解 Python 中的赋值语句，应该始终先读右边。对象在右边创建或获取，在此之后左边的变量才会绑定到对象上，这就像为对象贴上标注。</p>\n<h4 id=\"标识，相等性和别名\"><a href=\"#标识，相等性和别名\" class=\"headerlink\" title=\"标识，相等性和别名\"></a>标识，相等性和别名</h4><p>首先看下面的例子和图示:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>charles = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'Charles L. Dodgson'</span>, <span class=\"string\">'born'</span>: <span class=\"number\">1832</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>lewis = charles</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>lewis <span class=\"keyword\">is</span> charles</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(charles), id(lewis)</span><br><span class=\"line\">(<span class=\"number\">4300473992</span>, <span class=\"number\">4300473992</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>lewis[<span class=\"string\">'balance'</span>] = <span class=\"number\">950</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>charles</span><br><span class=\"line\">&#123;<span class=\"string\">'name'</span>: <span class=\"string\">'Charles L. Dodgson'</span>, <span class=\"string\">'balance'</span>: <span class=\"number\">950</span>, <span class=\"string\">'born'</span>: <span class=\"number\">1832</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>alex = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'Charles L. Dodgson'</span>, <span class=\"string\">'born'</span>: <span class=\"number\">1832</span>, <span class=\"string\">'balance'</span>: <span class=\"number\">950</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>alex == charles</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>alex <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> charles</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(alex)</span><br><span class=\"line\"><span class=\"number\">4382361712</span></span><br></pre></td></tr></table></figure>\n<p>lewis 和 charles 是别名，即两个变量绑定同一个对象。而 alex 不是 charles 的别名，因为二者绑定的是不同的对象。alex 和charles 绑定的对象具有相同的值（== 比较的就是值），但是它们的标识不同。</p>\n<blockquote>\n<p> 每个变量都有标识、类型和值。对象一旦创建，它的标识绝不会变；你可以把标识理解为对象在内存中的地址。is 运算符比较两个对象的标识；id() 函数返回对象标识的整数表示。</p>\n</blockquote>\n<h5 id=\"is和\"><a href=\"#is和\" class=\"headerlink\" title=\"is和==\"></a>is和==</h5><p>== 运算符比较两个对象的值（对象中保存的数据），而 is 比较对象的标识。<br>通常，我们关注的是值，而不是标识，因此 Python 代码中 == 出现的频率比 is 高。  </p>\n<h5 id=\"元组的相对不可变性\"><a href=\"#元组的相对不可变性\" class=\"headerlink\" title=\"元组的相对不可变性\"></a>元组的相对不可变性</h5><p>元组与多数 Python 集合（列表、字典、集，等等）一样，保存的是对象的引用。 如果引用的元素是可变的，即便元组本身不可变，元素依然可变。也就是说，元组的不可变性其实是指 tuple 数据结构的物理内容（即保存的引用）不可变，与引用的对象无关。</p>\n<p>下面的例子能显而易见地看出元组的相对不可变性:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t1 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">30</span>, <span class=\"number\">40</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t2 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">30</span>, <span class=\"number\">40</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t1 == t2</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(t1[<span class=\"number\">-1</span>])</span><br><span class=\"line\"><span class=\"number\">4302515784</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t1[<span class=\"number\">-1</span>].append(<span class=\"number\">99</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t1</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">99</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(t1[<span class=\"number\">-1</span>])</span><br><span class=\"line\"><span class=\"number\">4302515784</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t1 == t2</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"默认做浅复制\"><a href=\"#默认做浅复制\" class=\"headerlink\" title=\"默认做浅复制\"></a>默认做浅复制</h4><p>复制列表（或多数内置的可变集合）最简单的方式是使用内置的类型构造方法: </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l1 = [<span class=\"number\">3</span>, [<span class=\"number\">55</span>, <span class=\"number\">44</span>], (<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l2 = list(l1)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l2</span><br><span class=\"line\">[<span class=\"number\">3</span>, [<span class=\"number\">55</span>, <span class=\"number\">44</span>], (<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l2 == l1</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l2 <span class=\"keyword\">is</span> l1</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<p>这样构造出的l2和l1并不是同一个对象，l2 = l1[:] 也可以得到同样的效果。 </p>\n<p>然而，构造方法或 [:] 做的是浅复制（即复制了最外层容器，副本中的元素是源容器中元素的引用）。如果所有元素都是不可变的，那么这样没有问题，还能节省内存。但是，如果有可变的元素，可能会出现错误(l1, l2 会随着可变对象的修改同时发生变化)。  </p>\n<p>这时需要做深复制(deepcopy),下面的例子里我们会将深复制和浅复制对比:<br>首先定义一个类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bus</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, passengers=None)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> passengers <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            self.passengers = []</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.passengers = list(passengers)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pick</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.passengers.append(name)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">drop</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.passengers.remove(name)</span><br></pre></td></tr></table></figure>\n<p>接下来在控制台对类的实例进行操作:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> bus <span class=\"keyword\">import</span> Bus</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> copy</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bus1 = Bus([<span class=\"string\">'Alice'</span>, <span class=\"string\">'Bill'</span>, <span class=\"string\">'Claire'</span>, <span class=\"string\">'David'</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bus2 = copy.copy(bus1)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bus3 = copy.deepcopy(bus1)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(bus1), id(bus2), id(bus3)</span><br><span class=\"line\">(<span class=\"number\">4571562840</span>, <span class=\"number\">4571563288</span>, <span class=\"number\">4571563512</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bus1.drop(<span class=\"string\">'Bill'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bus2.passengers</span><br><span class=\"line\">[<span class=\"string\">'Alice'</span>, <span class=\"string\">'Claire'</span>, <span class=\"string\">'David'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(bus1.passengers), id(bus2.passengers), id(bus3.passengers)</span><br><span class=\"line\">(<span class=\"number\">4571550024</span>, <span class=\"number\">4571550024</span>, <span class=\"number\">4566929352</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bus3.passengers</span><br><span class=\"line\">[<span class=\"string\">'Alice'</span>, <span class=\"string\">'Bill'</span>, <span class=\"string\">'Claire'</span>, <span class=\"string\">'David'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>bus2 是bus1的浅复制副本， bus3是深复制副本。</p>\n<p>deepcopy 函数会记住已经复制的对象，因此能优雅地处理循环引用，下面的控制台交互是一个例子。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">10</span>, <span class=\"number\">20</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = [a, <span class=\"number\">30</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.append(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[<span class=\"number\">10</span>, <span class=\"number\">20</span>, [[...], <span class=\"number\">30</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> copy <span class=\"keyword\">import</span> deepcopy</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = deepcopy(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\">[<span class=\"number\">10</span>, <span class=\"number\">20</span>, [[...], <span class=\"number\">30</span>]]</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数的参数作为引用\"><a href=\"#函数的参数作为引用\" class=\"headerlink\" title=\"函数的参数作为引用\"></a>函数的参数作为引用</h4><p>Python 唯一支持的参数传递模式是共享传参（call by sharing), 共享传参指函数的各个形式参数获得实参中各个引用的副本。也就是说，函数内部的形参是实参的别名。<br>这种方案的结果是，函数可能会修改作为参数传入的可变对象，但是无法修改那些对象的标识（即不能把一个对象替换成另一个对象）。    </p>\n<p>下面的例子展示了函数会修改接收到的<strong>可变对象</strong>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>a += b</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">return</span> a</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f(x, y)</span><br><span class=\"line\"><span class=\"number\">3</span> &gt;&gt;&gt; x, y</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = [<span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f(a, b)</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b</span><br><span class=\"line\">([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = (<span class=\"number\">10</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>u = (<span class=\"number\">30</span>, <span class=\"number\">40</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f(t, u)</span><br><span class=\"line\">(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t, u</span><br><span class=\"line\">((<span class=\"number\">10</span>, <span class=\"number\">20</span>), (<span class=\"number\">30</span>, <span class=\"number\">40</span>))</span><br></pre></td></tr></table></figure>\n<h5 id=\"可变类型不要作为传入参数默认值\"><a href=\"#可变类型不要作为传入参数默认值\" class=\"headerlink\" title=\"可变类型不要作为传入参数默认值\"></a>可变类型不要作为传入参数默认值</h5><p>默认值在定义函数时计算（通常在加载模块时），因此默认值变成了函数对象的属性。如果默认值是可变对象，而且修改了它的值，那么后续的函数调用都会受到影响。</p>\n<h5 id=\"防止可变参数造成的影响\"><a href=\"#防止可变参数造成的影响\" class=\"headerlink\" title=\"防止可变参数造成的影响\"></a>防止可变参数造成的影响</h5><p>下面的例子说明了可变参数可能造成的影响 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TwilightBus</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, passengers=None)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> passengers <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            self.passengers = []</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.passengers = passengers</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pick</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.passengers.append(name)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">drop</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.passengers.remove(name)</span><br><span class=\"line\"></span><br><span class=\"line\">basketball_team = [<span class=\"string\">'Sue'</span>, <span class=\"string\">'Tina'</span>, <span class=\"string\">'Maya'</span>, <span class=\"string\">'Diana'</span>, <span class=\"string\">'Pat'</span>]</span><br><span class=\"line\">bus = TwilightBus(basketball_team)</span><br><span class=\"line\">bus.drop(<span class=\"string\">'Tina'</span>)</span><br><span class=\"line\">bus.drop(<span class=\"string\">'Pat'</span>)</span><br><span class=\"line\">print(basketball_team)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[<span class=\"string\">'Sue'</span>, <span class=\"string\">'Maya'</span>, <span class=\"string\">'Diana'</span>]</span><br></pre></td></tr></table></figure>\n<p>可以看到当乘客从bus上下车后，同时也从篮球队中剔除了，这是不合理的，这是由于传入参数的时候，passengers 仅仅是作为basketball_team的别名而不是创建了一个新对象，这样对passengers的操作会影响到basketball_team</p>\n<p>解决办法如下(修改<strong>init</strong>函数)：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, passengers=None)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> passengers <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        self.passengers = []</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        self.passengers = list(passengers)</span><br></pre></td></tr></table></figure>\n<p>这样不仅可以防止可变参数造成的影响，同时还能让passengers的类型更加灵活（任何可迭代的对象）</p>\n<h4 id=\"del和垃圾回收\"><a href=\"#del和垃圾回收\" class=\"headerlink\" title=\"del和垃圾回收\"></a>del和垃圾回收</h4><p>对象本身不会自行销毁，但当对象不能被获取时，可能会被当做垃圾回收。</p>\n<p>del 语句删除名称，而不是对象。del 命令可能会导致对象被当作垃圾回收，但是仅当删除的变量保存的是对象的最后一个引用，或者无法得到对象时。 重新绑定也可能会导致对象的引用数量归零，导致对象被销毁。</p>\n<p>在 CPython 中，垃圾回收使用的主要算法是引用计数。实际上，每个对象都会统计有多少引用指向自己。当引用计数归零时，对象立即就被销毁：CPython 会在对象上调用__del__ 方法（如果定义了），然后释放分配给对象的内存。CPython　2.0 增加了分代垃圾回收算法，用于检测引用循环中涉及的对象组——如果一组对象之间全是相互引用，即使再出色的引用方式也会导致组中的对象不可获取。<br><em>注： Python 的其他实现有更复杂的垃圾回收程序，而且不依赖引用计数，这意味着，对象的引用数量为零时可能不会立即调用\\</em>_del__ 方法_</p>\n<p>下面的例子用weakref展示了一个对象生命周期结束时的场景：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> weakref</span><br><span class=\"line\">s1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">s2 = s1</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bye</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'goodbye'</span>)</span><br><span class=\"line\">ender = weakref.finalize(s1, bye)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ender.alive</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> s1</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ender.alive</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s2 = <span class=\"string\">'sapm'</span></span><br><span class=\"line\">goodbye</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ender.alive</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"弱引用\"><a href=\"#弱引用\" class=\"headerlink\" title=\"弱引用\"></a>弱引用</h4><p>正是因为有引用，对象才会在内存中存在。</p>\n<p>弱引用不会增加对象的引用数量。引用的目标对象称为所指对象（referent）。因此我们说，弱引用不会妨碍所指对象被当作垃圾回收。</p>\n<p>弱引用在缓存应用中很有用，因为我们不想仅因为被缓存引用着而始终保存缓存对象。</p>\n<p>然而，weakref模块的文档指出，weakref.ref类其实是低层接口，供高级用途使用，多数程序最好使用 weakref 集合和 finalize。也就是说，应该使用 WeakKeyDictionary、WeakValueDictionary、WeakSet 和finalize（在内部使用弱引用），不要自己动手创建并处理 weakref.ref 实例。</p>\n<h5 id=\"WeakValueDictionary简介\"><a href=\"#WeakValueDictionary简介\" class=\"headerlink\" title=\"WeakValueDictionary简介\"></a>WeakValueDictionary简介</h5><p>WeakValueDictionary 类实现的是一种可变映射，里面的值是对象的弱引用。被引用的对象在程序中的其他地方被当作垃圾回收后，对应的键会自动从 WeakValueDictionary中删除。因此，WeakValueDictionary 经常用于缓存。</p>\n<p>下面是一个例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cheese</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, kind)</span>:</span></span><br><span class=\"line\">        self.kind = kind</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Cheese(%r)'</span> % self.kind</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> weakref</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>stock = weakref.WeakValueDictionary()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>catalog = [Cheese(<span class=\"string\">'Red Leicester'</span>), Cheese(<span class=\"string\">'Tilsit'</span>), Cheese(<span class=\"string\">'Brie'</span>), Cheese(<span class=\"string\">'Parmesan'</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> cheese <span class=\"keyword\">in</span> catalog:</span><br><span class=\"line\"><span class=\"meta\">... </span>stock[cheese.kind] = cheese</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sorted(stock.keys())</span><br><span class=\"line\">[<span class=\"string\">'Brie'</span>, <span class=\"string\">'Parmesan'</span>, <span class=\"string\">'Red Leicester'</span>, <span class=\"string\">'Tilsit'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> catalog</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sorted(stock.keys())</span><br><span class=\"line\">[<span class=\"string\">'Parmesan'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> cheese</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sorted(stock.keys())</span><br><span class=\"line\">[]</span><br></pre></td></tr></table></figure>\n<p>Parmesan 没有被删除仅仅是因为for循环中的cheese变量引用了它，这里的cheese是全局变量。</p>\n<h5 id=\"弱引用的局限\"><a href=\"#弱引用的局限\" class=\"headerlink\" title=\"弱引用的局限\"></a>弱引用的局限</h5><p>不是每个 Python 对象都可以作为弱引用的目标（或称所指对象）。基本的 list 和 dict实例不能作为所指对象，但是它们的子类可以，int 和 tuple 实例不能作为弱引用的目标，甚至它们的子类也不行。</p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>每个 Python 对象都有标识、类型和值。只有对象的值会不时变化。</p>\n<p>变量保存的是引用，这一点对 Python 编程有很多实际的影响。    </p>\n<ul>\n<li>简单的赋值不创建副本。  </li>\n<li>对 += 或 *= 所做的增量赋值来说，如果左边的变量绑定的是不可变对象，会创建新对象；如果是可变对象，会就地修改。   </li>\n<li>为现有的变量赋予新值，不会修改之前绑定的变量。这叫重新绑定：现在变量绑定了其他对象。如果变量是之前那个对象的最后一个引用，对象会被当作垃圾回收。   </li>\n<li>函数的参数以别名的形式传递，这意味着，函数可能会修改通过参数传入的可变对象。这一行为无法避免，除非在本地创建副本，或者使用不可变对象（例如，传入元组，而不传入列表）。   </li>\n<li>使用可变类型作为函数参数的默认值有危险，因为如果就地修改了参数，默认值也就变了，这会影响以后使用默认值的调用。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-8-Object-References-Mutability-and-Recycling\"><a href=\"#Chapter-8-Object-References-Mutability-and-Recycling\" class=\"headerlink\" title=\"Chapter 8. Object References, Mutability,and Recycling\"></a>Chapter 8. Object References, Mutability,and Recycling</h3><h3 id=\"第八章-对象引用、可变性和垃圾回收\"><a href=\"#第八章-对象引用、可变性和垃圾回收\" class=\"headerlink\" title=\"第八章:对象引用、可变性和垃圾回收\"></a>第八章:对象引用、可变性和垃圾回收</h3><p>本章的主题是对象与对象名称之间的区别。名称不是对象，而是单独的东西。先以一个比喻说明 Python 的变量：变量是标注，而不是盒子。<br>本章的内容有点儿枯燥，但是这些话题却是解决 Python 程序中很多不易察觉的 bug 的关键。   </p>\n<h4 id=\"变量不是盒子\"><a href=\"#变量不是盒子\" class=\"headerlink\" title=\"变量不是盒子\"></a>变量不是盒子</h4><p>Python中的变量类似Java中的引用式变量，最好将它们理解为附加在对象上的标注。<br>下面的控制台交互和图示很好的解释了”变量不是盒子”这一观点:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b=a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.append(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/aldslvda/blog-images/blob/master/fluent-python-8.1.png?raw=true\" alt=\"变量不是盒子\">    </p>\n<p>对引用式变量来说，说把变量分配给对象更合理，反过来说就有问题。毕竟，对象在赋值之前就创建了。为了理解 Python 中的赋值语句，应该始终先读右边。对象在右边创建或获取，在此之后左边的变量才会绑定到对象上，这就像为对象贴上标注。</p>\n<h4 id=\"标识，相等性和别名\"><a href=\"#标识，相等性和别名\" class=\"headerlink\" title=\"标识，相等性和别名\"></a>标识，相等性和别名</h4><p>首先看下面的例子和图示:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>charles = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'Charles L. Dodgson'</span>, <span class=\"string\">'born'</span>: <span class=\"number\">1832</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>lewis = charles</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>lewis <span class=\"keyword\">is</span> charles</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(charles), id(lewis)</span><br><span class=\"line\">(<span class=\"number\">4300473992</span>, <span class=\"number\">4300473992</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>lewis[<span class=\"string\">'balance'</span>] = <span class=\"number\">950</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>charles</span><br><span class=\"line\">&#123;<span class=\"string\">'name'</span>: <span class=\"string\">'Charles L. Dodgson'</span>, <span class=\"string\">'balance'</span>: <span class=\"number\">950</span>, <span class=\"string\">'born'</span>: <span class=\"number\">1832</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>alex = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'Charles L. Dodgson'</span>, <span class=\"string\">'born'</span>: <span class=\"number\">1832</span>, <span class=\"string\">'balance'</span>: <span class=\"number\">950</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>alex == charles</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>alex <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> charles</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(alex)</span><br><span class=\"line\"><span class=\"number\">4382361712</span></span><br></pre></td></tr></table></figure>\n<p>lewis 和 charles 是别名，即两个变量绑定同一个对象。而 alex 不是 charles 的别名，因为二者绑定的是不同的对象。alex 和charles 绑定的对象具有相同的值（== 比较的就是值），但是它们的标识不同。</p>\n<blockquote>\n<p> 每个变量都有标识、类型和值。对象一旦创建，它的标识绝不会变；你可以把标识理解为对象在内存中的地址。is 运算符比较两个对象的标识；id() 函数返回对象标识的整数表示。</p>\n</blockquote>\n<h5 id=\"is和\"><a href=\"#is和\" class=\"headerlink\" title=\"is和==\"></a>is和==</h5><p>== 运算符比较两个对象的值（对象中保存的数据），而 is 比较对象的标识。<br>通常，我们关注的是值，而不是标识，因此 Python 代码中 == 出现的频率比 is 高。  </p>\n<h5 id=\"元组的相对不可变性\"><a href=\"#元组的相对不可变性\" class=\"headerlink\" title=\"元组的相对不可变性\"></a>元组的相对不可变性</h5><p>元组与多数 Python 集合（列表、字典、集，等等）一样，保存的是对象的引用。 如果引用的元素是可变的，即便元组本身不可变，元素依然可变。也就是说，元组的不可变性其实是指 tuple 数据结构的物理内容（即保存的引用）不可变，与引用的对象无关。</p>\n<p>下面的例子能显而易见地看出元组的相对不可变性:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t1 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">30</span>, <span class=\"number\">40</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t2 = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">30</span>, <span class=\"number\">40</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t1 == t2</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(t1[<span class=\"number\">-1</span>])</span><br><span class=\"line\"><span class=\"number\">4302515784</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t1[<span class=\"number\">-1</span>].append(<span class=\"number\">99</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t1</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">99</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(t1[<span class=\"number\">-1</span>])</span><br><span class=\"line\"><span class=\"number\">4302515784</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t1 == t2</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"默认做浅复制\"><a href=\"#默认做浅复制\" class=\"headerlink\" title=\"默认做浅复制\"></a>默认做浅复制</h4><p>复制列表（或多数内置的可变集合）最简单的方式是使用内置的类型构造方法: </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l1 = [<span class=\"number\">3</span>, [<span class=\"number\">55</span>, <span class=\"number\">44</span>], (<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l2 = list(l1)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l2</span><br><span class=\"line\">[<span class=\"number\">3</span>, [<span class=\"number\">55</span>, <span class=\"number\">44</span>], (<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l2 == l1</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l2 <span class=\"keyword\">is</span> l1</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<p>这样构造出的l2和l1并不是同一个对象，l2 = l1[:] 也可以得到同样的效果。 </p>\n<p>然而，构造方法或 [:] 做的是浅复制（即复制了最外层容器，副本中的元素是源容器中元素的引用）。如果所有元素都是不可变的，那么这样没有问题，还能节省内存。但是，如果有可变的元素，可能会出现错误(l1, l2 会随着可变对象的修改同时发生变化)。  </p>\n<p>这时需要做深复制(deepcopy),下面的例子里我们会将深复制和浅复制对比:<br>首先定义一个类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bus</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, passengers=None)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> passengers <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            self.passengers = []</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.passengers = list(passengers)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pick</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.passengers.append(name)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">drop</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.passengers.remove(name)</span><br></pre></td></tr></table></figure>\n<p>接下来在控制台对类的实例进行操作:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> bus <span class=\"keyword\">import</span> Bus</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> copy</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bus1 = Bus([<span class=\"string\">'Alice'</span>, <span class=\"string\">'Bill'</span>, <span class=\"string\">'Claire'</span>, <span class=\"string\">'David'</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bus2 = copy.copy(bus1)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bus3 = copy.deepcopy(bus1)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(bus1), id(bus2), id(bus3)</span><br><span class=\"line\">(<span class=\"number\">4571562840</span>, <span class=\"number\">4571563288</span>, <span class=\"number\">4571563512</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bus1.drop(<span class=\"string\">'Bill'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bus2.passengers</span><br><span class=\"line\">[<span class=\"string\">'Alice'</span>, <span class=\"string\">'Claire'</span>, <span class=\"string\">'David'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(bus1.passengers), id(bus2.passengers), id(bus3.passengers)</span><br><span class=\"line\">(<span class=\"number\">4571550024</span>, <span class=\"number\">4571550024</span>, <span class=\"number\">4566929352</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bus3.passengers</span><br><span class=\"line\">[<span class=\"string\">'Alice'</span>, <span class=\"string\">'Bill'</span>, <span class=\"string\">'Claire'</span>, <span class=\"string\">'David'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>bus2 是bus1的浅复制副本， bus3是深复制副本。</p>\n<p>deepcopy 函数会记住已经复制的对象，因此能优雅地处理循环引用，下面的控制台交互是一个例子。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">10</span>, <span class=\"number\">20</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = [a, <span class=\"number\">30</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.append(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[<span class=\"number\">10</span>, <span class=\"number\">20</span>, [[...], <span class=\"number\">30</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> copy <span class=\"keyword\">import</span> deepcopy</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = deepcopy(a)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\">[<span class=\"number\">10</span>, <span class=\"number\">20</span>, [[...], <span class=\"number\">30</span>]]</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数的参数作为引用\"><a href=\"#函数的参数作为引用\" class=\"headerlink\" title=\"函数的参数作为引用\"></a>函数的参数作为引用</h4><p>Python 唯一支持的参数传递模式是共享传参（call by sharing), 共享传参指函数的各个形式参数获得实参中各个引用的副本。也就是说，函数内部的形参是实参的别名。<br>这种方案的结果是，函数可能会修改作为参数传入的可变对象，但是无法修改那些对象的标识（即不能把一个对象替换成另一个对象）。    </p>\n<p>下面的例子展示了函数会修改接收到的<strong>可变对象</strong>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>a += b</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">return</span> a</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f(x, y)</span><br><span class=\"line\"><span class=\"number\">3</span> &gt;&gt;&gt; x, y</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = [<span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f(a, b)</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b</span><br><span class=\"line\">([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = (<span class=\"number\">10</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>u = (<span class=\"number\">30</span>, <span class=\"number\">40</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f(t, u)</span><br><span class=\"line\">(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t, u</span><br><span class=\"line\">((<span class=\"number\">10</span>, <span class=\"number\">20</span>), (<span class=\"number\">30</span>, <span class=\"number\">40</span>))</span><br></pre></td></tr></table></figure>\n<h5 id=\"可变类型不要作为传入参数默认值\"><a href=\"#可变类型不要作为传入参数默认值\" class=\"headerlink\" title=\"可变类型不要作为传入参数默认值\"></a>可变类型不要作为传入参数默认值</h5><p>默认值在定义函数时计算（通常在加载模块时），因此默认值变成了函数对象的属性。如果默认值是可变对象，而且修改了它的值，那么后续的函数调用都会受到影响。</p>\n<h5 id=\"防止可变参数造成的影响\"><a href=\"#防止可变参数造成的影响\" class=\"headerlink\" title=\"防止可变参数造成的影响\"></a>防止可变参数造成的影响</h5><p>下面的例子说明了可变参数可能造成的影响 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TwilightBus</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, passengers=None)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> passengers <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            self.passengers = []</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.passengers = passengers</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pick</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.passengers.append(name)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">drop</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.passengers.remove(name)</span><br><span class=\"line\"></span><br><span class=\"line\">basketball_team = [<span class=\"string\">'Sue'</span>, <span class=\"string\">'Tina'</span>, <span class=\"string\">'Maya'</span>, <span class=\"string\">'Diana'</span>, <span class=\"string\">'Pat'</span>]</span><br><span class=\"line\">bus = TwilightBus(basketball_team)</span><br><span class=\"line\">bus.drop(<span class=\"string\">'Tina'</span>)</span><br><span class=\"line\">bus.drop(<span class=\"string\">'Pat'</span>)</span><br><span class=\"line\">print(basketball_team)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[<span class=\"string\">'Sue'</span>, <span class=\"string\">'Maya'</span>, <span class=\"string\">'Diana'</span>]</span><br></pre></td></tr></table></figure>\n<p>可以看到当乘客从bus上下车后，同时也从篮球队中剔除了，这是不合理的，这是由于传入参数的时候，passengers 仅仅是作为basketball_team的别名而不是创建了一个新对象，这样对passengers的操作会影响到basketball_team</p>\n<p>解决办法如下(修改<strong>init</strong>函数)：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, passengers=None)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> passengers <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        self.passengers = []</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        self.passengers = list(passengers)</span><br></pre></td></tr></table></figure>\n<p>这样不仅可以防止可变参数造成的影响，同时还能让passengers的类型更加灵活（任何可迭代的对象）</p>\n<h4 id=\"del和垃圾回收\"><a href=\"#del和垃圾回收\" class=\"headerlink\" title=\"del和垃圾回收\"></a>del和垃圾回收</h4><p>对象本身不会自行销毁，但当对象不能被获取时，可能会被当做垃圾回收。</p>\n<p>del 语句删除名称，而不是对象。del 命令可能会导致对象被当作垃圾回收，但是仅当删除的变量保存的是对象的最后一个引用，或者无法得到对象时。 重新绑定也可能会导致对象的引用数量归零，导致对象被销毁。</p>\n<p>在 CPython 中，垃圾回收使用的主要算法是引用计数。实际上，每个对象都会统计有多少引用指向自己。当引用计数归零时，对象立即就被销毁：CPython 会在对象上调用__del__ 方法（如果定义了），然后释放分配给对象的内存。CPython　2.0 增加了分代垃圾回收算法，用于检测引用循环中涉及的对象组——如果一组对象之间全是相互引用，即使再出色的引用方式也会导致组中的对象不可获取。<br><em>注： Python 的其他实现有更复杂的垃圾回收程序，而且不依赖引用计数，这意味着，对象的引用数量为零时可能不会立即调用\\</em>_del__ 方法_</p>\n<p>下面的例子用weakref展示了一个对象生命周期结束时的场景：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> weakref</span><br><span class=\"line\">s1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">s2 = s1</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bye</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'goodbye'</span>)</span><br><span class=\"line\">ender = weakref.finalize(s1, bye)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ender.alive</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> s1</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ender.alive</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s2 = <span class=\"string\">'sapm'</span></span><br><span class=\"line\">goodbye</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ender.alive</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"弱引用\"><a href=\"#弱引用\" class=\"headerlink\" title=\"弱引用\"></a>弱引用</h4><p>正是因为有引用，对象才会在内存中存在。</p>\n<p>弱引用不会增加对象的引用数量。引用的目标对象称为所指对象（referent）。因此我们说，弱引用不会妨碍所指对象被当作垃圾回收。</p>\n<p>弱引用在缓存应用中很有用，因为我们不想仅因为被缓存引用着而始终保存缓存对象。</p>\n<p>然而，weakref模块的文档指出，weakref.ref类其实是低层接口，供高级用途使用，多数程序最好使用 weakref 集合和 finalize。也就是说，应该使用 WeakKeyDictionary、WeakValueDictionary、WeakSet 和finalize（在内部使用弱引用），不要自己动手创建并处理 weakref.ref 实例。</p>\n<h5 id=\"WeakValueDictionary简介\"><a href=\"#WeakValueDictionary简介\" class=\"headerlink\" title=\"WeakValueDictionary简介\"></a>WeakValueDictionary简介</h5><p>WeakValueDictionary 类实现的是一种可变映射，里面的值是对象的弱引用。被引用的对象在程序中的其他地方被当作垃圾回收后，对应的键会自动从 WeakValueDictionary中删除。因此，WeakValueDictionary 经常用于缓存。</p>\n<p>下面是一个例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cheese</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, kind)</span>:</span></span><br><span class=\"line\">        self.kind = kind</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Cheese(%r)'</span> % self.kind</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> weakref</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>stock = weakref.WeakValueDictionary()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>catalog = [Cheese(<span class=\"string\">'Red Leicester'</span>), Cheese(<span class=\"string\">'Tilsit'</span>), Cheese(<span class=\"string\">'Brie'</span>), Cheese(<span class=\"string\">'Parmesan'</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> cheese <span class=\"keyword\">in</span> catalog:</span><br><span class=\"line\"><span class=\"meta\">... </span>stock[cheese.kind] = cheese</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sorted(stock.keys())</span><br><span class=\"line\">[<span class=\"string\">'Brie'</span>, <span class=\"string\">'Parmesan'</span>, <span class=\"string\">'Red Leicester'</span>, <span class=\"string\">'Tilsit'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> catalog</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sorted(stock.keys())</span><br><span class=\"line\">[<span class=\"string\">'Parmesan'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> cheese</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sorted(stock.keys())</span><br><span class=\"line\">[]</span><br></pre></td></tr></table></figure>\n<p>Parmesan 没有被删除仅仅是因为for循环中的cheese变量引用了它，这里的cheese是全局变量。</p>\n<h5 id=\"弱引用的局限\"><a href=\"#弱引用的局限\" class=\"headerlink\" title=\"弱引用的局限\"></a>弱引用的局限</h5><p>不是每个 Python 对象都可以作为弱引用的目标（或称所指对象）。基本的 list 和 dict实例不能作为所指对象，但是它们的子类可以，int 和 tuple 实例不能作为弱引用的目标，甚至它们的子类也不行。</p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>每个 Python 对象都有标识、类型和值。只有对象的值会不时变化。</p>\n<p>变量保存的是引用，这一点对 Python 编程有很多实际的影响。    </p>\n<ul>\n<li>简单的赋值不创建副本。  </li>\n<li>对 += 或 *= 所做的增量赋值来说，如果左边的变量绑定的是不可变对象，会创建新对象；如果是可变对象，会就地修改。   </li>\n<li>为现有的变量赋予新值，不会修改之前绑定的变量。这叫重新绑定：现在变量绑定了其他对象。如果变量是之前那个对象的最后一个引用，对象会被当作垃圾回收。   </li>\n<li>函数的参数以别名的形式传递，这意味着，函数可能会修改通过参数传入的可变对象。这一行为无法避免，除非在本地创建副本，或者使用不可变对象（例如，传入元组，而不传入列表）。   </li>\n<li>使用可变类型作为函数参数的默认值有危险，因为如果就地修改了参数，默认值也就变了，这会影响以后使用默认值的调用。</li>\n</ul>\n"},{"title":"Fluent Python 第九章小结","date":"2018-04-26T02:04:24.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true"],"toc":true,"comment":true,"_content":"\n## Fluent Python ##\n### Chapter 9. A Pythonic Object\n### 第九章: Pythonic 的对象\n\n得益于 Python 数据模型，自定义类型的行为可以像内置类型那样自然。实现如此自然的行为，靠的不是继承，而是鸭子类型（duck typing）：我们只需按照预定行为实现对象所需的方法即可。\n\n本章包含以下话题：  \n- 支持用于生成对象其他表示形式的内置函数（如 repr()、bytes()，等等）\n- 使用一个类方法实现备选构造方法\n- 扩展内置的 format() 函数和 str.format() 方法使用的格式微语言\n- 实现只读属性\n- 把对象变为可散列的，以便在集合中及作为 dict 的键使用\n- 利用 \\_\\_slots\\_\\_ 节省内存\n\n#### 对象表示形式\nPython 提供了两种方式获取对象的字符串表示形式。  \n\n- repr() 便于开发者理解的方式返回对象的字符串表示形式。\n- str() 便于用户理解的方式返回对象的字符串表示形式。\n\n为了给对象提供其他的表示形式，还会用到另外两个特殊方法：\\_\\_bytes\\_\\_ 和\\_\\_format\\_\\_。\\_\\_bytes\\_\\_ 方法与 \\_\\_str\\_\\_ 方法类似：bytes() 函数调用它获取对象的字节序列表示形式。而 \\_\\_format\\_\\_ 方法会被内置的 format() 函数和 str.format() 方法调用，使用特殊的格式代码显示对象的字符串表示形式.\n\n#### 构建一个向量类\n\n向量类的实现如下：\n\n```python  \nfrom array import array\nimport math\nclass Vector2d:\n    # typecode 是类属性，在 Vector2d 实例和字节序列之间转换时使用\n    typecode = 'd'\n    # 初始化向量\n    def __init__(self, x, y):\n        self.x = float(x)\n        self.y = float(y)\n    # 定义 __iter__ 方法，把 Vector2d 实例变成可迭代的对象，这样才能拆包（例如，x, y = my_vector）。这个方法的实现方式很简单，直接调用生成器表达式一个接一个产出分量。\n    def __iter__(self):\n        return (i for i in (self.x, self.y))\n    # __repr__ 方法使用 {!r} 获取各个分量的表示形式，然后插值，构成一个字符串；因为 Vector2d 实例是可迭代的对象，所以 *self 会把 x 和 y 分量提供给 format 函数。\n    def __repr__(self):\n        class_name = type(self).__name__\n        return '{}({!r}, {!r})'.format(class_name, *self)\n    def __str__(self):\n        return str(tuple(self))\n    # 为了生成字节序列，我们把 typecode 转换成字节序列，然后迭代 Vector2d 实例，得到一个数组，再把数组转换成字节序列。\n    def __bytes__(self):\n        return (bytes([ord(self.typecode)])+bytes(array(self.typecode, self)))\n    # 比较向量的值\n    def __eq__(self, other):\n        return tuple(self) == tuple(other)\n    # √x^2+y^2\n    def __abs__(self):\n        return math.hypot(self.x, self.y)\n    # 将模的值转化成布尔值\n    def __bool__(self):\n        return bool(abs(self))\n\n```\n\n#### 备选构造方法\n\n上一节的vector实例可以将vector转化成字节序列，同理我们也可以将字节序列转化成vector。\n\nvector2d_v1.py：\n\n```python   \nfrom vector2d_v0 import Vector2d as vec\n\nclass Vector2d(vec):\n    # 类方法\n    @classmethod\n    # 使用cls传入类本身\n    def frombytes(cls, octets):\n        typecode = chr(octets[0])\n        # 创建memoryview，使用typecode转换 \n        memv = memoryview(octets[1:]).cast(typecode)\n        # 拆包memoryview, 构造向量\n        return cls(*memv)\n```\n\n#### classmethod 和 staticmethod\npython 提供了两个装饰器来装饰类中定义的方法：classmethod 和 staticmethod\n\n- classmethod 用来定义操作类而不是操作实例的方法。classmethod 最常见的方式就是定义备用的构造方法。\n- staticmethod 用来定义与实例无关的一些操作，相当于定位在类中的普通函数\n\n#### 格式化显示\n内置的 format() 函数和 str.format() 方法把各个类型的格式化方式委托给相应的.\\_\\_format\\_\\_(format_spec) 方法。format_spec 是格式说明符，它是：format(my_obj, format_spec) 的第二个参数，或者str.format() 方法的格式字符串，{} 里代换字段中冒号后面的部分.\n\n```python   \n>>> brl = 1/2.43\n>>> brl\n0.4115226337448559\n>>> format(brl, '0.4f') #【1】\n'0.4115'\n>>> '1 BRL = {rate:0.2f} USD'.format(rate=brl) #【2】\n'1 BRL = 0.41 USD'\n\n```\n【1】中的'0.4f'是格式说明符\n【2】中格式说明符是'0.2f', 'rate'是字段名称，'{0.mass:5.3e}'这样的格式中， '0.mass'是字段名, '5.3e'是格式\n\n**格式规范微语言**: 格式说明符使用的表示法, 格式规范微语言是可扩展的，因为各个类可以自行决定如何解释 format_spec 参数。\n\n首先实现一个简单的格式化方法：\n\n```python    \ndef __format__(self, fmt_spec=''):\n    components = (format(c, fmt_spec) for c in self)\n    return '({}, {})'.format(*components)\n```\n\n这样可以实现如下效果：\n\n```python    \n>>> v1 = Vector2d(3, 4)\n>>> format(v1)\n'(3.0, 4.0)'\n>>> format(v1, '.2f')\n'(3.00, 4.00)'\n>>> format(v1, '.3e')\n'(3.000e+00, 4.000e+00)'\n```\n\n下面增加一个自定义的格式说明符p, 如果格式说明符以 'p' 结尾，那么在极坐标中显示向量，即 <r, θ>，其中 r 是模，θ是弧度\n\n下面是实现：\n\n```python    \ndef angle(self):\n    return math.atan2(self.y, self.x)\n\ndef __format__(self, fmt_spec=''):\n    if fmt_spec.endswith('p'):\n        fmt_spec = fmt_spec[:-1]\n        coords = (abs(self), self.angle())\n        outer_fmt = '<{}, {}>'\n    else:\n        coords = self \n        outer_fmt = '({}, {})'\n        components = (format(c, fmt_spec) for c in coords)\n    return outer_fmt.format(*components)\n```\n\n\n#### 可散列的(hashable)Vector2d\n代码见 vector2d_v3.py\n目前Vector2d是不可散列的， 因此不能放入集合中，为了使得Vector2d变成可散列的，需要实现\\_\\_hash\\_\\_，并且让Vector2d不可变\n\n首先需要让Vector2d不可变(使用@property装饰器装饰读值方法(getter)):\n\n```python   \ndef __init__(self, x, y):\n    self.__x = float(x)\n    self.__y = float(y)\n@property\ndef x(self):\n    return self.__x\n@property\ndef y(self):\n    return self.__y\n\n```\n\n这样x和y都是只读的了。接下来实现\\_\\_hash\\_\\_方法:\n```python     \ndef __hash__(self):\n    return hash(self.x) ^ hash(self.y)\n``` \n_注： 如果要实现一个可散列的类型，不一定要保护实例变量属性或者实现properties,只需要正确实现\\_\\_hash\\_\\_和\\_\\_eq\\_\\_即可，但是实例的hash值绝对不应该改变，所以这里会提到只读特性_\n\n#### Python中的私有属性和受保护的属性\n\n为了避免子类覆盖父类的私有属性，如果以 \\_\\_mood 的形式（两个前导下划线，尾部没有或最多有一个下划线）命名实例属性，Python 会把属性名存入实例的 \\_\\_dict\\_\\_ 属性中，而且会在前面加\n上一个下划线和类名。因此，对 Dog 类来说，\\_\\_mood 会变成 \\_Dog\\_\\_mood；对 Beagle\n类来说，会变成 \\_Beagle\\_\\_mood。这个语言特性叫名称改写（name mangling）。\n\n_需要注意的是， 名称改写是一种安全措施，不能保证万无一失：它的目的是避免意外访问，不能防止故意做错事_\n\nPython 文档的某些角落把使用一个下划线前缀标记的属性称为“受保护的”属性。 使用self._x 这种形式保护属性的做法很常见，但是很少有人把这种属性叫作“受保护的”属性。有些人甚至将其称为“私有”属性。\n\n下面继续对 Vector2d 类进行改动。在最后一节中，我们将讨论一个特殊的属性（不是方法），它会影响对象的内部存储，对内存用量可能也有重大影响，不过对对象的公开接口没什么影响。这个属性是 \\_\\_slots\\_\\_\n\n#### 使用\\_\\_slots\\_\\_类属性节省空间\n默认情况下，Python 在各个实例中名为 \\_\\_dict\\_\\_ 的字典里存储实例属性。如 3.9.3 节所述，为了使用底层的散列表提升访问速度，字典会消耗大量内存。如果要处理数百万个属性不多的实例，通过 \\_\\_slots\\_\\_ 类属性，能节省大量内存，方法是让解释器在元组中存储实例属性，而不用字典。\n\n```python   \nclass Vector2d:\n    __slots__ = ('__x', '__y')\n    typecode = 'd'\n```\n\n在类中定义 \\_\\_slots\\_\\_ 属性的目的是告诉解释器：“这个类中的所有实例属性都在这儿了！”这样，Python 会在各个实例中使用类似元组的结构存储实例变量，从而避免使用消耗内存的 \\_\\_dict\\_\\_ 属性。如果有数百万个实例同时活动，这样做能节省大量内存。\n\n总之，如果使用得当，\\_\\_slots\\_\\_ 能显著节省内存，不过有几点要注意。每个子类都要定义 \\_\\_slots\\_\\_ 属性，因为解释器会忽略继承的 \\_\\_slots\\_\\_ 属性。实例只能拥有 \\_\\_slots\\_\\_ 中列出的属性，除非把 '\\_\\_dict\\_\\_' 加入 \\_\\_slots\\_\\_ （这样做就失去了节省内存的功效）。如果不把 '\\_\\_weakref\\_\\_' 加入 \\_\\_slots\\_\\_，实例就不能作为弱引用的目标。\n\n\n#### 覆盖类属性\nPython 有个很独特的特性：类属性可用于为实例属性提供默认值。\n\n类属性是公开的，因此会被子类继承，于是经常会创建一个子类，只用于定制类的数据属性。Django基于类的视图就大量使用了这个技术。\n\n#### 小结\n本章的目的是说明，如何使用特殊方法和约定的结构，定义行为良好且符合 Python 风格的类。   \n同时也提到了下面几种特殊方法的用法：\n\n- 所有用于获取字符串和字节序列表示形式的方法：\\_\\_repr\\_\\_、\\_\\_str\\_\\_、\\_\\_format\\_\\_ 和 \\_\\_bytes\\_\\_。\n- 把对象转换成数字的几个方法：\\_\\_abs\\_\\_、\\_\\_bool\\_\\_和 \\_\\_hash\\_\\_。\n- 用于测试字节序列转换和支持散列（连同 \\_\\_hash\\_\\_ 方法）的 \\_\\_eq\\_\\_ 运算符。\n\n提到了**格式规范微语言**\n\n提到了使用\\_\\_slots\\_\\_节省内存\n\n提到了使用继承的方式覆盖类属性的方法\n\n最后：\nTo build Pythonic objects, observe how real Python objects behave.\n                            — Ancient Chinese proverb（误）\n\n\n\n\n","source":"_posts/fluent-python-9.md","raw":"title: Fluent Python 第九章小结\ndate: 2018-04-26 10:04:24\ntags:\n- Python\n- 对象\n- pythonic\n- duck typing\n- fluent python\ncategories:\n- 读书笔记\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n## Fluent Python ##\n### Chapter 9. A Pythonic Object\n### 第九章: Pythonic 的对象\n\n得益于 Python 数据模型，自定义类型的行为可以像内置类型那样自然。实现如此自然的行为，靠的不是继承，而是鸭子类型（duck typing）：我们只需按照预定行为实现对象所需的方法即可。\n\n本章包含以下话题：  \n- 支持用于生成对象其他表示形式的内置函数（如 repr()、bytes()，等等）\n- 使用一个类方法实现备选构造方法\n- 扩展内置的 format() 函数和 str.format() 方法使用的格式微语言\n- 实现只读属性\n- 把对象变为可散列的，以便在集合中及作为 dict 的键使用\n- 利用 \\_\\_slots\\_\\_ 节省内存\n\n#### 对象表示形式\nPython 提供了两种方式获取对象的字符串表示形式。  \n\n- repr() 便于开发者理解的方式返回对象的字符串表示形式。\n- str() 便于用户理解的方式返回对象的字符串表示形式。\n\n为了给对象提供其他的表示形式，还会用到另外两个特殊方法：\\_\\_bytes\\_\\_ 和\\_\\_format\\_\\_。\\_\\_bytes\\_\\_ 方法与 \\_\\_str\\_\\_ 方法类似：bytes() 函数调用它获取对象的字节序列表示形式。而 \\_\\_format\\_\\_ 方法会被内置的 format() 函数和 str.format() 方法调用，使用特殊的格式代码显示对象的字符串表示形式.\n\n#### 构建一个向量类\n\n向量类的实现如下：\n\n```python  \nfrom array import array\nimport math\nclass Vector2d:\n    # typecode 是类属性，在 Vector2d 实例和字节序列之间转换时使用\n    typecode = 'd'\n    # 初始化向量\n    def __init__(self, x, y):\n        self.x = float(x)\n        self.y = float(y)\n    # 定义 __iter__ 方法，把 Vector2d 实例变成可迭代的对象，这样才能拆包（例如，x, y = my_vector）。这个方法的实现方式很简单，直接调用生成器表达式一个接一个产出分量。\n    def __iter__(self):\n        return (i for i in (self.x, self.y))\n    # __repr__ 方法使用 {!r} 获取各个分量的表示形式，然后插值，构成一个字符串；因为 Vector2d 实例是可迭代的对象，所以 *self 会把 x 和 y 分量提供给 format 函数。\n    def __repr__(self):\n        class_name = type(self).__name__\n        return '{}({!r}, {!r})'.format(class_name, *self)\n    def __str__(self):\n        return str(tuple(self))\n    # 为了生成字节序列，我们把 typecode 转换成字节序列，然后迭代 Vector2d 实例，得到一个数组，再把数组转换成字节序列。\n    def __bytes__(self):\n        return (bytes([ord(self.typecode)])+bytes(array(self.typecode, self)))\n    # 比较向量的值\n    def __eq__(self, other):\n        return tuple(self) == tuple(other)\n    # √x^2+y^2\n    def __abs__(self):\n        return math.hypot(self.x, self.y)\n    # 将模的值转化成布尔值\n    def __bool__(self):\n        return bool(abs(self))\n\n```\n\n#### 备选构造方法\n\n上一节的vector实例可以将vector转化成字节序列，同理我们也可以将字节序列转化成vector。\n\nvector2d_v1.py：\n\n```python   \nfrom vector2d_v0 import Vector2d as vec\n\nclass Vector2d(vec):\n    # 类方法\n    @classmethod\n    # 使用cls传入类本身\n    def frombytes(cls, octets):\n        typecode = chr(octets[0])\n        # 创建memoryview，使用typecode转换 \n        memv = memoryview(octets[1:]).cast(typecode)\n        # 拆包memoryview, 构造向量\n        return cls(*memv)\n```\n\n#### classmethod 和 staticmethod\npython 提供了两个装饰器来装饰类中定义的方法：classmethod 和 staticmethod\n\n- classmethod 用来定义操作类而不是操作实例的方法。classmethod 最常见的方式就是定义备用的构造方法。\n- staticmethod 用来定义与实例无关的一些操作，相当于定位在类中的普通函数\n\n#### 格式化显示\n内置的 format() 函数和 str.format() 方法把各个类型的格式化方式委托给相应的.\\_\\_format\\_\\_(format_spec) 方法。format_spec 是格式说明符，它是：format(my_obj, format_spec) 的第二个参数，或者str.format() 方法的格式字符串，{} 里代换字段中冒号后面的部分.\n\n```python   \n>>> brl = 1/2.43\n>>> brl\n0.4115226337448559\n>>> format(brl, '0.4f') #【1】\n'0.4115'\n>>> '1 BRL = {rate:0.2f} USD'.format(rate=brl) #【2】\n'1 BRL = 0.41 USD'\n\n```\n【1】中的'0.4f'是格式说明符\n【2】中格式说明符是'0.2f', 'rate'是字段名称，'{0.mass:5.3e}'这样的格式中， '0.mass'是字段名, '5.3e'是格式\n\n**格式规范微语言**: 格式说明符使用的表示法, 格式规范微语言是可扩展的，因为各个类可以自行决定如何解释 format_spec 参数。\n\n首先实现一个简单的格式化方法：\n\n```python    \ndef __format__(self, fmt_spec=''):\n    components = (format(c, fmt_spec) for c in self)\n    return '({}, {})'.format(*components)\n```\n\n这样可以实现如下效果：\n\n```python    \n>>> v1 = Vector2d(3, 4)\n>>> format(v1)\n'(3.0, 4.0)'\n>>> format(v1, '.2f')\n'(3.00, 4.00)'\n>>> format(v1, '.3e')\n'(3.000e+00, 4.000e+00)'\n```\n\n下面增加一个自定义的格式说明符p, 如果格式说明符以 'p' 结尾，那么在极坐标中显示向量，即 <r, θ>，其中 r 是模，θ是弧度\n\n下面是实现：\n\n```python    \ndef angle(self):\n    return math.atan2(self.y, self.x)\n\ndef __format__(self, fmt_spec=''):\n    if fmt_spec.endswith('p'):\n        fmt_spec = fmt_spec[:-1]\n        coords = (abs(self), self.angle())\n        outer_fmt = '<{}, {}>'\n    else:\n        coords = self \n        outer_fmt = '({}, {})'\n        components = (format(c, fmt_spec) for c in coords)\n    return outer_fmt.format(*components)\n```\n\n\n#### 可散列的(hashable)Vector2d\n代码见 vector2d_v3.py\n目前Vector2d是不可散列的， 因此不能放入集合中，为了使得Vector2d变成可散列的，需要实现\\_\\_hash\\_\\_，并且让Vector2d不可变\n\n首先需要让Vector2d不可变(使用@property装饰器装饰读值方法(getter)):\n\n```python   \ndef __init__(self, x, y):\n    self.__x = float(x)\n    self.__y = float(y)\n@property\ndef x(self):\n    return self.__x\n@property\ndef y(self):\n    return self.__y\n\n```\n\n这样x和y都是只读的了。接下来实现\\_\\_hash\\_\\_方法:\n```python     \ndef __hash__(self):\n    return hash(self.x) ^ hash(self.y)\n``` \n_注： 如果要实现一个可散列的类型，不一定要保护实例变量属性或者实现properties,只需要正确实现\\_\\_hash\\_\\_和\\_\\_eq\\_\\_即可，但是实例的hash值绝对不应该改变，所以这里会提到只读特性_\n\n#### Python中的私有属性和受保护的属性\n\n为了避免子类覆盖父类的私有属性，如果以 \\_\\_mood 的形式（两个前导下划线，尾部没有或最多有一个下划线）命名实例属性，Python 会把属性名存入实例的 \\_\\_dict\\_\\_ 属性中，而且会在前面加\n上一个下划线和类名。因此，对 Dog 类来说，\\_\\_mood 会变成 \\_Dog\\_\\_mood；对 Beagle\n类来说，会变成 \\_Beagle\\_\\_mood。这个语言特性叫名称改写（name mangling）。\n\n_需要注意的是， 名称改写是一种安全措施，不能保证万无一失：它的目的是避免意外访问，不能防止故意做错事_\n\nPython 文档的某些角落把使用一个下划线前缀标记的属性称为“受保护的”属性。 使用self._x 这种形式保护属性的做法很常见，但是很少有人把这种属性叫作“受保护的”属性。有些人甚至将其称为“私有”属性。\n\n下面继续对 Vector2d 类进行改动。在最后一节中，我们将讨论一个特殊的属性（不是方法），它会影响对象的内部存储，对内存用量可能也有重大影响，不过对对象的公开接口没什么影响。这个属性是 \\_\\_slots\\_\\_\n\n#### 使用\\_\\_slots\\_\\_类属性节省空间\n默认情况下，Python 在各个实例中名为 \\_\\_dict\\_\\_ 的字典里存储实例属性。如 3.9.3 节所述，为了使用底层的散列表提升访问速度，字典会消耗大量内存。如果要处理数百万个属性不多的实例，通过 \\_\\_slots\\_\\_ 类属性，能节省大量内存，方法是让解释器在元组中存储实例属性，而不用字典。\n\n```python   \nclass Vector2d:\n    __slots__ = ('__x', '__y')\n    typecode = 'd'\n```\n\n在类中定义 \\_\\_slots\\_\\_ 属性的目的是告诉解释器：“这个类中的所有实例属性都在这儿了！”这样，Python 会在各个实例中使用类似元组的结构存储实例变量，从而避免使用消耗内存的 \\_\\_dict\\_\\_ 属性。如果有数百万个实例同时活动，这样做能节省大量内存。\n\n总之，如果使用得当，\\_\\_slots\\_\\_ 能显著节省内存，不过有几点要注意。每个子类都要定义 \\_\\_slots\\_\\_ 属性，因为解释器会忽略继承的 \\_\\_slots\\_\\_ 属性。实例只能拥有 \\_\\_slots\\_\\_ 中列出的属性，除非把 '\\_\\_dict\\_\\_' 加入 \\_\\_slots\\_\\_ （这样做就失去了节省内存的功效）。如果不把 '\\_\\_weakref\\_\\_' 加入 \\_\\_slots\\_\\_，实例就不能作为弱引用的目标。\n\n\n#### 覆盖类属性\nPython 有个很独特的特性：类属性可用于为实例属性提供默认值。\n\n类属性是公开的，因此会被子类继承，于是经常会创建一个子类，只用于定制类的数据属性。Django基于类的视图就大量使用了这个技术。\n\n#### 小结\n本章的目的是说明，如何使用特殊方法和约定的结构，定义行为良好且符合 Python 风格的类。   \n同时也提到了下面几种特殊方法的用法：\n\n- 所有用于获取字符串和字节序列表示形式的方法：\\_\\_repr\\_\\_、\\_\\_str\\_\\_、\\_\\_format\\_\\_ 和 \\_\\_bytes\\_\\_。\n- 把对象转换成数字的几个方法：\\_\\_abs\\_\\_、\\_\\_bool\\_\\_和 \\_\\_hash\\_\\_。\n- 用于测试字节序列转换和支持散列（连同 \\_\\_hash\\_\\_ 方法）的 \\_\\_eq\\_\\_ 运算符。\n\n提到了**格式规范微语言**\n\n提到了使用\\_\\_slots\\_\\_节省内存\n\n提到了使用继承的方式覆盖类属性的方法\n\n最后：\nTo build Pythonic objects, observe how real Python objects behave.\n                            — Ancient Chinese proverb（误）\n\n\n\n\n","slug":"fluent-python-9","published":1,"updated":"2019-04-25T01:27:25.881Z","comments":1,"layout":"post","link":"","_id":"cjuw5c6gj003kdhyfu5efkt5f","content":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-9-A-Pythonic-Object\"><a href=\"#Chapter-9-A-Pythonic-Object\" class=\"headerlink\" title=\"Chapter 9. A Pythonic Object\"></a>Chapter 9. A Pythonic Object</h3><h3 id=\"第九章-Pythonic-的对象\"><a href=\"#第九章-Pythonic-的对象\" class=\"headerlink\" title=\"第九章: Pythonic 的对象\"></a>第九章: Pythonic 的对象</h3><p>得益于 Python 数据模型，自定义类型的行为可以像内置类型那样自然。实现如此自然的行为，靠的不是继承，而是鸭子类型（duck typing）：我们只需按照预定行为实现对象所需的方法即可。</p>\n<p>本章包含以下话题：  </p>\n<ul>\n<li>支持用于生成对象其他表示形式的内置函数（如 repr()、bytes()，等等）</li>\n<li>使用一个类方法实现备选构造方法</li>\n<li>扩展内置的 format() 函数和 str.format() 方法使用的格式微语言</li>\n<li>实现只读属性</li>\n<li>把对象变为可散列的，以便在集合中及作为 dict 的键使用</li>\n<li>利用 __slots__ 节省内存</li>\n</ul>\n<h4 id=\"对象表示形式\"><a href=\"#对象表示形式\" class=\"headerlink\" title=\"对象表示形式\"></a>对象表示形式</h4><p>Python 提供了两种方式获取对象的字符串表示形式。  </p>\n<ul>\n<li>repr() 便于开发者理解的方式返回对象的字符串表示形式。</li>\n<li>str() 便于用户理解的方式返回对象的字符串表示形式。</li>\n</ul>\n<p>为了给对象提供其他的表示形式，还会用到另外两个特殊方法：__bytes__ 和__format__。__bytes__ 方法与 __str__ 方法类似：bytes() 函数调用它获取对象的字节序列表示形式。而 __format__ 方法会被内置的 format() 函数和 str.format() 方法调用，使用特殊的格式代码显示对象的字符串表示形式.</p>\n<h4 id=\"构建一个向量类\"><a href=\"#构建一个向量类\" class=\"headerlink\" title=\"构建一个向量类\"></a>构建一个向量类</h4><p>向量类的实现如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> array <span class=\"keyword\">import</span> array</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector2d</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># typecode 是类属性，在 Vector2d 实例和字节序列之间转换时使用</span></span><br><span class=\"line\">    typecode = <span class=\"string\">'d'</span></span><br><span class=\"line\">    <span class=\"comment\"># 初始化向量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, x, y)</span>:</span></span><br><span class=\"line\">        self.x = float(x)</span><br><span class=\"line\">        self.y = float(y)</span><br><span class=\"line\">    <span class=\"comment\"># 定义 __iter__ 方法，把 Vector2d 实例变成可迭代的对象，这样才能拆包（例如，x, y = my_vector）。这个方法的实现方式很简单，直接调用生成器表达式一个接一个产出分量。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> (self.x, self.y))</span><br><span class=\"line\">    <span class=\"comment\"># __repr__ 方法使用 &#123;!r&#125; 获取各个分量的表示形式，然后插值，构成一个字符串；因为 Vector2d 实例是可迭代的对象，所以 *self 会把 x 和 y 分量提供给 format 函数。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        class_name = type(self).__name__</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&#123;&#125;(&#123;!r&#125;, &#123;!r&#125;)'</span>.format(class_name, *self)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> str(tuple(self))</span><br><span class=\"line\">    <span class=\"comment\"># 为了生成字节序列，我们把 typecode 转换成字节序列，然后迭代 Vector2d 实例，得到一个数组，再把数组转换成字节序列。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__bytes__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (bytes([ord(self.typecode)])+bytes(array(self.typecode, self)))</span><br><span class=\"line\">    <span class=\"comment\"># 比较向量的值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__eq__</span><span class=\"params\">(self, other)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> tuple(self) == tuple(other)</span><br><span class=\"line\">    <span class=\"comment\"># √x^2+y^2</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__abs__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> math.hypot(self.x, self.y)</span><br><span class=\"line\">    <span class=\"comment\"># 将模的值转化成布尔值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__bool__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> bool(abs(self))</span><br></pre></td></tr></table></figure>\n<h4 id=\"备选构造方法\"><a href=\"#备选构造方法\" class=\"headerlink\" title=\"备选构造方法\"></a>备选构造方法</h4><p>上一节的vector实例可以将vector转化成字节序列，同理我们也可以将字节序列转化成vector。</p>\n<p>vector2d_v1.py：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> vector2d_v0 <span class=\"keyword\">import</span> Vector2d <span class=\"keyword\">as</span> vec</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector2d</span><span class=\"params\">(vec)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 类方法</span></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"comment\"># 使用cls传入类本身</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">frombytes</span><span class=\"params\">(cls, octets)</span>:</span></span><br><span class=\"line\">        typecode = chr(octets[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"comment\"># 创建memoryview，使用typecode转换 </span></span><br><span class=\"line\">        memv = memoryview(octets[<span class=\"number\">1</span>:]).cast(typecode)</span><br><span class=\"line\">        <span class=\"comment\"># 拆包memoryview, 构造向量</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls(*memv)</span><br></pre></td></tr></table></figure>\n<h4 id=\"classmethod-和-staticmethod\"><a href=\"#classmethod-和-staticmethod\" class=\"headerlink\" title=\"classmethod 和 staticmethod\"></a>classmethod 和 staticmethod</h4><p>python 提供了两个装饰器来装饰类中定义的方法：classmethod 和 staticmethod</p>\n<ul>\n<li>classmethod 用来定义操作类而不是操作实例的方法。classmethod 最常见的方式就是定义备用的构造方法。</li>\n<li>staticmethod 用来定义与实例无关的一些操作，相当于定位在类中的普通函数</li>\n</ul>\n<h4 id=\"格式化显示\"><a href=\"#格式化显示\" class=\"headerlink\" title=\"格式化显示\"></a>格式化显示</h4><p>内置的 format() 函数和 str.format() 方法把各个类型的格式化方式委托给相应的.__format__(format_spec) 方法。format_spec 是格式说明符，它是：format(my_obj, format_spec) 的第二个参数，或者str.format() 方法的格式字符串，{} 里代换字段中冒号后面的部分.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>brl = <span class=\"number\">1</span>/<span class=\"number\">2.43</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>brl</span><br><span class=\"line\"><span class=\"number\">0.4115226337448559</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>format(brl, <span class=\"string\">'0.4f'</span>) <span class=\"comment\">#【1】</span></span><br><span class=\"line\"><span class=\"string\">'0.4115'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'1 BRL = &#123;rate:0.2f&#125; USD'</span>.format(rate=brl) <span class=\"comment\">#【2】</span></span><br><span class=\"line\"><span class=\"string\">'1 BRL = 0.41 USD'</span></span><br></pre></td></tr></table></figure>\n<p>【1】中的’0.4f’是格式说明符<br>【2】中格式说明符是’0.2f’, ‘rate’是字段名称，’{0.mass:5.3e}’这样的格式中， ‘0.mass’是字段名, ‘5.3e’是格式</p>\n<p><strong>格式规范微语言</strong>: 格式说明符使用的表示法, 格式规范微语言是可扩展的，因为各个类可以自行决定如何解释 format_spec 参数。</p>\n<p>首先实现一个简单的格式化方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__format__</span><span class=\"params\">(self, fmt_spec=<span class=\"string\">''</span>)</span>:</span></span><br><span class=\"line\">    components = (format(c, fmt_spec) <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> self)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'(&#123;&#125;, &#123;&#125;)'</span>.format(*components)</span><br></pre></td></tr></table></figure>\n<p>这样可以实现如下效果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v1 = Vector2d(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>format(v1)</span><br><span class=\"line\"><span class=\"string\">'(3.0, 4.0)'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>format(v1, <span class=\"string\">'.2f'</span>)</span><br><span class=\"line\"><span class=\"string\">'(3.00, 4.00)'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>format(v1, <span class=\"string\">'.3e'</span>)</span><br><span class=\"line\"><span class=\"string\">'(3.000e+00, 4.000e+00)'</span></span><br></pre></td></tr></table></figure>\n<p>下面增加一个自定义的格式说明符p, 如果格式说明符以 ‘p’ 结尾，那么在极坐标中显示向量，即 &lt;r, θ&gt;，其中 r 是模，θ是弧度</p>\n<p>下面是实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">angle</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.atan2(self.y, self.x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__format__</span><span class=\"params\">(self, fmt_spec=<span class=\"string\">''</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> fmt_spec.endswith(<span class=\"string\">'p'</span>):</span><br><span class=\"line\">        fmt_spec = fmt_spec[:<span class=\"number\">-1</span>]</span><br><span class=\"line\">        coords = (abs(self), self.angle())</span><br><span class=\"line\">        outer_fmt = <span class=\"string\">'&lt;&#123;&#125;, &#123;&#125;&gt;'</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        coords = self </span><br><span class=\"line\">        outer_fmt = <span class=\"string\">'(&#123;&#125;, &#123;&#125;)'</span></span><br><span class=\"line\">        components = (format(c, fmt_spec) <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> coords)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> outer_fmt.format(*components)</span><br></pre></td></tr></table></figure>\n<h4 id=\"可散列的-hashable-Vector2d\"><a href=\"#可散列的-hashable-Vector2d\" class=\"headerlink\" title=\"可散列的(hashable)Vector2d\"></a>可散列的(hashable)Vector2d</h4><p>代码见 vector2d_v3.py<br>目前Vector2d是不可散列的， 因此不能放入集合中，为了使得Vector2d变成可散列的，需要实现__hash__，并且让Vector2d不可变</p>\n<p>首先需要让Vector2d不可变(使用@property装饰器装饰读值方法(getter)):</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, x, y)</span>:</span></span><br><span class=\"line\">    self.__x = float(x)</span><br><span class=\"line\">    self.__y = float(y)</span><br><span class=\"line\"><span class=\"meta\">@property</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">x</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.__x</span><br><span class=\"line\"><span class=\"meta\">@property</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">y</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.__y</span><br></pre></td></tr></table></figure>\n<p>这样x和y都是只读的了。接下来实现__hash__方法:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__hash__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hash(self.x) ^ hash(self.y)</span><br><span class=\"line\">``` </span><br><span class=\"line\">_注： 如果要实现一个可散列的类型，不一定要保护实例变量属性或者实现properties,只需要正确实现\\_\\_hash\\_\\_和\\_\\_eq\\_\\_即可，但是实例的hash值绝对不应该改变，所以这里会提到只读特性_</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#### Python中的私有属性和受保护的属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">为了避免子类覆盖父类的私有属性，如果以 \\_\\_mood 的形式（两个前导下划线，尾部没有或最多有一个下划线）命名实例属性，Python 会把属性名存入实例的 \\_\\_dict\\_\\_ 属性中，而且会在前面加</span><br><span class=\"line\">上一个下划线和类名。因此，对 Dog 类来说，\\_\\_mood 会变成 \\_Dog\\_\\_mood；对 Beagle</span><br><span class=\"line\">类来说，会变成 \\_Beagle\\_\\_mood。这个语言特性叫名称改写（name mangling）。</span><br><span class=\"line\"></span><br><span class=\"line\">_需要注意的是， 名称改写是一种安全措施，不能保证万无一失：它的目的是避免意外访问，不能防止故意做错事_</span><br><span class=\"line\"></span><br><span class=\"line\">Python 文档的某些角落把使用一个下划线前缀标记的属性称为“受保护的”属性。 使用self._x 这种形式保护属性的做法很常见，但是很少有人把这种属性叫作“受保护的”属性。有些人甚至将其称为“私有”属性。</span><br><span class=\"line\"></span><br><span class=\"line\">下面继续对 Vector2d 类进行改动。在最后一节中，我们将讨论一个特殊的属性（不是方法），它会影响对象的内部存储，对内存用量可能也有重大影响，不过对对象的公开接口没什么影响。这个属性是 \\_\\_slots\\_\\_</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#### 使用\\_\\_slots\\_\\_类属性节省空间</span></span><br><span class=\"line\">默认情况下，Python 在各个实例中名为 \\_\\_dict\\_\\_ 的字典里存储实例属性。如 <span class=\"number\">3.9</span><span class=\"number\">.3</span> 节所述，为了使用底层的散列表提升访问速度，字典会消耗大量内存。如果要处理数百万个属性不多的实例，通过 \\_\\_slots\\_\\_ 类属性，能节省大量内存，方法是让解释器在元组中存储实例属性，而不用字典。</span><br><span class=\"line\"></span><br><span class=\"line\">```python   </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector2d</span>:</span></span><br><span class=\"line\">    __slots__ = (<span class=\"string\">'__x'</span>, <span class=\"string\">'__y'</span>)</span><br><span class=\"line\">    typecode = <span class=\"string\">'d'</span></span><br></pre></td></tr></table></figure></p>\n<p>在类中定义 __slots__ 属性的目的是告诉解释器：“这个类中的所有实例属性都在这儿了！”这样，Python 会在各个实例中使用类似元组的结构存储实例变量，从而避免使用消耗内存的 __dict__ 属性。如果有数百万个实例同时活动，这样做能节省大量内存。</p>\n<p>总之，如果使用得当，__slots__ 能显著节省内存，不过有几点要注意。每个子类都要定义 __slots__ 属性，因为解释器会忽略继承的 __slots__ 属性。实例只能拥有 __slots__ 中列出的属性，除非把 ‘__dict__‘ 加入 __slots__ （这样做就失去了节省内存的功效）。如果不把 ‘__weakref__‘ 加入 __slots__，实例就不能作为弱引用的目标。</p>\n<h4 id=\"覆盖类属性\"><a href=\"#覆盖类属性\" class=\"headerlink\" title=\"覆盖类属性\"></a>覆盖类属性</h4><p>Python 有个很独特的特性：类属性可用于为实例属性提供默认值。</p>\n<p>类属性是公开的，因此会被子类继承，于是经常会创建一个子类，只用于定制类的数据属性。Django基于类的视图就大量使用了这个技术。</p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>本章的目的是说明，如何使用特殊方法和约定的结构，定义行为良好且符合 Python 风格的类。<br>同时也提到了下面几种特殊方法的用法：</p>\n<ul>\n<li>所有用于获取字符串和字节序列表示形式的方法：__repr__、__str__、__format__ 和 __bytes__。</li>\n<li>把对象转换成数字的几个方法：__abs__、__bool__和 __hash__。</li>\n<li>用于测试字节序列转换和支持散列（连同 __hash__ 方法）的 __eq__ 运算符。</li>\n</ul>\n<p>提到了<strong>格式规范微语言</strong></p>\n<p>提到了使用__slots__节省内存</p>\n<p>提到了使用继承的方式覆盖类属性的方法</p>\n<p>最后：<br>To build Pythonic objects, observe how real Python objects behave.<br>                            — Ancient Chinese proverb（误）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-9-A-Pythonic-Object\"><a href=\"#Chapter-9-A-Pythonic-Object\" class=\"headerlink\" title=\"Chapter 9. A Pythonic Object\"></a>Chapter 9. A Pythonic Object</h3><h3 id=\"第九章-Pythonic-的对象\"><a href=\"#第九章-Pythonic-的对象\" class=\"headerlink\" title=\"第九章: Pythonic 的对象\"></a>第九章: Pythonic 的对象</h3><p>得益于 Python 数据模型，自定义类型的行为可以像内置类型那样自然。实现如此自然的行为，靠的不是继承，而是鸭子类型（duck typing）：我们只需按照预定行为实现对象所需的方法即可。</p>\n<p>本章包含以下话题：  </p>\n<ul>\n<li>支持用于生成对象其他表示形式的内置函数（如 repr()、bytes()，等等）</li>\n<li>使用一个类方法实现备选构造方法</li>\n<li>扩展内置的 format() 函数和 str.format() 方法使用的格式微语言</li>\n<li>实现只读属性</li>\n<li>把对象变为可散列的，以便在集合中及作为 dict 的键使用</li>\n<li>利用 __slots__ 节省内存</li>\n</ul>\n<h4 id=\"对象表示形式\"><a href=\"#对象表示形式\" class=\"headerlink\" title=\"对象表示形式\"></a>对象表示形式</h4><p>Python 提供了两种方式获取对象的字符串表示形式。  </p>\n<ul>\n<li>repr() 便于开发者理解的方式返回对象的字符串表示形式。</li>\n<li>str() 便于用户理解的方式返回对象的字符串表示形式。</li>\n</ul>\n<p>为了给对象提供其他的表示形式，还会用到另外两个特殊方法：__bytes__ 和__format__。__bytes__ 方法与 __str__ 方法类似：bytes() 函数调用它获取对象的字节序列表示形式。而 __format__ 方法会被内置的 format() 函数和 str.format() 方法调用，使用特殊的格式代码显示对象的字符串表示形式.</p>\n<h4 id=\"构建一个向量类\"><a href=\"#构建一个向量类\" class=\"headerlink\" title=\"构建一个向量类\"></a>构建一个向量类</h4><p>向量类的实现如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> array <span class=\"keyword\">import</span> array</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector2d</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># typecode 是类属性，在 Vector2d 实例和字节序列之间转换时使用</span></span><br><span class=\"line\">    typecode = <span class=\"string\">'d'</span></span><br><span class=\"line\">    <span class=\"comment\"># 初始化向量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, x, y)</span>:</span></span><br><span class=\"line\">        self.x = float(x)</span><br><span class=\"line\">        self.y = float(y)</span><br><span class=\"line\">    <span class=\"comment\"># 定义 __iter__ 方法，把 Vector2d 实例变成可迭代的对象，这样才能拆包（例如，x, y = my_vector）。这个方法的实现方式很简单，直接调用生成器表达式一个接一个产出分量。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> (self.x, self.y))</span><br><span class=\"line\">    <span class=\"comment\"># __repr__ 方法使用 &#123;!r&#125; 获取各个分量的表示形式，然后插值，构成一个字符串；因为 Vector2d 实例是可迭代的对象，所以 *self 会把 x 和 y 分量提供给 format 函数。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        class_name = type(self).__name__</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&#123;&#125;(&#123;!r&#125;, &#123;!r&#125;)'</span>.format(class_name, *self)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> str(tuple(self))</span><br><span class=\"line\">    <span class=\"comment\"># 为了生成字节序列，我们把 typecode 转换成字节序列，然后迭代 Vector2d 实例，得到一个数组，再把数组转换成字节序列。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__bytes__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (bytes([ord(self.typecode)])+bytes(array(self.typecode, self)))</span><br><span class=\"line\">    <span class=\"comment\"># 比较向量的值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__eq__</span><span class=\"params\">(self, other)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> tuple(self) == tuple(other)</span><br><span class=\"line\">    <span class=\"comment\"># √x^2+y^2</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__abs__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> math.hypot(self.x, self.y)</span><br><span class=\"line\">    <span class=\"comment\"># 将模的值转化成布尔值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__bool__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> bool(abs(self))</span><br></pre></td></tr></table></figure>\n<h4 id=\"备选构造方法\"><a href=\"#备选构造方法\" class=\"headerlink\" title=\"备选构造方法\"></a>备选构造方法</h4><p>上一节的vector实例可以将vector转化成字节序列，同理我们也可以将字节序列转化成vector。</p>\n<p>vector2d_v1.py：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> vector2d_v0 <span class=\"keyword\">import</span> Vector2d <span class=\"keyword\">as</span> vec</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector2d</span><span class=\"params\">(vec)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 类方法</span></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"comment\"># 使用cls传入类本身</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">frombytes</span><span class=\"params\">(cls, octets)</span>:</span></span><br><span class=\"line\">        typecode = chr(octets[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"comment\"># 创建memoryview，使用typecode转换 </span></span><br><span class=\"line\">        memv = memoryview(octets[<span class=\"number\">1</span>:]).cast(typecode)</span><br><span class=\"line\">        <span class=\"comment\"># 拆包memoryview, 构造向量</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls(*memv)</span><br></pre></td></tr></table></figure>\n<h4 id=\"classmethod-和-staticmethod\"><a href=\"#classmethod-和-staticmethod\" class=\"headerlink\" title=\"classmethod 和 staticmethod\"></a>classmethod 和 staticmethod</h4><p>python 提供了两个装饰器来装饰类中定义的方法：classmethod 和 staticmethod</p>\n<ul>\n<li>classmethod 用来定义操作类而不是操作实例的方法。classmethod 最常见的方式就是定义备用的构造方法。</li>\n<li>staticmethod 用来定义与实例无关的一些操作，相当于定位在类中的普通函数</li>\n</ul>\n<h4 id=\"格式化显示\"><a href=\"#格式化显示\" class=\"headerlink\" title=\"格式化显示\"></a>格式化显示</h4><p>内置的 format() 函数和 str.format() 方法把各个类型的格式化方式委托给相应的.__format__(format_spec) 方法。format_spec 是格式说明符，它是：format(my_obj, format_spec) 的第二个参数，或者str.format() 方法的格式字符串，{} 里代换字段中冒号后面的部分.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>brl = <span class=\"number\">1</span>/<span class=\"number\">2.43</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>brl</span><br><span class=\"line\"><span class=\"number\">0.4115226337448559</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>format(brl, <span class=\"string\">'0.4f'</span>) <span class=\"comment\">#【1】</span></span><br><span class=\"line\"><span class=\"string\">'0.4115'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'1 BRL = &#123;rate:0.2f&#125; USD'</span>.format(rate=brl) <span class=\"comment\">#【2】</span></span><br><span class=\"line\"><span class=\"string\">'1 BRL = 0.41 USD'</span></span><br></pre></td></tr></table></figure>\n<p>【1】中的’0.4f’是格式说明符<br>【2】中格式说明符是’0.2f’, ‘rate’是字段名称，’{0.mass:5.3e}’这样的格式中， ‘0.mass’是字段名, ‘5.3e’是格式</p>\n<p><strong>格式规范微语言</strong>: 格式说明符使用的表示法, 格式规范微语言是可扩展的，因为各个类可以自行决定如何解释 format_spec 参数。</p>\n<p>首先实现一个简单的格式化方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__format__</span><span class=\"params\">(self, fmt_spec=<span class=\"string\">''</span>)</span>:</span></span><br><span class=\"line\">    components = (format(c, fmt_spec) <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> self)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'(&#123;&#125;, &#123;&#125;)'</span>.format(*components)</span><br></pre></td></tr></table></figure>\n<p>这样可以实现如下效果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v1 = Vector2d(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>format(v1)</span><br><span class=\"line\"><span class=\"string\">'(3.0, 4.0)'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>format(v1, <span class=\"string\">'.2f'</span>)</span><br><span class=\"line\"><span class=\"string\">'(3.00, 4.00)'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>format(v1, <span class=\"string\">'.3e'</span>)</span><br><span class=\"line\"><span class=\"string\">'(3.000e+00, 4.000e+00)'</span></span><br></pre></td></tr></table></figure>\n<p>下面增加一个自定义的格式说明符p, 如果格式说明符以 ‘p’ 结尾，那么在极坐标中显示向量，即 &lt;r, θ&gt;，其中 r 是模，θ是弧度</p>\n<p>下面是实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">angle</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.atan2(self.y, self.x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__format__</span><span class=\"params\">(self, fmt_spec=<span class=\"string\">''</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> fmt_spec.endswith(<span class=\"string\">'p'</span>):</span><br><span class=\"line\">        fmt_spec = fmt_spec[:<span class=\"number\">-1</span>]</span><br><span class=\"line\">        coords = (abs(self), self.angle())</span><br><span class=\"line\">        outer_fmt = <span class=\"string\">'&lt;&#123;&#125;, &#123;&#125;&gt;'</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        coords = self </span><br><span class=\"line\">        outer_fmt = <span class=\"string\">'(&#123;&#125;, &#123;&#125;)'</span></span><br><span class=\"line\">        components = (format(c, fmt_spec) <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> coords)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> outer_fmt.format(*components)</span><br></pre></td></tr></table></figure>\n<h4 id=\"可散列的-hashable-Vector2d\"><a href=\"#可散列的-hashable-Vector2d\" class=\"headerlink\" title=\"可散列的(hashable)Vector2d\"></a>可散列的(hashable)Vector2d</h4><p>代码见 vector2d_v3.py<br>目前Vector2d是不可散列的， 因此不能放入集合中，为了使得Vector2d变成可散列的，需要实现__hash__，并且让Vector2d不可变</p>\n<p>首先需要让Vector2d不可变(使用@property装饰器装饰读值方法(getter)):</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, x, y)</span>:</span></span><br><span class=\"line\">    self.__x = float(x)</span><br><span class=\"line\">    self.__y = float(y)</span><br><span class=\"line\"><span class=\"meta\">@property</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">x</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.__x</span><br><span class=\"line\"><span class=\"meta\">@property</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">y</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.__y</span><br></pre></td></tr></table></figure>\n<p>这样x和y都是只读的了。接下来实现__hash__方法:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__hash__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hash(self.x) ^ hash(self.y)</span><br><span class=\"line\">``` </span><br><span class=\"line\">_注： 如果要实现一个可散列的类型，不一定要保护实例变量属性或者实现properties,只需要正确实现\\_\\_hash\\_\\_和\\_\\_eq\\_\\_即可，但是实例的hash值绝对不应该改变，所以这里会提到只读特性_</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#### Python中的私有属性和受保护的属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">为了避免子类覆盖父类的私有属性，如果以 \\_\\_mood 的形式（两个前导下划线，尾部没有或最多有一个下划线）命名实例属性，Python 会把属性名存入实例的 \\_\\_dict\\_\\_ 属性中，而且会在前面加</span><br><span class=\"line\">上一个下划线和类名。因此，对 Dog 类来说，\\_\\_mood 会变成 \\_Dog\\_\\_mood；对 Beagle</span><br><span class=\"line\">类来说，会变成 \\_Beagle\\_\\_mood。这个语言特性叫名称改写（name mangling）。</span><br><span class=\"line\"></span><br><span class=\"line\">_需要注意的是， 名称改写是一种安全措施，不能保证万无一失：它的目的是避免意外访问，不能防止故意做错事_</span><br><span class=\"line\"></span><br><span class=\"line\">Python 文档的某些角落把使用一个下划线前缀标记的属性称为“受保护的”属性。 使用self._x 这种形式保护属性的做法很常见，但是很少有人把这种属性叫作“受保护的”属性。有些人甚至将其称为“私有”属性。</span><br><span class=\"line\"></span><br><span class=\"line\">下面继续对 Vector2d 类进行改动。在最后一节中，我们将讨论一个特殊的属性（不是方法），它会影响对象的内部存储，对内存用量可能也有重大影响，不过对对象的公开接口没什么影响。这个属性是 \\_\\_slots\\_\\_</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#### 使用\\_\\_slots\\_\\_类属性节省空间</span></span><br><span class=\"line\">默认情况下，Python 在各个实例中名为 \\_\\_dict\\_\\_ 的字典里存储实例属性。如 <span class=\"number\">3.9</span><span class=\"number\">.3</span> 节所述，为了使用底层的散列表提升访问速度，字典会消耗大量内存。如果要处理数百万个属性不多的实例，通过 \\_\\_slots\\_\\_ 类属性，能节省大量内存，方法是让解释器在元组中存储实例属性，而不用字典。</span><br><span class=\"line\"></span><br><span class=\"line\">```python   </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector2d</span>:</span></span><br><span class=\"line\">    __slots__ = (<span class=\"string\">'__x'</span>, <span class=\"string\">'__y'</span>)</span><br><span class=\"line\">    typecode = <span class=\"string\">'d'</span></span><br></pre></td></tr></table></figure></p>\n<p>在类中定义 __slots__ 属性的目的是告诉解释器：“这个类中的所有实例属性都在这儿了！”这样，Python 会在各个实例中使用类似元组的结构存储实例变量，从而避免使用消耗内存的 __dict__ 属性。如果有数百万个实例同时活动，这样做能节省大量内存。</p>\n<p>总之，如果使用得当，__slots__ 能显著节省内存，不过有几点要注意。每个子类都要定义 __slots__ 属性，因为解释器会忽略继承的 __slots__ 属性。实例只能拥有 __slots__ 中列出的属性，除非把 ‘__dict__‘ 加入 __slots__ （这样做就失去了节省内存的功效）。如果不把 ‘__weakref__‘ 加入 __slots__，实例就不能作为弱引用的目标。</p>\n<h4 id=\"覆盖类属性\"><a href=\"#覆盖类属性\" class=\"headerlink\" title=\"覆盖类属性\"></a>覆盖类属性</h4><p>Python 有个很独特的特性：类属性可用于为实例属性提供默认值。</p>\n<p>类属性是公开的，因此会被子类继承，于是经常会创建一个子类，只用于定制类的数据属性。Django基于类的视图就大量使用了这个技术。</p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>本章的目的是说明，如何使用特殊方法和约定的结构，定义行为良好且符合 Python 风格的类。<br>同时也提到了下面几种特殊方法的用法：</p>\n<ul>\n<li>所有用于获取字符串和字节序列表示形式的方法：__repr__、__str__、__format__ 和 __bytes__。</li>\n<li>把对象转换成数字的几个方法：__abs__、__bool__和 __hash__。</li>\n<li>用于测试字节序列转换和支持散列（连同 __hash__ 方法）的 __eq__ 运算符。</li>\n</ul>\n<p>提到了<strong>格式规范微语言</strong></p>\n<p>提到了使用__slots__节省内存</p>\n<p>提到了使用继承的方式覆盖类属性的方法</p>\n<p>最后：<br>To build Pythonic objects, observe how real Python objects behave.<br>                            — Ancient Chinese proverb（误）</p>\n"},{"title":"Fluent Python第六章:使用一等函数实现设计模式(1) —— 策略模式","date":"2017-12-17T13:27:33.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true"],"toc":true,"comment":true,"_content":"\n\n## Fluent Python ##\n### Chapter 6. Design Patterns with First-Class Functions ###\n### 第六章. 使用一等函数实现设计模式(1) —— 策略模式\n这一章中会讲到设计模式的定义和适用场景，以及利用Python的一等函数特性对设计模式的实现。\n\n这篇博文中先讨论策略模式。\n#### 策略模式\n合理利用作为一等函数的对象可以简化某些设计模式。\n##### 经典的策略模式\n《设计模式：可复用面向对象软件的基础》一书是这样概述“策略”模式的：\n\n> 定义一系列算法，把它们一一封装起来，并且使它们可以相互替换。本模式使得算法可以独立于使用它的客户而变化。\n\n\n![1](https://github.com/aldslvda/blog-images/blob/master/fluent-python-6.1.png?raw=true)\n\n策略模式的一个经典的场景是商店的折扣策略，上图是这个场景的UML类图。具体场景如下:\n\n> 假如一个网店制定了下述折扣规则:   \n> 1. 有 1000 或以上积分的顾客，每个订单享 5% 折扣。   \n> 2. 同一订单中，单个商品的数量达到 20 个或以上，享 10% 折扣。  \n> 3. 订单中的不同商品达到 10 个或以上，享 7% 折扣。   \n> 简单起见，我们假定一个订单一次只能享用一个折扣。  \n\n上面的UML图中:\n\n- 上下文: 把一些计算委托给实现不同算法的可互换组件，提供服务。在这个电商示例中，上下文是 Order，它会根据不同的算法计算促销折扣。   \n- 策略:实现不同算法的组件共同的接口。在这个示例中，名为 Promotion 的抽象类扮演这个角色。    \n- 具体策略: \"策略\"的子类，fidelityPromo、BulkPromo 和LargeOrderPromo 是这里实现的三个具体策略。\n\n上面的UML类图中，每个具体策略都是一个类，而且都只定义了一个方法，即 discount。此\n外，策略实例没有状态（没有实例属性）。下面是使用Python对这个策略的重构，包括把具体策略用函数实现(而不是类)，取消了Promotion抽象类。\n[示例6.1](https://github.com/aldslvda/readings/blob/master/Fluent-Python/6.%20Design%20Patterns%20with%20First-Class%20Functions/order6.1.py)\n\n```python    \n#coding=utf8\nfrom abc import ABC, abstractmethod\nfrom collections import namedtuple\nCustomer = namedtuple('Customer', 'name fidelity')\nclass LineItem:\n    def __init__(self, product, quantity, price):\n        self.product = product\n        self.quantity = quantity\n        self.price = price\n    def total(self):\n        return self.price * self.quantity\nclass Order: # 上下文\n    def __init__(self, customer, cart, promotion=None):\n        self.customer = customer\n        self.cart = list(cart)\n        self.promotion = promotion\n    def total(self):\n        if not hasattr(self, '__total'):\n            self.__total = sum(item.total() for item in self.cart)\n        return self.__total\n    def due(self):\n        if self.promotion is None:\n            discount = 0\n        else:\n            discount = self.promotion.discount(self)\n        return self.total() - discount\n    def __repr__(self):\n        fmt = '<Order total: {:.2f} due: {:.2f}>'\n        return fmt.format(self.total(), self.due())\nclass Promotion(ABC) : # 策略：抽象基类\n    @abstractmethod\n    def discount(self, order):\n    \"\"\"返回折扣金额（正值）\"\"\"\n    \nclass FidelityPromo(Promotion): # 第一个具体策略\n    \"\"\"为积分为1000或以上的顾客提供5%折扣\"\"\"\n    def discount(self, order):\n        return order.total() * .05 if order.customer.fidelity >= 1000 else 0\nclass BulkItemPromo(Promotion): # 第二个具体策略\n    \"\"\"单个商品为20个或以上时提供10%折扣\"\"\"\n    def discount(self, order):\n        discount = 0\n        for item in order.cart:\n            if item.quantity >= 20:\n                discount += item.total() * .1\n        return discount\nclass LargeOrderPromo(Promotion): # 第三个具体策略\n    \"\"\"订单中的不同商品达到10个或以上时提供7%折扣\"\"\"\n    def discount(self, order):\n        distinct_items = {item.product for item in order.cart}\n        if len(distinct_items) >= 10:\n            return order.total() * .07\n    return 0   \n```\n在这个示例中 Promotion是抽象基类(ABC)，这么做是为了使用@abstractmethod装饰器，从而明确表明所用的模式。\n\n下面是使用不同出小折扣的Order类示例:\n\n```python     \n>>> joe = Customer('John Doe', 0)\n>>> ann = Customer('Ann Smith', 1100)\n>>> cart = [LineItem('banana', 4, .5),\n... LineItem('apple', 10, 1.5),\n... LineItem('watermellon', 5, 5.0)]\n>>> Order(joe, cart, FidelityPromo())\n<Order total: 42.00 due: 42.00>\n>>> Order(ann, cart, FidelityPromo())\n<Order total: 42.00 due: 39.90>\n>>> banana_cart = [LineItem('banana', 30, .5),\n... LineItem('apple', 10, 1.5)]\n>>> Order(joe, banana_cart, BulkItemPromo())\n<Order total: 30.00 due: 28.50>\n>>> long_order = [LineItem(str(item_code), 1, 1.0)\n... for item_code in range(10)]\n>>> Order(joe, long_order, LargeOrderPromo())\n<Order total: 10.00 due: 9.30>\n>>> Order(joe, cart, LargeOrderPromo())\n<Order total: 42.00 due: 42.00>\n```\n\n##### 使用函数实现策略模式\n\n上面的经典实现中，每个策略是一个类，而且都只定义了一个方法discount, 此外它们都没有实例属性，因此可以用普通函数替换。下面是使用函数的一种实现。\n[示例6.3](https://github.com/aldslvda/readings/blob/master/Fluent-Python/6.%20Design%20Patterns%20with%20First-Class%20Functions/order6.3.py)\n\n```python\n#coding:utf-8\nfrom collections import namedtuple\n\nCustomer = namedtuple('Customer', 'name fidelity')\n\nclass LineItem:\n    def __init__(self, product, quantity, price):\n        self.product = product\n        self.quantity = quantity\n        self.price = price\n    def total(self):\n        return self.price * self.quantity\n\nclass Order: # 上下文\n    def __init__(self, customer, cart, promotion=None):\n        self.customer = customer\n        self.cart = list(cart)\n        self.promotion = promotion\n    def total(self):\n        if not hasattr(self, '__total'):\n            self.__total = sum(item.total() for item in self.cart)\n            return self.__total\n    def due(self):\n        if self.promotion is None:\n            discount = 0\n        else:\n            discount = self.promotion(self)\n        return self.total() - discount\n    def __repr__(self):\n        fmt = '<Order total: {:.2f} due: {:.2f}>'\n        return fmt.format(self.total(), self.due())\ndef fidelity_promo(order):\n    \"\"\"为积分为1000或以上的顾客提供5%折扣\"\"\"\n    return order.total() * .05 if order.customer.fidelity >= 1000 else 0\ndef bulk_item_promo(order):\n    \"\"\"单个商品为20个或以上时提供10%折扣\"\"\"\n    discount = 0\n    for item in order.cart:\n        if item.quantity >= 20:\n            discount += item.total() * .1\n    return discount\ndef large_order_promo(order):\n    \"\"\"订单中的不同商品达到10个或以上时提供7%折扣\"\"\"\n    distinct_items = {item.product for item in order.cart}\n    if len(distinct_items) >= 10:\n        return order.total() * .07\n    return 0    \n```\n这个实例中没有抽象类，而且各个策略都是**函数**。    \n下面是实际使用的输出:   \n\n```python\n>>> joe = Customer('John Doe', 0)\n>>> ann = Customer('Ann Smith', 1100)\n>>> cart = [LineItem('banana', 4, .5),\n... LineItem('apple', 10, 1.5),\n... LineItem('watermellon', 5, 5.0)]\n>>> Order(joe, cart, fidelity_promo)\n<Order total: 42.00 due: 42.00>\n>>> Order(ann, cart, fidelity_promo)\n<Order total: 42.00 due: 39.90>\n>>> banana_cart = [LineItem('banana', 30, .5),\n... LineItem('apple', 10, 1.5)]\n>>> Order(joe, banana_cart, bulk_item_promo)\n<Order total: 30.00 due: 28.50>\n>>> long_order = [LineItem(str(item_code), 1, 1.0)\n... for item_code in range(10)]\n>>> Order(joe, long_order, large_order_promo)\n<Order total: 10.00 due: 9.30>\n>>> Order(joe, cart, large_order_promo)\n<Order total: 42.00 due: 42.00>    \n```\n\n可以看到应用对应的详细策略只需要将函数作为参数传入Order类，没必要像6.1一样实例化策略对象，这样会使得资源有所节省。\n\n《设计模式：可复用面向对象软件的基础》一书的作者指出：“策略对象通常是很好的享元（flyweight）。” 那本书的另一部分对“享元”下了定义：“享元是可共享的对象，可以同时在多个上下文中使用。” 共享是推荐的做法，这样不必在每个新的上下文（这里是 Order 实例）中使用相同的策略时不断新建具体策略对象，从而减少消耗。因此，为了避免“策略”模式的一个缺点（运行时消耗），《设计模式：可复用面向对象软件的基础》的作者建议再使用另一个模式。但此时，代码行数和维护成本会不断攀升。\n\n在复杂的情况下，需要具体策略维护内部状态时，可能需要把“策略”和“享元”模式结合起来。但是，具体策略一般没有内部状态，只是处理上下文中的数据。此时，一定要使用普通的函数，别去编写只有一个方法的类，再去实现另一个类声明的单函数接口。**函数比用户定义的类的实例轻量**，而且无需使用“享元”模式，因为各个策略函数在 Python 编译模块时只会创建一次。普通的函数也是**“可共享的对象，可以同时在多个上下文中使用”**\n\n至此，我们使用函数实现了“策略”模式，接下来我们会在此基础上讲如何利用一致的条件选择最佳的策略。\n\n##### 选择最佳策略的简单方法(暴力迭代)\n使用暴力迭代的话，这个最佳策略选择的实现异常简单:\n\n```python    \npromos = [fidelity_promo, bulk_item_promo, large_order_promo]\ndef best_promo(order):\n    \"\"\"选择可用的最佳折扣\"\"\"\n    return max(promo(order) for promo in promos)\n```\n这样直接将best\\_promo作为参数传入Order类就行。不过这样做的缺陷是:添加新的策略要定义新的函数，并加进promos列表，否则不在best\\_promo的选择范围内。\n\n##### 找出模块中的全部策略\n既然说到对模块中函数的遍历，就不得不提到模块的内省函数globals(),这样一说我们就知道，模块也是一等对象（。。。。![](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/11.png?raw=true)\n\n这样我们有了新的best\\_promo:    \n\n```python   \npromos = [globals()[name] for name in globals()\n            if name.endswith('_promo')\n                and name != 'best_promo']\ndef best_promo(order):\n\"\"\"选择可用的最佳折扣\"\"\"\n    return max(promo(order) for promo in promos)\n```\n\n另一种方法是，在一个单独的模块(promotions.py)中保存所有策略函数，把best_promo排除在外。   \n\n```python   \npromos = [func for name, func in\n            inspect.getmembers(promotions, inspect.isfunction)]\ndef best_promo(order):\n    \"\"\"选择可用的最佳折扣\"\"\"\n    return max(promo(order) for promo in promos)\n```\n这个实现的缺陷是，promotions模块中的**所有函数必须是策略函数**，这种实现是强调模块内省的一种用途而不是提供完善的方案。\n\n#### 总结\n使用一等对象实现策略模式的核心思想是:   \n  \n>  用\"使用普通的函数\"的方式代替\"编写只有一个方法的类，再去实现另一个类声明的单函数接口\"。将普通的函数作为可共享的对象。     \n\n上面的例子都是基于这一思想进行优化，并且处使用一等对象的特性(函数作为参数、模块内省)。\n\n下一篇我们会讲到命令模式，关于策略模式和命令模式的定义和场景，参见：[关于设计模式：策略模式和命令模式](https://github.com/aldslvda/readings/blob/master/Fluent-Python/6.%20Design%20Patterns%20with%20First-Class%20Functions/design-pattern-mentioned.md)\n\n（今天好高产\n![](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/17.png?raw=true)\n\n\n\n","source":"_posts/fluent-python-6-1.md","raw":"title: Fluent Python第六章:使用一等函数实现设计模式(1) —— 策略模式\ndate: 2017-12-17 21:27:33\ntags:\n- Python\n- design pattern\n- The Strategy pattern\n- fluent python\ncategories:\n- 读书笔记\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n\n## Fluent Python ##\n### Chapter 6. Design Patterns with First-Class Functions ###\n### 第六章. 使用一等函数实现设计模式(1) —— 策略模式\n这一章中会讲到设计模式的定义和适用场景，以及利用Python的一等函数特性对设计模式的实现。\n\n这篇博文中先讨论策略模式。\n#### 策略模式\n合理利用作为一等函数的对象可以简化某些设计模式。\n##### 经典的策略模式\n《设计模式：可复用面向对象软件的基础》一书是这样概述“策略”模式的：\n\n> 定义一系列算法，把它们一一封装起来，并且使它们可以相互替换。本模式使得算法可以独立于使用它的客户而变化。\n\n\n![1](https://github.com/aldslvda/blog-images/blob/master/fluent-python-6.1.png?raw=true)\n\n策略模式的一个经典的场景是商店的折扣策略，上图是这个场景的UML类图。具体场景如下:\n\n> 假如一个网店制定了下述折扣规则:   \n> 1. 有 1000 或以上积分的顾客，每个订单享 5% 折扣。   \n> 2. 同一订单中，单个商品的数量达到 20 个或以上，享 10% 折扣。  \n> 3. 订单中的不同商品达到 10 个或以上，享 7% 折扣。   \n> 简单起见，我们假定一个订单一次只能享用一个折扣。  \n\n上面的UML图中:\n\n- 上下文: 把一些计算委托给实现不同算法的可互换组件，提供服务。在这个电商示例中，上下文是 Order，它会根据不同的算法计算促销折扣。   \n- 策略:实现不同算法的组件共同的接口。在这个示例中，名为 Promotion 的抽象类扮演这个角色。    \n- 具体策略: \"策略\"的子类，fidelityPromo、BulkPromo 和LargeOrderPromo 是这里实现的三个具体策略。\n\n上面的UML类图中，每个具体策略都是一个类，而且都只定义了一个方法，即 discount。此\n外，策略实例没有状态（没有实例属性）。下面是使用Python对这个策略的重构，包括把具体策略用函数实现(而不是类)，取消了Promotion抽象类。\n[示例6.1](https://github.com/aldslvda/readings/blob/master/Fluent-Python/6.%20Design%20Patterns%20with%20First-Class%20Functions/order6.1.py)\n\n```python    \n#coding=utf8\nfrom abc import ABC, abstractmethod\nfrom collections import namedtuple\nCustomer = namedtuple('Customer', 'name fidelity')\nclass LineItem:\n    def __init__(self, product, quantity, price):\n        self.product = product\n        self.quantity = quantity\n        self.price = price\n    def total(self):\n        return self.price * self.quantity\nclass Order: # 上下文\n    def __init__(self, customer, cart, promotion=None):\n        self.customer = customer\n        self.cart = list(cart)\n        self.promotion = promotion\n    def total(self):\n        if not hasattr(self, '__total'):\n            self.__total = sum(item.total() for item in self.cart)\n        return self.__total\n    def due(self):\n        if self.promotion is None:\n            discount = 0\n        else:\n            discount = self.promotion.discount(self)\n        return self.total() - discount\n    def __repr__(self):\n        fmt = '<Order total: {:.2f} due: {:.2f}>'\n        return fmt.format(self.total(), self.due())\nclass Promotion(ABC) : # 策略：抽象基类\n    @abstractmethod\n    def discount(self, order):\n    \"\"\"返回折扣金额（正值）\"\"\"\n    \nclass FidelityPromo(Promotion): # 第一个具体策略\n    \"\"\"为积分为1000或以上的顾客提供5%折扣\"\"\"\n    def discount(self, order):\n        return order.total() * .05 if order.customer.fidelity >= 1000 else 0\nclass BulkItemPromo(Promotion): # 第二个具体策略\n    \"\"\"单个商品为20个或以上时提供10%折扣\"\"\"\n    def discount(self, order):\n        discount = 0\n        for item in order.cart:\n            if item.quantity >= 20:\n                discount += item.total() * .1\n        return discount\nclass LargeOrderPromo(Promotion): # 第三个具体策略\n    \"\"\"订单中的不同商品达到10个或以上时提供7%折扣\"\"\"\n    def discount(self, order):\n        distinct_items = {item.product for item in order.cart}\n        if len(distinct_items) >= 10:\n            return order.total() * .07\n    return 0   \n```\n在这个示例中 Promotion是抽象基类(ABC)，这么做是为了使用@abstractmethod装饰器，从而明确表明所用的模式。\n\n下面是使用不同出小折扣的Order类示例:\n\n```python     \n>>> joe = Customer('John Doe', 0)\n>>> ann = Customer('Ann Smith', 1100)\n>>> cart = [LineItem('banana', 4, .5),\n... LineItem('apple', 10, 1.5),\n... LineItem('watermellon', 5, 5.0)]\n>>> Order(joe, cart, FidelityPromo())\n<Order total: 42.00 due: 42.00>\n>>> Order(ann, cart, FidelityPromo())\n<Order total: 42.00 due: 39.90>\n>>> banana_cart = [LineItem('banana', 30, .5),\n... LineItem('apple', 10, 1.5)]\n>>> Order(joe, banana_cart, BulkItemPromo())\n<Order total: 30.00 due: 28.50>\n>>> long_order = [LineItem(str(item_code), 1, 1.0)\n... for item_code in range(10)]\n>>> Order(joe, long_order, LargeOrderPromo())\n<Order total: 10.00 due: 9.30>\n>>> Order(joe, cart, LargeOrderPromo())\n<Order total: 42.00 due: 42.00>\n```\n\n##### 使用函数实现策略模式\n\n上面的经典实现中，每个策略是一个类，而且都只定义了一个方法discount, 此外它们都没有实例属性，因此可以用普通函数替换。下面是使用函数的一种实现。\n[示例6.3](https://github.com/aldslvda/readings/blob/master/Fluent-Python/6.%20Design%20Patterns%20with%20First-Class%20Functions/order6.3.py)\n\n```python\n#coding:utf-8\nfrom collections import namedtuple\n\nCustomer = namedtuple('Customer', 'name fidelity')\n\nclass LineItem:\n    def __init__(self, product, quantity, price):\n        self.product = product\n        self.quantity = quantity\n        self.price = price\n    def total(self):\n        return self.price * self.quantity\n\nclass Order: # 上下文\n    def __init__(self, customer, cart, promotion=None):\n        self.customer = customer\n        self.cart = list(cart)\n        self.promotion = promotion\n    def total(self):\n        if not hasattr(self, '__total'):\n            self.__total = sum(item.total() for item in self.cart)\n            return self.__total\n    def due(self):\n        if self.promotion is None:\n            discount = 0\n        else:\n            discount = self.promotion(self)\n        return self.total() - discount\n    def __repr__(self):\n        fmt = '<Order total: {:.2f} due: {:.2f}>'\n        return fmt.format(self.total(), self.due())\ndef fidelity_promo(order):\n    \"\"\"为积分为1000或以上的顾客提供5%折扣\"\"\"\n    return order.total() * .05 if order.customer.fidelity >= 1000 else 0\ndef bulk_item_promo(order):\n    \"\"\"单个商品为20个或以上时提供10%折扣\"\"\"\n    discount = 0\n    for item in order.cart:\n        if item.quantity >= 20:\n            discount += item.total() * .1\n    return discount\ndef large_order_promo(order):\n    \"\"\"订单中的不同商品达到10个或以上时提供7%折扣\"\"\"\n    distinct_items = {item.product for item in order.cart}\n    if len(distinct_items) >= 10:\n        return order.total() * .07\n    return 0    \n```\n这个实例中没有抽象类，而且各个策略都是**函数**。    \n下面是实际使用的输出:   \n\n```python\n>>> joe = Customer('John Doe', 0)\n>>> ann = Customer('Ann Smith', 1100)\n>>> cart = [LineItem('banana', 4, .5),\n... LineItem('apple', 10, 1.5),\n... LineItem('watermellon', 5, 5.0)]\n>>> Order(joe, cart, fidelity_promo)\n<Order total: 42.00 due: 42.00>\n>>> Order(ann, cart, fidelity_promo)\n<Order total: 42.00 due: 39.90>\n>>> banana_cart = [LineItem('banana', 30, .5),\n... LineItem('apple', 10, 1.5)]\n>>> Order(joe, banana_cart, bulk_item_promo)\n<Order total: 30.00 due: 28.50>\n>>> long_order = [LineItem(str(item_code), 1, 1.0)\n... for item_code in range(10)]\n>>> Order(joe, long_order, large_order_promo)\n<Order total: 10.00 due: 9.30>\n>>> Order(joe, cart, large_order_promo)\n<Order total: 42.00 due: 42.00>    \n```\n\n可以看到应用对应的详细策略只需要将函数作为参数传入Order类，没必要像6.1一样实例化策略对象，这样会使得资源有所节省。\n\n《设计模式：可复用面向对象软件的基础》一书的作者指出：“策略对象通常是很好的享元（flyweight）。” 那本书的另一部分对“享元”下了定义：“享元是可共享的对象，可以同时在多个上下文中使用。” 共享是推荐的做法，这样不必在每个新的上下文（这里是 Order 实例）中使用相同的策略时不断新建具体策略对象，从而减少消耗。因此，为了避免“策略”模式的一个缺点（运行时消耗），《设计模式：可复用面向对象软件的基础》的作者建议再使用另一个模式。但此时，代码行数和维护成本会不断攀升。\n\n在复杂的情况下，需要具体策略维护内部状态时，可能需要把“策略”和“享元”模式结合起来。但是，具体策略一般没有内部状态，只是处理上下文中的数据。此时，一定要使用普通的函数，别去编写只有一个方法的类，再去实现另一个类声明的单函数接口。**函数比用户定义的类的实例轻量**，而且无需使用“享元”模式，因为各个策略函数在 Python 编译模块时只会创建一次。普通的函数也是**“可共享的对象，可以同时在多个上下文中使用”**\n\n至此，我们使用函数实现了“策略”模式，接下来我们会在此基础上讲如何利用一致的条件选择最佳的策略。\n\n##### 选择最佳策略的简单方法(暴力迭代)\n使用暴力迭代的话，这个最佳策略选择的实现异常简单:\n\n```python    \npromos = [fidelity_promo, bulk_item_promo, large_order_promo]\ndef best_promo(order):\n    \"\"\"选择可用的最佳折扣\"\"\"\n    return max(promo(order) for promo in promos)\n```\n这样直接将best\\_promo作为参数传入Order类就行。不过这样做的缺陷是:添加新的策略要定义新的函数，并加进promos列表，否则不在best\\_promo的选择范围内。\n\n##### 找出模块中的全部策略\n既然说到对模块中函数的遍历，就不得不提到模块的内省函数globals(),这样一说我们就知道，模块也是一等对象（。。。。![](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/11.png?raw=true)\n\n这样我们有了新的best\\_promo:    \n\n```python   \npromos = [globals()[name] for name in globals()\n            if name.endswith('_promo')\n                and name != 'best_promo']\ndef best_promo(order):\n\"\"\"选择可用的最佳折扣\"\"\"\n    return max(promo(order) for promo in promos)\n```\n\n另一种方法是，在一个单独的模块(promotions.py)中保存所有策略函数，把best_promo排除在外。   \n\n```python   \npromos = [func for name, func in\n            inspect.getmembers(promotions, inspect.isfunction)]\ndef best_promo(order):\n    \"\"\"选择可用的最佳折扣\"\"\"\n    return max(promo(order) for promo in promos)\n```\n这个实现的缺陷是，promotions模块中的**所有函数必须是策略函数**，这种实现是强调模块内省的一种用途而不是提供完善的方案。\n\n#### 总结\n使用一等对象实现策略模式的核心思想是:   \n  \n>  用\"使用普通的函数\"的方式代替\"编写只有一个方法的类，再去实现另一个类声明的单函数接口\"。将普通的函数作为可共享的对象。     \n\n上面的例子都是基于这一思想进行优化，并且处使用一等对象的特性(函数作为参数、模块内省)。\n\n下一篇我们会讲到命令模式，关于策略模式和命令模式的定义和场景，参见：[关于设计模式：策略模式和命令模式](https://github.com/aldslvda/readings/blob/master/Fluent-Python/6.%20Design%20Patterns%20with%20First-Class%20Functions/design-pattern-mentioned.md)\n\n（今天好高产\n![](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/17.png?raw=true)\n\n\n\n","slug":"fluent-python-6-1","published":1,"updated":"2019-04-25T01:27:24.888Z","comments":1,"layout":"post","link":"","_id":"cjuw5c6gl003ndhyfw73o6nfv","content":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-6-Design-Patterns-with-First-Class-Functions\"><a href=\"#Chapter-6-Design-Patterns-with-First-Class-Functions\" class=\"headerlink\" title=\"Chapter 6. Design Patterns with First-Class Functions\"></a>Chapter 6. Design Patterns with First-Class Functions</h3><h3 id=\"第六章-使用一等函数实现设计模式-1-——-策略模式\"><a href=\"#第六章-使用一等函数实现设计模式-1-——-策略模式\" class=\"headerlink\" title=\"第六章. 使用一等函数实现设计模式(1) —— 策略模式\"></a>第六章. 使用一等函数实现设计模式(1) —— 策略模式</h3><p>这一章中会讲到设计模式的定义和适用场景，以及利用Python的一等函数特性对设计模式的实现。</p>\n<p>这篇博文中先讨论策略模式。</p>\n<h4 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h4><p>合理利用作为一等函数的对象可以简化某些设计模式。</p>\n<h5 id=\"经典的策略模式\"><a href=\"#经典的策略模式\" class=\"headerlink\" title=\"经典的策略模式\"></a>经典的策略模式</h5><p>《设计模式：可复用面向对象软件的基础》一书是这样概述“策略”模式的：</p>\n<blockquote>\n<p>定义一系列算法，把它们一一封装起来，并且使它们可以相互替换。本模式使得算法可以独立于使用它的客户而变化。</p>\n</blockquote>\n<p><img src=\"https://github.com/aldslvda/blog-images/blob/master/fluent-python-6.1.png?raw=true\" alt=\"1\"></p>\n<p>策略模式的一个经典的场景是商店的折扣策略，上图是这个场景的UML类图。具体场景如下:</p>\n<blockquote>\n<p>假如一个网店制定了下述折扣规则:   </p>\n<ol>\n<li>有 1000 或以上积分的顾客，每个订单享 5% 折扣。   </li>\n<li>同一订单中，单个商品的数量达到 20 个或以上，享 10% 折扣。  </li>\n<li>订单中的不同商品达到 10 个或以上，享 7% 折扣。<br>简单起见，我们假定一个订单一次只能享用一个折扣。  </li>\n</ol>\n</blockquote>\n<p>上面的UML图中:</p>\n<ul>\n<li>上下文: 把一些计算委托给实现不同算法的可互换组件，提供服务。在这个电商示例中，上下文是 Order，它会根据不同的算法计算促销折扣。   </li>\n<li>策略:实现不同算法的组件共同的接口。在这个示例中，名为 Promotion 的抽象类扮演这个角色。    </li>\n<li>具体策略: “策略”的子类，fidelityPromo、BulkPromo 和LargeOrderPromo 是这里实现的三个具体策略。</li>\n</ul>\n<p>上面的UML类图中，每个具体策略都是一个类，而且都只定义了一个方法，即 discount。此<br>外，策略实例没有状态（没有实例属性）。下面是使用Python对这个策略的重构，包括把具体策略用函数实现(而不是类)，取消了Promotion抽象类。<br><a href=\"https://github.com/aldslvda/readings/blob/master/Fluent-Python/6.%20Design%20Patterns%20with%20First-Class%20Functions/order6.1.py\" target=\"_blank\" rel=\"noopener\">示例6.1</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding=utf8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> abc <span class=\"keyword\">import</span> ABC, abstractmethod</span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> namedtuple</span><br><span class=\"line\">Customer = namedtuple(<span class=\"string\">'Customer'</span>, <span class=\"string\">'name fidelity'</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineItem</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, product, quantity, price)</span>:</span></span><br><span class=\"line\">        self.product = product</span><br><span class=\"line\">        self.quantity = quantity</span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.price * self.quantity</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span>:</span> <span class=\"comment\"># 上下文</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, customer, cart, promotion=None)</span>:</span></span><br><span class=\"line\">        self.customer = customer</span><br><span class=\"line\">        self.cart = list(cart)</span><br><span class=\"line\">        self.promotion = promotion</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(self, <span class=\"string\">'__total'</span>):</span><br><span class=\"line\">            self.__total = sum(item.total() <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.cart)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__total</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">due</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.promotion <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            discount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            discount = self.promotion.discount(self)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.total() - discount</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        fmt = <span class=\"string\">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmt.format(self.total(), self.due())</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promotion</span><span class=\"params\">(ABC)</span> :</span> <span class=\"comment\"># 策略：抽象基类</span></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">discount</span><span class=\"params\">(self, order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"返回折扣金额（正值）\"\"\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FidelityPromo</span><span class=\"params\">(Promotion)</span>:</span> <span class=\"comment\"># 第一个具体策略</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"为积分为1000或以上的顾客提供5%折扣\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">discount</span><span class=\"params\">(self, order)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.05</span> <span class=\"keyword\">if</span> order.customer.fidelity &gt;= <span class=\"number\">1000</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BulkItemPromo</span><span class=\"params\">(Promotion)</span>:</span> <span class=\"comment\"># 第二个具体策略</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"单个商品为20个或以上时提供10%折扣\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">discount</span><span class=\"params\">(self, order)</span>:</span></span><br><span class=\"line\">        discount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.quantity &gt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">                discount += item.total() * <span class=\"number\">.1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> discount</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LargeOrderPromo</span><span class=\"params\">(Promotion)</span>:</span> <span class=\"comment\"># 第三个具体策略</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"订单中的不同商品达到10个或以上时提供7%折扣\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">discount</span><span class=\"params\">(self, order)</span>:</span></span><br><span class=\"line\">        distinct_items = &#123;item.product <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(distinct_items) &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.07</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>在这个示例中 Promotion是抽象基类(ABC)，这么做是为了使用@abstractmethod装饰器，从而明确表明所用的模式。</p>\n<p>下面是使用不同出小折扣的Order类示例:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>joe = Customer(<span class=\"string\">'John Doe'</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ann = Customer(<span class=\"string\">'Ann Smith'</span>, <span class=\"number\">1100</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cart = [LineItem(<span class=\"string\">'banana'</span>, <span class=\"number\">4</span>, <span class=\"number\">.5</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span>LineItem(<span class=\"string\">'apple'</span>, <span class=\"number\">10</span>, <span class=\"number\">1.5</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span>LineItem(<span class=\"string\">'watermellon'</span>, <span class=\"number\">5</span>, <span class=\"number\">5.0</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Order(joe, cart, FidelityPromo())</span><br><span class=\"line\">&lt;Order total: <span class=\"number\">42.00</span> due: <span class=\"number\">42.00</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Order(ann, cart, FidelityPromo())</span><br><span class=\"line\">&lt;Order total: <span class=\"number\">42.00</span> due: <span class=\"number\">39.90</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>banana_cart = [LineItem(<span class=\"string\">'banana'</span>, <span class=\"number\">30</span>, <span class=\"number\">.5</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span>LineItem(<span class=\"string\">'apple'</span>, <span class=\"number\">10</span>, <span class=\"number\">1.5</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Order(joe, banana_cart, BulkItemPromo())</span><br><span class=\"line\">&lt;Order total: <span class=\"number\">30.00</span> due: <span class=\"number\">28.50</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>long_order = [LineItem(str(item_code), <span class=\"number\">1</span>, <span class=\"number\">1.0</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">for</span> item_code <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Order(joe, long_order, LargeOrderPromo())</span><br><span class=\"line\">&lt;Order total: <span class=\"number\">10.00</span> due: <span class=\"number\">9.30</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Order(joe, cart, LargeOrderPromo())</span><br><span class=\"line\">&lt;Order total: <span class=\"number\">42.00</span> due: <span class=\"number\">42.00</span>&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用函数实现策略模式\"><a href=\"#使用函数实现策略模式\" class=\"headerlink\" title=\"使用函数实现策略模式\"></a>使用函数实现策略模式</h5><p>上面的经典实现中，每个策略是一个类，而且都只定义了一个方法discount, 此外它们都没有实例属性，因此可以用普通函数替换。下面是使用函数的一种实现。<br><a href=\"https://github.com/aldslvda/readings/blob/master/Fluent-Python/6.%20Design%20Patterns%20with%20First-Class%20Functions/order6.3.py\" target=\"_blank\" rel=\"noopener\">示例6.3</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> namedtuple</span><br><span class=\"line\"></span><br><span class=\"line\">Customer = namedtuple(<span class=\"string\">'Customer'</span>, <span class=\"string\">'name fidelity'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineItem</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, product, quantity, price)</span>:</span></span><br><span class=\"line\">        self.product = product</span><br><span class=\"line\">        self.quantity = quantity</span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.price * self.quantity</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span>:</span> <span class=\"comment\"># 上下文</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, customer, cart, promotion=None)</span>:</span></span><br><span class=\"line\">        self.customer = customer</span><br><span class=\"line\">        self.cart = list(cart)</span><br><span class=\"line\">        self.promotion = promotion</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(self, <span class=\"string\">'__total'</span>):</span><br><span class=\"line\">            self.__total = sum(item.total() <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.cart)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.__total</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">due</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.promotion <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            discount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            discount = self.promotion(self)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.total() - discount</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        fmt = <span class=\"string\">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmt.format(self.total(), self.due())</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fidelity_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"为积分为1000或以上的顾客提供5%折扣\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.05</span> <span class=\"keyword\">if</span> order.customer.fidelity &gt;= <span class=\"number\">1000</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bulk_item_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"单个商品为20个或以上时提供10%折扣\"\"\"</span></span><br><span class=\"line\">    discount = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item.quantity &gt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">            discount += item.total() * <span class=\"number\">.1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> discount</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">large_order_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"订单中的不同商品达到10个或以上时提供7%折扣\"\"\"</span></span><br><span class=\"line\">    distinct_items = &#123;item.product <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(distinct_items) &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.07</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>这个实例中没有抽象类，而且各个策略都是<strong>函数</strong>。<br>下面是实际使用的输出:   </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>joe = Customer(<span class=\"string\">'John Doe'</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ann = Customer(<span class=\"string\">'Ann Smith'</span>, <span class=\"number\">1100</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cart = [LineItem(<span class=\"string\">'banana'</span>, <span class=\"number\">4</span>, <span class=\"number\">.5</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span>LineItem(<span class=\"string\">'apple'</span>, <span class=\"number\">10</span>, <span class=\"number\">1.5</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span>LineItem(<span class=\"string\">'watermellon'</span>, <span class=\"number\">5</span>, <span class=\"number\">5.0</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Order(joe, cart, fidelity_promo)</span><br><span class=\"line\">&lt;Order total: <span class=\"number\">42.00</span> due: <span class=\"number\">42.00</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Order(ann, cart, fidelity_promo)</span><br><span class=\"line\">&lt;Order total: <span class=\"number\">42.00</span> due: <span class=\"number\">39.90</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>banana_cart = [LineItem(<span class=\"string\">'banana'</span>, <span class=\"number\">30</span>, <span class=\"number\">.5</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span>LineItem(<span class=\"string\">'apple'</span>, <span class=\"number\">10</span>, <span class=\"number\">1.5</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Order(joe, banana_cart, bulk_item_promo)</span><br><span class=\"line\">&lt;Order total: <span class=\"number\">30.00</span> due: <span class=\"number\">28.50</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>long_order = [LineItem(str(item_code), <span class=\"number\">1</span>, <span class=\"number\">1.0</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">for</span> item_code <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Order(joe, long_order, large_order_promo)</span><br><span class=\"line\">&lt;Order total: <span class=\"number\">10.00</span> due: <span class=\"number\">9.30</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Order(joe, cart, large_order_promo)</span><br><span class=\"line\">&lt;Order total: <span class=\"number\">42.00</span> due: <span class=\"number\">42.00</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>可以看到应用对应的详细策略只需要将函数作为参数传入Order类，没必要像6.1一样实例化策略对象，这样会使得资源有所节省。</p>\n<p>《设计模式：可复用面向对象软件的基础》一书的作者指出：“策略对象通常是很好的享元（flyweight）。” 那本书的另一部分对“享元”下了定义：“享元是可共享的对象，可以同时在多个上下文中使用。” 共享是推荐的做法，这样不必在每个新的上下文（这里是 Order 实例）中使用相同的策略时不断新建具体策略对象，从而减少消耗。因此，为了避免“策略”模式的一个缺点（运行时消耗），《设计模式：可复用面向对象软件的基础》的作者建议再使用另一个模式。但此时，代码行数和维护成本会不断攀升。</p>\n<p>在复杂的情况下，需要具体策略维护内部状态时，可能需要把“策略”和“享元”模式结合起来。但是，具体策略一般没有内部状态，只是处理上下文中的数据。此时，一定要使用普通的函数，别去编写只有一个方法的类，再去实现另一个类声明的单函数接口。<strong>函数比用户定义的类的实例轻量</strong>，而且无需使用“享元”模式，因为各个策略函数在 Python 编译模块时只会创建一次。普通的函数也是<strong>“可共享的对象，可以同时在多个上下文中使用”</strong></p>\n<p>至此，我们使用函数实现了“策略”模式，接下来我们会在此基础上讲如何利用一致的条件选择最佳的策略。</p>\n<h5 id=\"选择最佳策略的简单方法-暴力迭代\"><a href=\"#选择最佳策略的简单方法-暴力迭代\" class=\"headerlink\" title=\"选择最佳策略的简单方法(暴力迭代)\"></a>选择最佳策略的简单方法(暴力迭代)</h5><p>使用暴力迭代的话，这个最佳策略选择的实现异常简单:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promos = [fidelity_promo, bulk_item_promo, large_order_promo]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">best_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"选择可用的最佳折扣\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(promo(order) <span class=\"keyword\">for</span> promo <span class=\"keyword\">in</span> promos)</span><br></pre></td></tr></table></figure>\n<p>这样直接将best_promo作为参数传入Order类就行。不过这样做的缺陷是:添加新的策略要定义新的函数，并加进promos列表，否则不在best_promo的选择范围内。</p>\n<h5 id=\"找出模块中的全部策略\"><a href=\"#找出模块中的全部策略\" class=\"headerlink\" title=\"找出模块中的全部策略\"></a>找出模块中的全部策略</h5><p>既然说到对模块中函数的遍历，就不得不提到模块的内省函数globals(),这样一说我们就知道，模块也是一等对象（。。。。<img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/11.png?raw=true\" alt></p>\n<p>这样我们有了新的best_promo:    </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promos = [globals()[name] <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> globals()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> name.endswith(<span class=\"string\">'_promo'</span>)</span><br><span class=\"line\">                <span class=\"keyword\">and</span> name != <span class=\"string\">'best_promo'</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">best_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"选择可用的最佳折扣\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(promo(order) <span class=\"keyword\">for</span> promo <span class=\"keyword\">in</span> promos)</span><br></pre></td></tr></table></figure>\n<p>另一种方法是，在一个单独的模块(promotions.py)中保存所有策略函数，把best_promo排除在外。   </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promos = [func <span class=\"keyword\">for</span> name, func <span class=\"keyword\">in</span></span><br><span class=\"line\">            inspect.getmembers(promotions, inspect.isfunction)]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">best_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"选择可用的最佳折扣\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(promo(order) <span class=\"keyword\">for</span> promo <span class=\"keyword\">in</span> promos)</span><br></pre></td></tr></table></figure>\n<p>这个实现的缺陷是，promotions模块中的<strong>所有函数必须是策略函数</strong>，这种实现是强调模块内省的一种用途而不是提供完善的方案。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>使用一等对象实现策略模式的核心思想是:   </p>\n<blockquote>\n<p> 用”使用普通的函数”的方式代替”编写只有一个方法的类，再去实现另一个类声明的单函数接口”。将普通的函数作为可共享的对象。     </p>\n</blockquote>\n<p>上面的例子都是基于这一思想进行优化，并且处使用一等对象的特性(函数作为参数、模块内省)。</p>\n<p>下一篇我们会讲到命令模式，关于策略模式和命令模式的定义和场景，参见：<a href=\"https://github.com/aldslvda/readings/blob/master/Fluent-Python/6.%20Design%20Patterns%20with%20First-Class%20Functions/design-pattern-mentioned.md\" target=\"_blank\" rel=\"noopener\">关于设计模式：策略模式和命令模式</a></p>\n<p>（今天好高产<br><img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/17.png?raw=true\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-6-Design-Patterns-with-First-Class-Functions\"><a href=\"#Chapter-6-Design-Patterns-with-First-Class-Functions\" class=\"headerlink\" title=\"Chapter 6. Design Patterns with First-Class Functions\"></a>Chapter 6. Design Patterns with First-Class Functions</h3><h3 id=\"第六章-使用一等函数实现设计模式-1-——-策略模式\"><a href=\"#第六章-使用一等函数实现设计模式-1-——-策略模式\" class=\"headerlink\" title=\"第六章. 使用一等函数实现设计模式(1) —— 策略模式\"></a>第六章. 使用一等函数实现设计模式(1) —— 策略模式</h3><p>这一章中会讲到设计模式的定义和适用场景，以及利用Python的一等函数特性对设计模式的实现。</p>\n<p>这篇博文中先讨论策略模式。</p>\n<h4 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h4><p>合理利用作为一等函数的对象可以简化某些设计模式。</p>\n<h5 id=\"经典的策略模式\"><a href=\"#经典的策略模式\" class=\"headerlink\" title=\"经典的策略模式\"></a>经典的策略模式</h5><p>《设计模式：可复用面向对象软件的基础》一书是这样概述“策略”模式的：</p>\n<blockquote>\n<p>定义一系列算法，把它们一一封装起来，并且使它们可以相互替换。本模式使得算法可以独立于使用它的客户而变化。</p>\n</blockquote>\n<p><img src=\"https://github.com/aldslvda/blog-images/blob/master/fluent-python-6.1.png?raw=true\" alt=\"1\"></p>\n<p>策略模式的一个经典的场景是商店的折扣策略，上图是这个场景的UML类图。具体场景如下:</p>\n<blockquote>\n<p>假如一个网店制定了下述折扣规则:   </p>\n<ol>\n<li>有 1000 或以上积分的顾客，每个订单享 5% 折扣。   </li>\n<li>同一订单中，单个商品的数量达到 20 个或以上，享 10% 折扣。  </li>\n<li>订单中的不同商品达到 10 个或以上，享 7% 折扣。<br>简单起见，我们假定一个订单一次只能享用一个折扣。  </li>\n</ol>\n</blockquote>\n<p>上面的UML图中:</p>\n<ul>\n<li>上下文: 把一些计算委托给实现不同算法的可互换组件，提供服务。在这个电商示例中，上下文是 Order，它会根据不同的算法计算促销折扣。   </li>\n<li>策略:实现不同算法的组件共同的接口。在这个示例中，名为 Promotion 的抽象类扮演这个角色。    </li>\n<li>具体策略: “策略”的子类，fidelityPromo、BulkPromo 和LargeOrderPromo 是这里实现的三个具体策略。</li>\n</ul>\n<p>上面的UML类图中，每个具体策略都是一个类，而且都只定义了一个方法，即 discount。此<br>外，策略实例没有状态（没有实例属性）。下面是使用Python对这个策略的重构，包括把具体策略用函数实现(而不是类)，取消了Promotion抽象类。<br><a href=\"https://github.com/aldslvda/readings/blob/master/Fluent-Python/6.%20Design%20Patterns%20with%20First-Class%20Functions/order6.1.py\" target=\"_blank\" rel=\"noopener\">示例6.1</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding=utf8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> abc <span class=\"keyword\">import</span> ABC, abstractmethod</span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> namedtuple</span><br><span class=\"line\">Customer = namedtuple(<span class=\"string\">'Customer'</span>, <span class=\"string\">'name fidelity'</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineItem</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, product, quantity, price)</span>:</span></span><br><span class=\"line\">        self.product = product</span><br><span class=\"line\">        self.quantity = quantity</span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.price * self.quantity</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span>:</span> <span class=\"comment\"># 上下文</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, customer, cart, promotion=None)</span>:</span></span><br><span class=\"line\">        self.customer = customer</span><br><span class=\"line\">        self.cart = list(cart)</span><br><span class=\"line\">        self.promotion = promotion</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(self, <span class=\"string\">'__total'</span>):</span><br><span class=\"line\">            self.__total = sum(item.total() <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.cart)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__total</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">due</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.promotion <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            discount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            discount = self.promotion.discount(self)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.total() - discount</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        fmt = <span class=\"string\">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmt.format(self.total(), self.due())</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promotion</span><span class=\"params\">(ABC)</span> :</span> <span class=\"comment\"># 策略：抽象基类</span></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">discount</span><span class=\"params\">(self, order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"返回折扣金额（正值）\"\"\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FidelityPromo</span><span class=\"params\">(Promotion)</span>:</span> <span class=\"comment\"># 第一个具体策略</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"为积分为1000或以上的顾客提供5%折扣\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">discount</span><span class=\"params\">(self, order)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.05</span> <span class=\"keyword\">if</span> order.customer.fidelity &gt;= <span class=\"number\">1000</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BulkItemPromo</span><span class=\"params\">(Promotion)</span>:</span> <span class=\"comment\"># 第二个具体策略</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"单个商品为20个或以上时提供10%折扣\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">discount</span><span class=\"params\">(self, order)</span>:</span></span><br><span class=\"line\">        discount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.quantity &gt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">                discount += item.total() * <span class=\"number\">.1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> discount</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LargeOrderPromo</span><span class=\"params\">(Promotion)</span>:</span> <span class=\"comment\"># 第三个具体策略</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"订单中的不同商品达到10个或以上时提供7%折扣\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">discount</span><span class=\"params\">(self, order)</span>:</span></span><br><span class=\"line\">        distinct_items = &#123;item.product <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(distinct_items) &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.07</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>在这个示例中 Promotion是抽象基类(ABC)，这么做是为了使用@abstractmethod装饰器，从而明确表明所用的模式。</p>\n<p>下面是使用不同出小折扣的Order类示例:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>joe = Customer(<span class=\"string\">'John Doe'</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ann = Customer(<span class=\"string\">'Ann Smith'</span>, <span class=\"number\">1100</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cart = [LineItem(<span class=\"string\">'banana'</span>, <span class=\"number\">4</span>, <span class=\"number\">.5</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span>LineItem(<span class=\"string\">'apple'</span>, <span class=\"number\">10</span>, <span class=\"number\">1.5</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span>LineItem(<span class=\"string\">'watermellon'</span>, <span class=\"number\">5</span>, <span class=\"number\">5.0</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Order(joe, cart, FidelityPromo())</span><br><span class=\"line\">&lt;Order total: <span class=\"number\">42.00</span> due: <span class=\"number\">42.00</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Order(ann, cart, FidelityPromo())</span><br><span class=\"line\">&lt;Order total: <span class=\"number\">42.00</span> due: <span class=\"number\">39.90</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>banana_cart = [LineItem(<span class=\"string\">'banana'</span>, <span class=\"number\">30</span>, <span class=\"number\">.5</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span>LineItem(<span class=\"string\">'apple'</span>, <span class=\"number\">10</span>, <span class=\"number\">1.5</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Order(joe, banana_cart, BulkItemPromo())</span><br><span class=\"line\">&lt;Order total: <span class=\"number\">30.00</span> due: <span class=\"number\">28.50</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>long_order = [LineItem(str(item_code), <span class=\"number\">1</span>, <span class=\"number\">1.0</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">for</span> item_code <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Order(joe, long_order, LargeOrderPromo())</span><br><span class=\"line\">&lt;Order total: <span class=\"number\">10.00</span> due: <span class=\"number\">9.30</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Order(joe, cart, LargeOrderPromo())</span><br><span class=\"line\">&lt;Order total: <span class=\"number\">42.00</span> due: <span class=\"number\">42.00</span>&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用函数实现策略模式\"><a href=\"#使用函数实现策略模式\" class=\"headerlink\" title=\"使用函数实现策略模式\"></a>使用函数实现策略模式</h5><p>上面的经典实现中，每个策略是一个类，而且都只定义了一个方法discount, 此外它们都没有实例属性，因此可以用普通函数替换。下面是使用函数的一种实现。<br><a href=\"https://github.com/aldslvda/readings/blob/master/Fluent-Python/6.%20Design%20Patterns%20with%20First-Class%20Functions/order6.3.py\" target=\"_blank\" rel=\"noopener\">示例6.3</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> namedtuple</span><br><span class=\"line\"></span><br><span class=\"line\">Customer = namedtuple(<span class=\"string\">'Customer'</span>, <span class=\"string\">'name fidelity'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LineItem</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, product, quantity, price)</span>:</span></span><br><span class=\"line\">        self.product = product</span><br><span class=\"line\">        self.quantity = quantity</span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.price * self.quantity</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span>:</span> <span class=\"comment\"># 上下文</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, customer, cart, promotion=None)</span>:</span></span><br><span class=\"line\">        self.customer = customer</span><br><span class=\"line\">        self.cart = list(cart)</span><br><span class=\"line\">        self.promotion = promotion</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">total</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(self, <span class=\"string\">'__total'</span>):</span><br><span class=\"line\">            self.__total = sum(item.total() <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.cart)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.__total</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">due</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.promotion <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            discount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            discount = self.promotion(self)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.total() - discount</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        fmt = <span class=\"string\">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmt.format(self.total(), self.due())</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fidelity_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"为积分为1000或以上的顾客提供5%折扣\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.05</span> <span class=\"keyword\">if</span> order.customer.fidelity &gt;= <span class=\"number\">1000</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bulk_item_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"单个商品为20个或以上时提供10%折扣\"\"\"</span></span><br><span class=\"line\">    discount = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item.quantity &gt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">            discount += item.total() * <span class=\"number\">.1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> discount</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">large_order_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"订单中的不同商品达到10个或以上时提供7%折扣\"\"\"</span></span><br><span class=\"line\">    distinct_items = &#123;item.product <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(distinct_items) &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.07</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>这个实例中没有抽象类，而且各个策略都是<strong>函数</strong>。<br>下面是实际使用的输出:   </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>joe = Customer(<span class=\"string\">'John Doe'</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ann = Customer(<span class=\"string\">'Ann Smith'</span>, <span class=\"number\">1100</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cart = [LineItem(<span class=\"string\">'banana'</span>, <span class=\"number\">4</span>, <span class=\"number\">.5</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span>LineItem(<span class=\"string\">'apple'</span>, <span class=\"number\">10</span>, <span class=\"number\">1.5</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span>LineItem(<span class=\"string\">'watermellon'</span>, <span class=\"number\">5</span>, <span class=\"number\">5.0</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Order(joe, cart, fidelity_promo)</span><br><span class=\"line\">&lt;Order total: <span class=\"number\">42.00</span> due: <span class=\"number\">42.00</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Order(ann, cart, fidelity_promo)</span><br><span class=\"line\">&lt;Order total: <span class=\"number\">42.00</span> due: <span class=\"number\">39.90</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>banana_cart = [LineItem(<span class=\"string\">'banana'</span>, <span class=\"number\">30</span>, <span class=\"number\">.5</span>),</span><br><span class=\"line\"><span class=\"meta\">... </span>LineItem(<span class=\"string\">'apple'</span>, <span class=\"number\">10</span>, <span class=\"number\">1.5</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Order(joe, banana_cart, bulk_item_promo)</span><br><span class=\"line\">&lt;Order total: <span class=\"number\">30.00</span> due: <span class=\"number\">28.50</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>long_order = [LineItem(str(item_code), <span class=\"number\">1</span>, <span class=\"number\">1.0</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">for</span> item_code <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Order(joe, long_order, large_order_promo)</span><br><span class=\"line\">&lt;Order total: <span class=\"number\">10.00</span> due: <span class=\"number\">9.30</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Order(joe, cart, large_order_promo)</span><br><span class=\"line\">&lt;Order total: <span class=\"number\">42.00</span> due: <span class=\"number\">42.00</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>可以看到应用对应的详细策略只需要将函数作为参数传入Order类，没必要像6.1一样实例化策略对象，这样会使得资源有所节省。</p>\n<p>《设计模式：可复用面向对象软件的基础》一书的作者指出：“策略对象通常是很好的享元（flyweight）。” 那本书的另一部分对“享元”下了定义：“享元是可共享的对象，可以同时在多个上下文中使用。” 共享是推荐的做法，这样不必在每个新的上下文（这里是 Order 实例）中使用相同的策略时不断新建具体策略对象，从而减少消耗。因此，为了避免“策略”模式的一个缺点（运行时消耗），《设计模式：可复用面向对象软件的基础》的作者建议再使用另一个模式。但此时，代码行数和维护成本会不断攀升。</p>\n<p>在复杂的情况下，需要具体策略维护内部状态时，可能需要把“策略”和“享元”模式结合起来。但是，具体策略一般没有内部状态，只是处理上下文中的数据。此时，一定要使用普通的函数，别去编写只有一个方法的类，再去实现另一个类声明的单函数接口。<strong>函数比用户定义的类的实例轻量</strong>，而且无需使用“享元”模式，因为各个策略函数在 Python 编译模块时只会创建一次。普通的函数也是<strong>“可共享的对象，可以同时在多个上下文中使用”</strong></p>\n<p>至此，我们使用函数实现了“策略”模式，接下来我们会在此基础上讲如何利用一致的条件选择最佳的策略。</p>\n<h5 id=\"选择最佳策略的简单方法-暴力迭代\"><a href=\"#选择最佳策略的简单方法-暴力迭代\" class=\"headerlink\" title=\"选择最佳策略的简单方法(暴力迭代)\"></a>选择最佳策略的简单方法(暴力迭代)</h5><p>使用暴力迭代的话，这个最佳策略选择的实现异常简单:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promos = [fidelity_promo, bulk_item_promo, large_order_promo]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">best_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"选择可用的最佳折扣\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(promo(order) <span class=\"keyword\">for</span> promo <span class=\"keyword\">in</span> promos)</span><br></pre></td></tr></table></figure>\n<p>这样直接将best_promo作为参数传入Order类就行。不过这样做的缺陷是:添加新的策略要定义新的函数，并加进promos列表，否则不在best_promo的选择范围内。</p>\n<h5 id=\"找出模块中的全部策略\"><a href=\"#找出模块中的全部策略\" class=\"headerlink\" title=\"找出模块中的全部策略\"></a>找出模块中的全部策略</h5><p>既然说到对模块中函数的遍历，就不得不提到模块的内省函数globals(),这样一说我们就知道，模块也是一等对象（。。。。<img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/11.png?raw=true\" alt></p>\n<p>这样我们有了新的best_promo:    </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promos = [globals()[name] <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> globals()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> name.endswith(<span class=\"string\">'_promo'</span>)</span><br><span class=\"line\">                <span class=\"keyword\">and</span> name != <span class=\"string\">'best_promo'</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">best_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"选择可用的最佳折扣\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(promo(order) <span class=\"keyword\">for</span> promo <span class=\"keyword\">in</span> promos)</span><br></pre></td></tr></table></figure>\n<p>另一种方法是，在一个单独的模块(promotions.py)中保存所有策略函数，把best_promo排除在外。   </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promos = [func <span class=\"keyword\">for</span> name, func <span class=\"keyword\">in</span></span><br><span class=\"line\">            inspect.getmembers(promotions, inspect.isfunction)]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">best_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"选择可用的最佳折扣\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(promo(order) <span class=\"keyword\">for</span> promo <span class=\"keyword\">in</span> promos)</span><br></pre></td></tr></table></figure>\n<p>这个实现的缺陷是，promotions模块中的<strong>所有函数必须是策略函数</strong>，这种实现是强调模块内省的一种用途而不是提供完善的方案。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>使用一等对象实现策略模式的核心思想是:   </p>\n<blockquote>\n<p> 用”使用普通的函数”的方式代替”编写只有一个方法的类，再去实现另一个类声明的单函数接口”。将普通的函数作为可共享的对象。     </p>\n</blockquote>\n<p>上面的例子都是基于这一思想进行优化，并且处使用一等对象的特性(函数作为参数、模块内省)。</p>\n<p>下一篇我们会讲到命令模式，关于策略模式和命令模式的定义和场景，参见：<a href=\"https://github.com/aldslvda/readings/blob/master/Fluent-Python/6.%20Design%20Patterns%20with%20First-Class%20Functions/design-pattern-mentioned.md\" target=\"_blank\" rel=\"noopener\">关于设计模式：策略模式和命令模式</a></p>\n<p>（今天好高产<br><img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/17.png?raw=true\" alt></p>\n"},{"title":"网络是怎样连接的 第一章小记","date":"2017-11-28T17:02:23.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/hnc_logo.png?raw=true"],"toc":true,"comment":true,"_content":"\n## 网络是怎样连接的 ##\n### 一. 浏览器生成请求 -- 探索浏览器内部 ###\n\n#### 概览\n浏览器发出一个请求会经历下面四步：\n\n- 生成http请求消息\n- 向DNS服务器查询web服务器的IP（如果使用的是域名）\n- 全世界的DNS服务器接力使得ip查询顺利进行\n- 委托协议栈发送消息\n\n#### 生成http请求消息\n1. URL 统一资源定位符 由协议+地址+路径组成，开头部分决定了协议（“http:”“ftp:”“file:”“mailto:”）     \n2. 浏览器解析url是将它拆分解析的，如http请求的url,会拆分成http://, 域名/ip, 路径。     文件名为index.html/default.html时可以被省略。    \n3. HTTP的基本思路:**HTTP 协议定义了客户端和服务器之间交互的消息内容和步骤**，客户端发送的请求包含“对什么”（URI）进行什么样的操作(Method)\n![F1.1](https://github.com/aldslvda/blog-images/blob/master/H-N-C-1.1.png?raw=true)  \n收到HTTP请求后，服务器会根据Method和URI决定“对什么进行什么操作”，然后将结果放在响应消息中返回给客户端，浏览器对返回的消息做出展示，一次HTTP请求就完成了。\n4. 生成HTTP请求:   \nhttp消息在格式上有很严格的规定, 浏览器会按照规范生成请求。   \n请求消息的第一行称为请求行，这行开头的Method决定了\"作何种操作\"   \n请求消息一般分为三部分Request(请求行), HEADERS(消息头), BODY(消息体)   \n响应消息也分为三部分，分别是STATUS（状态行）, HEADERS(消息头), BODY(消息体)\n![F1.2](https://github.com/aldslvda/blog-images/blob/master/H-N-C-1.2.png?raw=true)  \n\n#### 向DNS服务器查询WEB服务器的IP\n1. 局域网和广域网都是基于TCP/IP的思路设计的，简单来说呢就是通过路由器的链接，将小的子网连接成一个大的网络。IP就是分配给计算机的地址。请求通过集线器(Hub)-路由器(Router)-Hub-Router...的方式传输到目的地址。   \n2. IP地址的网络号和主机号是由子网掩码决定的，子网掩码为0的部分是主机号, 1对应的位置为网络号。IP 地址的主机号全0表示整个子网，全1表示向子网上所有设备发送包，即“广播”。\n3. 域名的作用是方便人，但是路由器处理IP效率更高，所以有了折中的方案 —— DNS    \n4. 通过DNS 查询IP 地址的操作称为域名解析，因此负责执行解析（resolution）这一操作的就叫解析器（resolver）。DNS解析器包含在系统的socket库中。    \n调用解析器后，解析器会向DNS服务器发送查询消息，然后DNS 服务器会返回响应消息。响应消息中包含查询到的IP 地址，解析器会取出IP地址，并将其写入浏览器指定的内存地址中，这样就完成了一次域名解析。\n5.浏览器调用解析器时，解析器会委托系统内部的协议栈向DNS服务器发送请求，收到响应消息，解析器读取消息后完成解析，在这个过程中，DNS服务的IP地址也必须知道。\n\n#### 全世界DNS服务器的接力\n\n##### DNS服务器的基本工作\n来自客户端的查询含有三个信息\n\n- 域名 \n- Class  DNS设计之初为其他网络预留的字段，现在固定IN\n- 记录类型 \n\n|记录类型||作用|\n|----|---|-----|\n|A记录  |A（Address）|用来指定主机名（或域名）对应的IP地址记录。|\n|NS记录 | NS（Name Server）| 域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析。| \n|MX记录 |MX（Mail Exchanger）|邮件交换记录，它指向一个邮件服务器，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。|  \n|CNAME记录  |CNAME（Canonical Name ）| 别名记录，允许您将多个名字映射到同一台计算机。|\n|TXT记录 |TXT |一般指某个主机名或域名的说明|\n\nDNS 服务器的基本工作就是根据需要查询的域名和记录类型查找相关的记录，并向客户端返回响应消息。\n\n##### 域名的层次结构\n将全球的所有服务器信息保存在同一台DNS服务器上是不可能的，所以需要将信息分部保存在不同的服务器上。     \n1. DNS 服务器中的所有信息都是按照域名以分层次的结构来保存的，以点分隔不同层次，每一个层次称为一个域。\n2. DNS 服务器中，而每个域都是作为一个整体来处理的。一个DNS服务器能存放多个域，而一个域不能分开存放在不同服务器上。\n3. 互联网中的域通过创建下级的域来分配给不同的国家、公司和组织使用。   \n\n##### 寻找DNS服务器\n1. 最上级的域称为根域 用点表示，一般域名中可以省略\n2. 上级域名的服务器保存下级域名的服务器信息，逐级查询\n3. 另外将根域的服务器信息存在所有的DNS服务器中，这样所有的DNS服务器就能找到根域，在逐级往下查找。\n\n![F1.3](https://github.com/aldslvda/blog-images/blob/master/H-N-C-1.3.png?raw=true) \n\n##### 通过缓存加快DNS服务器的响应\n1. 如果要查询的域名和相关信息已经在缓存中，那么就可以直接返回响应，接下来的查询可以从缓存的位置开始向下进行。相比每次都从根域找起来说，缓存可以减少查询所需的时间。   \n2. 并且，当要查询的域名不存在时，“不存在”这一响应结果也会被缓存。这样，当下次查询这个不存在的域名时，也可以快速响应。\n3. 为了防止之前查询过的信息发生改变导致解析错误，缓存都有一段时间的有效期。\n\n#### 委托协议栈发送消息\n##### 数据收发操作概览\n要发送给Web 服务器的HTTP 消息是一种数字信息（digital data），因此也可以说是委托协议栈来发送数字信息。   \n使用Socket 库来收发数据的操作过程如图。简单来说，收发数据的两台计算机之间连接了一条数据通道，数据沿着这条通道流动，最终到达目的地。\n![F1.4](https://github.com/aldslvda/blog-images/blob/master/H-N-C-1.4.png?raw=true)   \n\n图中所示的通道需要通信双方事先建立, 建立管道的关键在于管道两端的数据出入口，称为套接字。   \n收发数据的操作分为若干个阶段:\n \n- 创建套接字阶段 —— 服务端先创造套接字，进入等待状态，客户端连接之前创建，为连接做准备\n- 连接阶段 —— 客户端将管道连接到服务端的套接字上\n- 通信阶段 —— 收发数据\n- 断开阶段 —— 由服务端或客户端发起，断开管道，删除套接字\n\n这些操作都是由网络应用委托协议栈进行的。\n\n##### 创建套接字阶段\n调用socket库创建套接字, 得到一个描述符（连接的唯一标识）\n\n##### 连接阶段，将管道联通\n调用Socket库中的connect组件进行连接， 需要传入3个参数\n\n- 描述符 ： 通过描述符使用特定的套接字进行连接\n- 服务器IP : 必要\n- 端口号： 同时指定IP和端口号时，就可以明确识别出服务端的套接字。\n\\* 如果说描述符是用来在一台计算机内部识别套接字的机制，那么端口号就是用来让通信的另一方能够识别出套接字的机制.\n\n总而言之，就是当调用connect 时，协议栈就会执行连接操作。当连接成功后，协议栈会将对方的IP 地址和端口号等信息保存在套接字中，这样我们就可以开始收发数据了。\n\n\n##### 通信阶段： 数据收发\n管道联通后，事情就变得简单了：将数据放入套接字，数据就会被发送到另一边的套接字。\n\n##### 断开阶段: 收发数据结束\nWeb 使用的HTTP 协议规定，当Web 服务器发送完响应消息之后，应该主动执行断开操作，因此Web 服务器会首先调用close 来断开连接。断开操作传达到客户端之后，客户端的套接字也会进入断开阶段。\nHTTP 1.1中也存在一次连接中收发多个请求和响应的方法，这种情况，当所有数据请求完后，由客户端断开连接。\n\n","source":"_posts/how-network-connects-1.md","raw":"title: 网络是怎样连接的 第一章小记\ndate: 2017-11-29 01:02:23\ntags:\n- http\n- socket\n- 网络是怎样连接的\ncategories:\n- 读书笔记\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/hnc_logo.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n## 网络是怎样连接的 ##\n### 一. 浏览器生成请求 -- 探索浏览器内部 ###\n\n#### 概览\n浏览器发出一个请求会经历下面四步：\n\n- 生成http请求消息\n- 向DNS服务器查询web服务器的IP（如果使用的是域名）\n- 全世界的DNS服务器接力使得ip查询顺利进行\n- 委托协议栈发送消息\n\n#### 生成http请求消息\n1. URL 统一资源定位符 由协议+地址+路径组成，开头部分决定了协议（“http:”“ftp:”“file:”“mailto:”）     \n2. 浏览器解析url是将它拆分解析的，如http请求的url,会拆分成http://, 域名/ip, 路径。     文件名为index.html/default.html时可以被省略。    \n3. HTTP的基本思路:**HTTP 协议定义了客户端和服务器之间交互的消息内容和步骤**，客户端发送的请求包含“对什么”（URI）进行什么样的操作(Method)\n![F1.1](https://github.com/aldslvda/blog-images/blob/master/H-N-C-1.1.png?raw=true)  \n收到HTTP请求后，服务器会根据Method和URI决定“对什么进行什么操作”，然后将结果放在响应消息中返回给客户端，浏览器对返回的消息做出展示，一次HTTP请求就完成了。\n4. 生成HTTP请求:   \nhttp消息在格式上有很严格的规定, 浏览器会按照规范生成请求。   \n请求消息的第一行称为请求行，这行开头的Method决定了\"作何种操作\"   \n请求消息一般分为三部分Request(请求行), HEADERS(消息头), BODY(消息体)   \n响应消息也分为三部分，分别是STATUS（状态行）, HEADERS(消息头), BODY(消息体)\n![F1.2](https://github.com/aldslvda/blog-images/blob/master/H-N-C-1.2.png?raw=true)  \n\n#### 向DNS服务器查询WEB服务器的IP\n1. 局域网和广域网都是基于TCP/IP的思路设计的，简单来说呢就是通过路由器的链接，将小的子网连接成一个大的网络。IP就是分配给计算机的地址。请求通过集线器(Hub)-路由器(Router)-Hub-Router...的方式传输到目的地址。   \n2. IP地址的网络号和主机号是由子网掩码决定的，子网掩码为0的部分是主机号, 1对应的位置为网络号。IP 地址的主机号全0表示整个子网，全1表示向子网上所有设备发送包，即“广播”。\n3. 域名的作用是方便人，但是路由器处理IP效率更高，所以有了折中的方案 —— DNS    \n4. 通过DNS 查询IP 地址的操作称为域名解析，因此负责执行解析（resolution）这一操作的就叫解析器（resolver）。DNS解析器包含在系统的socket库中。    \n调用解析器后，解析器会向DNS服务器发送查询消息，然后DNS 服务器会返回响应消息。响应消息中包含查询到的IP 地址，解析器会取出IP地址，并将其写入浏览器指定的内存地址中，这样就完成了一次域名解析。\n5.浏览器调用解析器时，解析器会委托系统内部的协议栈向DNS服务器发送请求，收到响应消息，解析器读取消息后完成解析，在这个过程中，DNS服务的IP地址也必须知道。\n\n#### 全世界DNS服务器的接力\n\n##### DNS服务器的基本工作\n来自客户端的查询含有三个信息\n\n- 域名 \n- Class  DNS设计之初为其他网络预留的字段，现在固定IN\n- 记录类型 \n\n|记录类型||作用|\n|----|---|-----|\n|A记录  |A（Address）|用来指定主机名（或域名）对应的IP地址记录。|\n|NS记录 | NS（Name Server）| 域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析。| \n|MX记录 |MX（Mail Exchanger）|邮件交换记录，它指向一个邮件服务器，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。|  \n|CNAME记录  |CNAME（Canonical Name ）| 别名记录，允许您将多个名字映射到同一台计算机。|\n|TXT记录 |TXT |一般指某个主机名或域名的说明|\n\nDNS 服务器的基本工作就是根据需要查询的域名和记录类型查找相关的记录，并向客户端返回响应消息。\n\n##### 域名的层次结构\n将全球的所有服务器信息保存在同一台DNS服务器上是不可能的，所以需要将信息分部保存在不同的服务器上。     \n1. DNS 服务器中的所有信息都是按照域名以分层次的结构来保存的，以点分隔不同层次，每一个层次称为一个域。\n2. DNS 服务器中，而每个域都是作为一个整体来处理的。一个DNS服务器能存放多个域，而一个域不能分开存放在不同服务器上。\n3. 互联网中的域通过创建下级的域来分配给不同的国家、公司和组织使用。   \n\n##### 寻找DNS服务器\n1. 最上级的域称为根域 用点表示，一般域名中可以省略\n2. 上级域名的服务器保存下级域名的服务器信息，逐级查询\n3. 另外将根域的服务器信息存在所有的DNS服务器中，这样所有的DNS服务器就能找到根域，在逐级往下查找。\n\n![F1.3](https://github.com/aldslvda/blog-images/blob/master/H-N-C-1.3.png?raw=true) \n\n##### 通过缓存加快DNS服务器的响应\n1. 如果要查询的域名和相关信息已经在缓存中，那么就可以直接返回响应，接下来的查询可以从缓存的位置开始向下进行。相比每次都从根域找起来说，缓存可以减少查询所需的时间。   \n2. 并且，当要查询的域名不存在时，“不存在”这一响应结果也会被缓存。这样，当下次查询这个不存在的域名时，也可以快速响应。\n3. 为了防止之前查询过的信息发生改变导致解析错误，缓存都有一段时间的有效期。\n\n#### 委托协议栈发送消息\n##### 数据收发操作概览\n要发送给Web 服务器的HTTP 消息是一种数字信息（digital data），因此也可以说是委托协议栈来发送数字信息。   \n使用Socket 库来收发数据的操作过程如图。简单来说，收发数据的两台计算机之间连接了一条数据通道，数据沿着这条通道流动，最终到达目的地。\n![F1.4](https://github.com/aldslvda/blog-images/blob/master/H-N-C-1.4.png?raw=true)   \n\n图中所示的通道需要通信双方事先建立, 建立管道的关键在于管道两端的数据出入口，称为套接字。   \n收发数据的操作分为若干个阶段:\n \n- 创建套接字阶段 —— 服务端先创造套接字，进入等待状态，客户端连接之前创建，为连接做准备\n- 连接阶段 —— 客户端将管道连接到服务端的套接字上\n- 通信阶段 —— 收发数据\n- 断开阶段 —— 由服务端或客户端发起，断开管道，删除套接字\n\n这些操作都是由网络应用委托协议栈进行的。\n\n##### 创建套接字阶段\n调用socket库创建套接字, 得到一个描述符（连接的唯一标识）\n\n##### 连接阶段，将管道联通\n调用Socket库中的connect组件进行连接， 需要传入3个参数\n\n- 描述符 ： 通过描述符使用特定的套接字进行连接\n- 服务器IP : 必要\n- 端口号： 同时指定IP和端口号时，就可以明确识别出服务端的套接字。\n\\* 如果说描述符是用来在一台计算机内部识别套接字的机制，那么端口号就是用来让通信的另一方能够识别出套接字的机制.\n\n总而言之，就是当调用connect 时，协议栈就会执行连接操作。当连接成功后，协议栈会将对方的IP 地址和端口号等信息保存在套接字中，这样我们就可以开始收发数据了。\n\n\n##### 通信阶段： 数据收发\n管道联通后，事情就变得简单了：将数据放入套接字，数据就会被发送到另一边的套接字。\n\n##### 断开阶段: 收发数据结束\nWeb 使用的HTTP 协议规定，当Web 服务器发送完响应消息之后，应该主动执行断开操作，因此Web 服务器会首先调用close 来断开连接。断开操作传达到客户端之后，客户端的套接字也会进入断开阶段。\nHTTP 1.1中也存在一次连接中收发多个请求和响应的方法，这种情况，当所有数据请求完后，由客户端断开连接。\n\n","slug":"how-network-connects-1","published":1,"updated":"2019-04-25T01:27:24.856Z","comments":1,"layout":"post","link":"","_id":"cjuw5c6gn003rdhyffderc9bm","content":"<h2 id=\"网络是怎样连接的\"><a href=\"#网络是怎样连接的\" class=\"headerlink\" title=\"网络是怎样连接的\"></a>网络是怎样连接的</h2><h3 id=\"一-浏览器生成请求-–-探索浏览器内部\"><a href=\"#一-浏览器生成请求-–-探索浏览器内部\" class=\"headerlink\" title=\"一. 浏览器生成请求 – 探索浏览器内部\"></a>一. 浏览器生成请求 – 探索浏览器内部</h3><h4 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h4><p>浏览器发出一个请求会经历下面四步：</p>\n<ul>\n<li>生成http请求消息</li>\n<li>向DNS服务器查询web服务器的IP（如果使用的是域名）</li>\n<li>全世界的DNS服务器接力使得ip查询顺利进行</li>\n<li>委托协议栈发送消息</li>\n</ul>\n<h4 id=\"生成http请求消息\"><a href=\"#生成http请求消息\" class=\"headerlink\" title=\"生成http请求消息\"></a>生成http请求消息</h4><ol>\n<li>URL 统一资源定位符 由协议+地址+路径组成，开头部分决定了协议（“http:”“ftp:”“file:”“mailto:”）     </li>\n<li>浏览器解析url是将它拆分解析的，如http请求的url,会拆分成http://, 域名/ip, 路径。     文件名为index.html/default.html时可以被省略。    </li>\n<li>HTTP的基本思路:<strong>HTTP 协议定义了客户端和服务器之间交互的消息内容和步骤</strong>，客户端发送的请求包含“对什么”（URI）进行什么样的操作(Method)<br><img src=\"https://github.com/aldslvda/blog-images/blob/master/H-N-C-1.1.png?raw=true\" alt=\"F1.1\"><br>收到HTTP请求后，服务器会根据Method和URI决定“对什么进行什么操作”，然后将结果放在响应消息中返回给客户端，浏览器对返回的消息做出展示，一次HTTP请求就完成了。</li>\n<li>生成HTTP请求:<br>http消息在格式上有很严格的规定, 浏览器会按照规范生成请求。<br>请求消息的第一行称为请求行，这行开头的Method决定了”作何种操作”<br>请求消息一般分为三部分Request(请求行), HEADERS(消息头), BODY(消息体)<br>响应消息也分为三部分，分别是STATUS（状态行）, HEADERS(消息头), BODY(消息体)<br><img src=\"https://github.com/aldslvda/blog-images/blob/master/H-N-C-1.2.png?raw=true\" alt=\"F1.2\">  </li>\n</ol>\n<h4 id=\"向DNS服务器查询WEB服务器的IP\"><a href=\"#向DNS服务器查询WEB服务器的IP\" class=\"headerlink\" title=\"向DNS服务器查询WEB服务器的IP\"></a>向DNS服务器查询WEB服务器的IP</h4><ol>\n<li>局域网和广域网都是基于TCP/IP的思路设计的，简单来说呢就是通过路由器的链接，将小的子网连接成一个大的网络。IP就是分配给计算机的地址。请求通过集线器(Hub)-路由器(Router)-Hub-Router…的方式传输到目的地址。   </li>\n<li>IP地址的网络号和主机号是由子网掩码决定的，子网掩码为0的部分是主机号, 1对应的位置为网络号。IP 地址的主机号全0表示整个子网，全1表示向子网上所有设备发送包，即“广播”。</li>\n<li>域名的作用是方便人，但是路由器处理IP效率更高，所以有了折中的方案 —— DNS    </li>\n<li>通过DNS 查询IP 地址的操作称为域名解析，因此负责执行解析（resolution）这一操作的就叫解析器（resolver）。DNS解析器包含在系统的socket库中。<br>调用解析器后，解析器会向DNS服务器发送查询消息，然后DNS 服务器会返回响应消息。响应消息中包含查询到的IP 地址，解析器会取出IP地址，并将其写入浏览器指定的内存地址中，这样就完成了一次域名解析。<br>5.浏览器调用解析器时，解析器会委托系统内部的协议栈向DNS服务器发送请求，收到响应消息，解析器读取消息后完成解析，在这个过程中，DNS服务的IP地址也必须知道。</li>\n</ol>\n<h4 id=\"全世界DNS服务器的接力\"><a href=\"#全世界DNS服务器的接力\" class=\"headerlink\" title=\"全世界DNS服务器的接力\"></a>全世界DNS服务器的接力</h4><h5 id=\"DNS服务器的基本工作\"><a href=\"#DNS服务器的基本工作\" class=\"headerlink\" title=\"DNS服务器的基本工作\"></a>DNS服务器的基本工作</h5><p>来自客户端的查询含有三个信息</p>\n<ul>\n<li>域名 </li>\n<li>Class  DNS设计之初为其他网络预留的字段，现在固定IN</li>\n<li>记录类型 </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>记录类型</th>\n<th></th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A记录</td>\n<td>A（Address）</td>\n<td>用来指定主机名（或域名）对应的IP地址记录。</td>\n</tr>\n<tr>\n<td>NS记录</td>\n<td>NS（Name Server）</td>\n<td>域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析。</td>\n</tr>\n<tr>\n<td>MX记录</td>\n<td>MX（Mail Exchanger）</td>\n<td>邮件交换记录，它指向一个邮件服务器，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。</td>\n</tr>\n<tr>\n<td>CNAME记录</td>\n<td>CNAME（Canonical Name ）</td>\n<td>别名记录，允许您将多个名字映射到同一台计算机。</td>\n</tr>\n<tr>\n<td>TXT记录</td>\n<td>TXT</td>\n<td>一般指某个主机名或域名的说明</td>\n</tr>\n</tbody>\n</table>\n<p>DNS 服务器的基本工作就是根据需要查询的域名和记录类型查找相关的记录，并向客户端返回响应消息。</p>\n<h5 id=\"域名的层次结构\"><a href=\"#域名的层次结构\" class=\"headerlink\" title=\"域名的层次结构\"></a>域名的层次结构</h5><p>将全球的所有服务器信息保存在同一台DNS服务器上是不可能的，所以需要将信息分部保存在不同的服务器上。     </p>\n<ol>\n<li>DNS 服务器中的所有信息都是按照域名以分层次的结构来保存的，以点分隔不同层次，每一个层次称为一个域。</li>\n<li>DNS 服务器中，而每个域都是作为一个整体来处理的。一个DNS服务器能存放多个域，而一个域不能分开存放在不同服务器上。</li>\n<li>互联网中的域通过创建下级的域来分配给不同的国家、公司和组织使用。   </li>\n</ol>\n<h5 id=\"寻找DNS服务器\"><a href=\"#寻找DNS服务器\" class=\"headerlink\" title=\"寻找DNS服务器\"></a>寻找DNS服务器</h5><ol>\n<li>最上级的域称为根域 用点表示，一般域名中可以省略</li>\n<li>上级域名的服务器保存下级域名的服务器信息，逐级查询</li>\n<li>另外将根域的服务器信息存在所有的DNS服务器中，这样所有的DNS服务器就能找到根域，在逐级往下查找。</li>\n</ol>\n<p><img src=\"https://github.com/aldslvda/blog-images/blob/master/H-N-C-1.3.png?raw=true\" alt=\"F1.3\"> </p>\n<h5 id=\"通过缓存加快DNS服务器的响应\"><a href=\"#通过缓存加快DNS服务器的响应\" class=\"headerlink\" title=\"通过缓存加快DNS服务器的响应\"></a>通过缓存加快DNS服务器的响应</h5><ol>\n<li>如果要查询的域名和相关信息已经在缓存中，那么就可以直接返回响应，接下来的查询可以从缓存的位置开始向下进行。相比每次都从根域找起来说，缓存可以减少查询所需的时间。   </li>\n<li>并且，当要查询的域名不存在时，“不存在”这一响应结果也会被缓存。这样，当下次查询这个不存在的域名时，也可以快速响应。</li>\n<li>为了防止之前查询过的信息发生改变导致解析错误，缓存都有一段时间的有效期。</li>\n</ol>\n<h4 id=\"委托协议栈发送消息\"><a href=\"#委托协议栈发送消息\" class=\"headerlink\" title=\"委托协议栈发送消息\"></a>委托协议栈发送消息</h4><h5 id=\"数据收发操作概览\"><a href=\"#数据收发操作概览\" class=\"headerlink\" title=\"数据收发操作概览\"></a>数据收发操作概览</h5><p>要发送给Web 服务器的HTTP 消息是一种数字信息（digital data），因此也可以说是委托协议栈来发送数字信息。<br>使用Socket 库来收发数据的操作过程如图。简单来说，收发数据的两台计算机之间连接了一条数据通道，数据沿着这条通道流动，最终到达目的地。<br><img src=\"https://github.com/aldslvda/blog-images/blob/master/H-N-C-1.4.png?raw=true\" alt=\"F1.4\">   </p>\n<p>图中所示的通道需要通信双方事先建立, 建立管道的关键在于管道两端的数据出入口，称为套接字。<br>收发数据的操作分为若干个阶段:</p>\n<ul>\n<li>创建套接字阶段 —— 服务端先创造套接字，进入等待状态，客户端连接之前创建，为连接做准备</li>\n<li>连接阶段 —— 客户端将管道连接到服务端的套接字上</li>\n<li>通信阶段 —— 收发数据</li>\n<li>断开阶段 —— 由服务端或客户端发起，断开管道，删除套接字</li>\n</ul>\n<p>这些操作都是由网络应用委托协议栈进行的。</p>\n<h5 id=\"创建套接字阶段\"><a href=\"#创建套接字阶段\" class=\"headerlink\" title=\"创建套接字阶段\"></a>创建套接字阶段</h5><p>调用socket库创建套接字, 得到一个描述符（连接的唯一标识）</p>\n<h5 id=\"连接阶段，将管道联通\"><a href=\"#连接阶段，将管道联通\" class=\"headerlink\" title=\"连接阶段，将管道联通\"></a>连接阶段，将管道联通</h5><p>调用Socket库中的connect组件进行连接， 需要传入3个参数</p>\n<ul>\n<li>描述符 ： 通过描述符使用特定的套接字进行连接</li>\n<li>服务器IP : 必要</li>\n<li>端口号： 同时指定IP和端口号时，就可以明确识别出服务端的套接字。<br>* 如果说描述符是用来在一台计算机内部识别套接字的机制，那么端口号就是用来让通信的另一方能够识别出套接字的机制.</li>\n</ul>\n<p>总而言之，就是当调用connect 时，协议栈就会执行连接操作。当连接成功后，协议栈会将对方的IP 地址和端口号等信息保存在套接字中，这样我们就可以开始收发数据了。</p>\n<h5 id=\"通信阶段：-数据收发\"><a href=\"#通信阶段：-数据收发\" class=\"headerlink\" title=\"通信阶段： 数据收发\"></a>通信阶段： 数据收发</h5><p>管道联通后，事情就变得简单了：将数据放入套接字，数据就会被发送到另一边的套接字。</p>\n<h5 id=\"断开阶段-收发数据结束\"><a href=\"#断开阶段-收发数据结束\" class=\"headerlink\" title=\"断开阶段: 收发数据结束\"></a>断开阶段: 收发数据结束</h5><p>Web 使用的HTTP 协议规定，当Web 服务器发送完响应消息之后，应该主动执行断开操作，因此Web 服务器会首先调用close 来断开连接。断开操作传达到客户端之后，客户端的套接字也会进入断开阶段。<br>HTTP 1.1中也存在一次连接中收发多个请求和响应的方法，这种情况，当所有数据请求完后，由客户端断开连接。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"网络是怎样连接的\"><a href=\"#网络是怎样连接的\" class=\"headerlink\" title=\"网络是怎样连接的\"></a>网络是怎样连接的</h2><h3 id=\"一-浏览器生成请求-–-探索浏览器内部\"><a href=\"#一-浏览器生成请求-–-探索浏览器内部\" class=\"headerlink\" title=\"一. 浏览器生成请求 – 探索浏览器内部\"></a>一. 浏览器生成请求 – 探索浏览器内部</h3><h4 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h4><p>浏览器发出一个请求会经历下面四步：</p>\n<ul>\n<li>生成http请求消息</li>\n<li>向DNS服务器查询web服务器的IP（如果使用的是域名）</li>\n<li>全世界的DNS服务器接力使得ip查询顺利进行</li>\n<li>委托协议栈发送消息</li>\n</ul>\n<h4 id=\"生成http请求消息\"><a href=\"#生成http请求消息\" class=\"headerlink\" title=\"生成http请求消息\"></a>生成http请求消息</h4><ol>\n<li>URL 统一资源定位符 由协议+地址+路径组成，开头部分决定了协议（“http:”“ftp:”“file:”“mailto:”）     </li>\n<li>浏览器解析url是将它拆分解析的，如http请求的url,会拆分成http://, 域名/ip, 路径。     文件名为index.html/default.html时可以被省略。    </li>\n<li>HTTP的基本思路:<strong>HTTP 协议定义了客户端和服务器之间交互的消息内容和步骤</strong>，客户端发送的请求包含“对什么”（URI）进行什么样的操作(Method)<br><img src=\"https://github.com/aldslvda/blog-images/blob/master/H-N-C-1.1.png?raw=true\" alt=\"F1.1\"><br>收到HTTP请求后，服务器会根据Method和URI决定“对什么进行什么操作”，然后将结果放在响应消息中返回给客户端，浏览器对返回的消息做出展示，一次HTTP请求就完成了。</li>\n<li>生成HTTP请求:<br>http消息在格式上有很严格的规定, 浏览器会按照规范生成请求。<br>请求消息的第一行称为请求行，这行开头的Method决定了”作何种操作”<br>请求消息一般分为三部分Request(请求行), HEADERS(消息头), BODY(消息体)<br>响应消息也分为三部分，分别是STATUS（状态行）, HEADERS(消息头), BODY(消息体)<br><img src=\"https://github.com/aldslvda/blog-images/blob/master/H-N-C-1.2.png?raw=true\" alt=\"F1.2\">  </li>\n</ol>\n<h4 id=\"向DNS服务器查询WEB服务器的IP\"><a href=\"#向DNS服务器查询WEB服务器的IP\" class=\"headerlink\" title=\"向DNS服务器查询WEB服务器的IP\"></a>向DNS服务器查询WEB服务器的IP</h4><ol>\n<li>局域网和广域网都是基于TCP/IP的思路设计的，简单来说呢就是通过路由器的链接，将小的子网连接成一个大的网络。IP就是分配给计算机的地址。请求通过集线器(Hub)-路由器(Router)-Hub-Router…的方式传输到目的地址。   </li>\n<li>IP地址的网络号和主机号是由子网掩码决定的，子网掩码为0的部分是主机号, 1对应的位置为网络号。IP 地址的主机号全0表示整个子网，全1表示向子网上所有设备发送包，即“广播”。</li>\n<li>域名的作用是方便人，但是路由器处理IP效率更高，所以有了折中的方案 —— DNS    </li>\n<li>通过DNS 查询IP 地址的操作称为域名解析，因此负责执行解析（resolution）这一操作的就叫解析器（resolver）。DNS解析器包含在系统的socket库中。<br>调用解析器后，解析器会向DNS服务器发送查询消息，然后DNS 服务器会返回响应消息。响应消息中包含查询到的IP 地址，解析器会取出IP地址，并将其写入浏览器指定的内存地址中，这样就完成了一次域名解析。<br>5.浏览器调用解析器时，解析器会委托系统内部的协议栈向DNS服务器发送请求，收到响应消息，解析器读取消息后完成解析，在这个过程中，DNS服务的IP地址也必须知道。</li>\n</ol>\n<h4 id=\"全世界DNS服务器的接力\"><a href=\"#全世界DNS服务器的接力\" class=\"headerlink\" title=\"全世界DNS服务器的接力\"></a>全世界DNS服务器的接力</h4><h5 id=\"DNS服务器的基本工作\"><a href=\"#DNS服务器的基本工作\" class=\"headerlink\" title=\"DNS服务器的基本工作\"></a>DNS服务器的基本工作</h5><p>来自客户端的查询含有三个信息</p>\n<ul>\n<li>域名 </li>\n<li>Class  DNS设计之初为其他网络预留的字段，现在固定IN</li>\n<li>记录类型 </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>记录类型</th>\n<th></th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A记录</td>\n<td>A（Address）</td>\n<td>用来指定主机名（或域名）对应的IP地址记录。</td>\n</tr>\n<tr>\n<td>NS记录</td>\n<td>NS（Name Server）</td>\n<td>域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析。</td>\n</tr>\n<tr>\n<td>MX记录</td>\n<td>MX（Mail Exchanger）</td>\n<td>邮件交换记录，它指向一个邮件服务器，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。</td>\n</tr>\n<tr>\n<td>CNAME记录</td>\n<td>CNAME（Canonical Name ）</td>\n<td>别名记录，允许您将多个名字映射到同一台计算机。</td>\n</tr>\n<tr>\n<td>TXT记录</td>\n<td>TXT</td>\n<td>一般指某个主机名或域名的说明</td>\n</tr>\n</tbody>\n</table>\n<p>DNS 服务器的基本工作就是根据需要查询的域名和记录类型查找相关的记录，并向客户端返回响应消息。</p>\n<h5 id=\"域名的层次结构\"><a href=\"#域名的层次结构\" class=\"headerlink\" title=\"域名的层次结构\"></a>域名的层次结构</h5><p>将全球的所有服务器信息保存在同一台DNS服务器上是不可能的，所以需要将信息分部保存在不同的服务器上。     </p>\n<ol>\n<li>DNS 服务器中的所有信息都是按照域名以分层次的结构来保存的，以点分隔不同层次，每一个层次称为一个域。</li>\n<li>DNS 服务器中，而每个域都是作为一个整体来处理的。一个DNS服务器能存放多个域，而一个域不能分开存放在不同服务器上。</li>\n<li>互联网中的域通过创建下级的域来分配给不同的国家、公司和组织使用。   </li>\n</ol>\n<h5 id=\"寻找DNS服务器\"><a href=\"#寻找DNS服务器\" class=\"headerlink\" title=\"寻找DNS服务器\"></a>寻找DNS服务器</h5><ol>\n<li>最上级的域称为根域 用点表示，一般域名中可以省略</li>\n<li>上级域名的服务器保存下级域名的服务器信息，逐级查询</li>\n<li>另外将根域的服务器信息存在所有的DNS服务器中，这样所有的DNS服务器就能找到根域，在逐级往下查找。</li>\n</ol>\n<p><img src=\"https://github.com/aldslvda/blog-images/blob/master/H-N-C-1.3.png?raw=true\" alt=\"F1.3\"> </p>\n<h5 id=\"通过缓存加快DNS服务器的响应\"><a href=\"#通过缓存加快DNS服务器的响应\" class=\"headerlink\" title=\"通过缓存加快DNS服务器的响应\"></a>通过缓存加快DNS服务器的响应</h5><ol>\n<li>如果要查询的域名和相关信息已经在缓存中，那么就可以直接返回响应，接下来的查询可以从缓存的位置开始向下进行。相比每次都从根域找起来说，缓存可以减少查询所需的时间。   </li>\n<li>并且，当要查询的域名不存在时，“不存在”这一响应结果也会被缓存。这样，当下次查询这个不存在的域名时，也可以快速响应。</li>\n<li>为了防止之前查询过的信息发生改变导致解析错误，缓存都有一段时间的有效期。</li>\n</ol>\n<h4 id=\"委托协议栈发送消息\"><a href=\"#委托协议栈发送消息\" class=\"headerlink\" title=\"委托协议栈发送消息\"></a>委托协议栈发送消息</h4><h5 id=\"数据收发操作概览\"><a href=\"#数据收发操作概览\" class=\"headerlink\" title=\"数据收发操作概览\"></a>数据收发操作概览</h5><p>要发送给Web 服务器的HTTP 消息是一种数字信息（digital data），因此也可以说是委托协议栈来发送数字信息。<br>使用Socket 库来收发数据的操作过程如图。简单来说，收发数据的两台计算机之间连接了一条数据通道，数据沿着这条通道流动，最终到达目的地。<br><img src=\"https://github.com/aldslvda/blog-images/blob/master/H-N-C-1.4.png?raw=true\" alt=\"F1.4\">   </p>\n<p>图中所示的通道需要通信双方事先建立, 建立管道的关键在于管道两端的数据出入口，称为套接字。<br>收发数据的操作分为若干个阶段:</p>\n<ul>\n<li>创建套接字阶段 —— 服务端先创造套接字，进入等待状态，客户端连接之前创建，为连接做准备</li>\n<li>连接阶段 —— 客户端将管道连接到服务端的套接字上</li>\n<li>通信阶段 —— 收发数据</li>\n<li>断开阶段 —— 由服务端或客户端发起，断开管道，删除套接字</li>\n</ul>\n<p>这些操作都是由网络应用委托协议栈进行的。</p>\n<h5 id=\"创建套接字阶段\"><a href=\"#创建套接字阶段\" class=\"headerlink\" title=\"创建套接字阶段\"></a>创建套接字阶段</h5><p>调用socket库创建套接字, 得到一个描述符（连接的唯一标识）</p>\n<h5 id=\"连接阶段，将管道联通\"><a href=\"#连接阶段，将管道联通\" class=\"headerlink\" title=\"连接阶段，将管道联通\"></a>连接阶段，将管道联通</h5><p>调用Socket库中的connect组件进行连接， 需要传入3个参数</p>\n<ul>\n<li>描述符 ： 通过描述符使用特定的套接字进行连接</li>\n<li>服务器IP : 必要</li>\n<li>端口号： 同时指定IP和端口号时，就可以明确识别出服务端的套接字。<br>* 如果说描述符是用来在一台计算机内部识别套接字的机制，那么端口号就是用来让通信的另一方能够识别出套接字的机制.</li>\n</ul>\n<p>总而言之，就是当调用connect 时，协议栈就会执行连接操作。当连接成功后，协议栈会将对方的IP 地址和端口号等信息保存在套接字中，这样我们就可以开始收发数据了。</p>\n<h5 id=\"通信阶段：-数据收发\"><a href=\"#通信阶段：-数据收发\" class=\"headerlink\" title=\"通信阶段： 数据收发\"></a>通信阶段： 数据收发</h5><p>管道联通后，事情就变得简单了：将数据放入套接字，数据就会被发送到另一边的套接字。</p>\n<h5 id=\"断开阶段-收发数据结束\"><a href=\"#断开阶段-收发数据结束\" class=\"headerlink\" title=\"断开阶段: 收发数据结束\"></a>断开阶段: 收发数据结束</h5><p>Web 使用的HTTP 协议规定，当Web 服务器发送完响应消息之后，应该主动执行断开操作，因此Web 服务器会首先调用close 来断开连接。断开操作传达到客户端之后，客户端的套接字也会进入断开阶段。<br>HTTP 1.1中也存在一次连接中收发多个请求和响应的方法，这种情况，当所有数据请求完后，由客户端断开连接。</p>\n"},{"title":"使用scrapy搭建一个简单的新闻爬虫","date":"2017-11-23T17:01:43.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/scrapylogo.png?raw=true"],"toc":true,"comment":true,"_content":"\n\n# 使用scrapy搭建一个简单的新闻爬虫 #\n\n前段时间面了几家公司的爬虫工程师岗位。所有的公司都会问的一个问题就是: 你使用过哪种爬虫框架？熟练度如何？是否能根据需求修改框架源码？有过分布式爬取的经验吗？    \n每次我遇到这种问题都感到很尴尬 —— 现在主流的爬虫框架大概有Scrapy, PySpider(Python); Nutch, Heritrix(Java) —— 这些我一个都没用过, 目前在线上运行的爬虫全是 requests + json/html/xml 解析。![1](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/11.png?raw=true)    \n至于分布式爬虫, 由于我目前接触的项目爬取量比较小(200+新闻app，300+新闻媒体微信公众号，300+微博的每日增量爬取), 每天的爬取量一台1核/1G/1M的阿里云足够胜任了, 暂时还用不到分布式爬取......![1](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/01.png?raw=true)\n\n另外分布式爬取大多依赖上面提到的框架。\n\n所以我做了一个很艰难的决定！把之前写过的爬虫！用scrapy重新实现一遍！![1](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/1010.png?raw=true)\n\n......   \n......   \n......   \n\n好吧，的确有点艰难......\n\n所以先从其中一个开始吧![1](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/1015.png?raw=true)。\n\n下面会讲到如何使用scrapy 编写一个网易新闻app的爬虫。\n\n**\\*** 我选择了一本参考书籍 《learning scrapy》, 但是这本书爬取的示例网站需要翻墙，所以我只看了框架相关的部分，实际网页解析之类的事情，在修改之前的爬虫的过程中解决。\n\n## 1. 环境配置 ##\n我开发使用电脑的是Mac OSX, 但其实在实际的Python开发中, OSX使用的命令和ubuntu/debian大同小异。    \n\n- 安装scrapy\n\n```bash\nsudo pip install scrapy\n```\n\n- 创建工程文件夹\n\n```bash\nscrapy startproject crawler\ntree crawler\n.\n├── crawler\n│   ├── __init__.py\n│   ├── items.py\n│   ├── middlewares.py\n│   ├── pipelines.py\n│   ├── settings.py\n│   └── spiders\n│       └── __init__.py\n└── scrapy.cfg\n```\nscrapy startproject crawler 这行命令创建了一个新的工程文件夹，文件夹的结构使用tree命令展示出来了。     \n这些文件的主要作用:   \n\n(1) scrapy.cfg 项目的配置文件   \n(2) crawler/ :Python代码存放的位置   \n(3) crawler/items.py: items文件，定义一个(或多个)item的属性   \n(4) crawler/pipelines: 项目的管道文件。\n> 在scrapy的官方文档中，pipeline的作用是：   \n   1. 清洗html数据；   \n\t2. 验证已经爬取的数据(检查item是否有特定属性)；   \n\t3. 去重；   \n\t4. 将爬取的item存进数据库。   \n\n(5) crawler/settings.py 配置文件   \n(6) crawler/spiders/ :爬虫文件的目录   \n\n## 2. 爬虫的编写 ##\n\n### 2.1 定义Item ###\n简单来说，item的作用是装载抓取到的数据，是一种类似字典的容器。它的属性都会定义为scrapy.item.Field对象。\n\n由于我们要写的是一个爬取新闻的app, 首先要明确的是我们需要的数据是什么，对于一个爬虫来说, 重要的是能否**取我所需**, 而不是尽我所能爬取对应网站的所有数据。\n那么对于一个新闻爬虫，我们爬到的每一条新闻都需要一些什么样的数据呢？   \n\n-    category 新闻类型(按照包含的媒体 分为图片/视频)    \n-    source\\_type  新闻来源的类型(app, 微博, 微信, 网站, 电子报 etc.)   \n-    source\\_name  新闻来源的名称\n-    news_sign     一条新闻的唯一标识(可以用于去重)\n-    views         浏览量\n-    title         标题\n-    url           新闻链接\n-    publish_time  发布时间\n-    text          新闻文本\n-    images        新闻图片的列表\n\n以上就是我们需要的一些数据，我们按照上面的列表定义一个item\n\n```python\nfrom scrapy.item import Item, Field\n\nclass NewsCrawlerItem(Item):\n    category = Field()\n    source_type = Field()\n    source_name = Field()\n\n    news_sign = Field()\n    views = Field()\n    title = Field()\n    url = Field()\n    publish_time = Field()\n    text = Field()\n    images = Field()\n```\n\n### 2.2 编写爬虫 ###\nSpider是爬虫的核心部分，用于从一个(或一系列)网站爬取数据。\n要建立一个Spider，你必须为scrapy.spider.BaseSpider创建一个子类，并确定三个主要的、强制的属性：\n- name 爬虫名称，必须是唯一的\n- start_urls 起始页面\n- parse() 解析爬取到的数据所用的方法, 接受的唯一参数是scrapy.Request方法请求得到的Response对象\n\n#### 2.2.1 关于二维爬取 ####\n一个典型的爬虫在两个方向移动：\n- 水平方向：从一个索引页到另一个索引页\n- 垂直方向：从索引页面到下一级页面(可能是下一级的索引，或者内容页面)\n\n这个例子中水平方向是网易新闻的一页新闻到另一页，它返回的是一个个的新闻列表；   \n垂直方向是从新闻列表逐个进入新闻的内容界面\n\n#### 2.2.2 关于从网页(或者HTTP请求的Response Body)中提取数据 ####\n- html 网页的数据可以用 beautifusoup/xpath/正则 提取\n- json 直接解析成Python的字典即可\n- xml  python也有对应的库用于解析   \n\n本文的爬虫会用到json和html解析，这里html使用xpath解析。\n\n#### 2.2.3 一个网易新闻app的Spider ####\n\n```python\n#coding:utf-8\nimport datetime\nimport socket\nimport json\nimport scrapy\nimport urlparse\n\nfrom scrapy.loader.processors import MapCompose, Join\nfrom scrapy.loader import ItemLoader\nfrom scrapy.http import Request\n\nfrom news_crawler.items import NewsCrawlerItem\n\nclass BasicSpider(scrapy.Spider):\n    name = \"netease\"\n    allowed_domains = [\"163.com\"]\n    # Start on the first index page\n    chls = [\n        \"T1370583240249\",  \"T1348649145984\",  \"T1348647909107\",  \"T1348648037603\",  \n        \"T1368497029546\",  \"T1348648141035\",  \"T1474271789612\",  \"T1467284926140\",  \n        \"T1492136373327\",  \"T1348648517839\",  \"T1348648650048\",  \"T1498701411149\",  \n        \"T1348648756099\",  \"T1473054348939\",  \"T1356600029035\",  \"T1348649079062\",  \n        \"T1348649503389\",  \"T1348649176279\",  \"T1348649475931\",  \"T1411113472760\",  \n        \"T1486979691117\",  \"T1348649580692\",  \"T1348649654285\",  \"T1348649776727\",  \n        \"T1350383429665\",  \"T1421997195219\",  \"T1456394562871\",  \"T1348654060988\",  \n        \"T1348654085632\",  \"T1491816738487\",  \"T1348654105308\",  \"T1348654151579\",  \n        \"T1348654204705\",  \"T1414389941036\",  \"T1401272877187\",  \"T1385429690972\",  \n        \"T1348654225495\",  \"T1397116135282\",  \"T1444270454635\",  \"T1481105123675\",  \n        \"T1503456682313\",  \"T1464592736048\",  \"T1504171773862\",  \"T1348650593803\",  \n        \"T1348650839000\",  \"T1414142214384\",  \"T1441074311424\",  \"T1482470888760\",  \n        \"T1499853820829\",  \"T1509504918215\",  \"T1502955728035\",  \"T1509448512433\",  \n        \"T1419315959525\",  \"T1419316284722\",  \"T1419316384474\",  \"T1419316531256\",  \n        \"T1427878984398\",  \"T1433137697241\",  \"T1449126525962\",  \"T1456112189138\",  \n        \"T1493374039495\",  \"T1456112438822\",  \"T1468031118349\",  \"T1488432440430\",  \n        \"T1488432474929\",  \"T1504689350701\"\n    ]\n    start_urls = (\n        'http://c.m.163.com/nc/article/list/%s/0-20.html'%chlid for chlid in chls\n    )\n    def parse(self, response):\n        # Get the next index URLs and yield Requests\n        url_spl = response.url.split('/')\n        chl_url = '/'.join(url_spl[:-1])\n        chl_id = url_spl[-2]\n        items = json.loads(response.body)[chl_id]\n        # Get item URLs and yield Requests\n        for item in items:\n            if 'url_3w' in item and item['url_3w']:\n                news_url = item['url_3w']\n                if '_mobile' not in news_url and '3g.163.com' not in news_url:\n                    news_url = news_url.replace('.html', '_mobile.html')\n                yield Request(news_url, callback=self.parse_item, dont_filter=True)\n        if len(items) == 20:\n            page_num = int(url_spl[-1].split('-')[0]) /20 + 1\n            yield Request(chl_url+'/%d-%d.html'%(page_num*20, page_num*20+20), callback=self.parse, dont_filter=True)\n\n\n\n    def parse_item(self, response):\n        \"\"\" This function parses a netease page.\n        @returns item\n        @scrapes category source_type source_name news_sign views title url publish_time text images\n        \"\"\"\n\n        # Create the loader using the response\n        \n        item = NewsCrawlerItem()\n        item['category'] = 'image'\n        item['source_type'] = 'app'\n        item['source_name'] = self.name\n        item['news_sign'] = ''\n        item['views'] = 0\n        item['url'] = response.url\n        item['title'] = response.xpath('//h1/text()').extract()[0]\n        # Load fields using XPath expressions\n        if '3g.163.com' in response.url:\n            item['publish_time'] = response.xpath('//*[@property=\"article:published_time\"]/@content').extract()[0][:19].replace('T','')\n            item['text'] = ''.join(response.xpath('//*[@class=\"content\"]//p/text()').extract())\n            item['images'] = response.xpath('//*[@class=\"content\"]//img/@src').extract()\n            item['news_sign'] = 'netease'+response.xpath('//article/@id').extract()[0]\n        else:\n            item['publish_time'] = response.xpath('//*[@id=\"articleBody\"]/div[1]/span[1]/text()').extract()[0]\n            item['text'] = ''.join(response.xpath('//*[@class=\"article-body\"]//p/text()').extract())\n            item['images'] = response.xpath('//*[@class=\"article-body\"]//img/@src').extract()\n            item['news_sign'] = 'netease'+response.xpath('//*[@id=\"docId\"]/@value').extract()[0]\n        return item\n```\n\n#### 2.2.4 爬虫代码代码的解析 ####\n上面提到过parse接受response作为参数。\n这里重点说一下parse()方法中的两个生成器yeild,分别代表了垂直爬取和水平爬取。\n首先说一下Request对象:\n\n```python\nclass Request(object_ref):\n\n    def __init__(self, url, callback=None, method='GET', headers=None, body=None,\n                 cookies=None, meta=None, encoding='utf-8', priority=0,\n                 dont_filter=False, errback=None, flags=None):\n```\n\n这里我们使用到了3个参数,url,callback,dont\\_filter。\n我们第一次使用yeild是请求新闻的内容页面，这里的回调函数是parse\\_item()，用来提取单个新闻的信息;    \n第二次使用yeild是请求“下一页”的数据，这里的回调函数是parse(),当然从scrapy的官方文档来看，这里不传callback的话，默认的回调函数也是parse(),这样下一页的数据也会再一次通过parse()解析，实现水平方向上的爬取。\ndont\\_filter是告诉Request不要对url进行过滤(去重)\n\n下面的parse\\_item()就是html的解析了，这里不赘述。\n\n\n\n## 3 爬取到的数据存储 ##\n这里我们用mongoDb对爬取到的数据进行存储。\n### 3.1 配置MongoDB信息 ###\n在settings.py中设置MongoDB的信息\n\n```python\n# MongoDB settings\nMONGODB_SERVER = \"$mongo_server\"\nMONGODB_PORT = 27017\nMONGODB_DB = \"news\"\nMONGODB_COLLECTION = \"news_item\"\n\n```\n这里server的ip隐去了\n### 3.2 编写MongoDBPipeline ###\n\n```python\nfrom pymongo import MongoClient\n\nfrom scrapy.conf import settings\nfrom scrapy.exceptions import DropItem\nfrom scrapy import log\n\n\nclass MongoDBPipeline(object):\n\n    def __init__(self):\n        client = MongoClient(\n            settings['MONGODB_SERVER'],\n            settings['MONGODB_PORT']\n        )\n        news_db = client[settings['MONGODB_DB']]\n        self.collection = news_db[settings['MONGODB_COLLECTION']]\n\n    def process_item(self, item, spider):\n        valid = True\n        if not item['news_sign']:\n            valid = False\n            raise DropItem(\"Missing item!\")\n        if valid:\n            self.collection.insert(dict(item))\n            log.msg(\"news added to MongoDB database!\",\n                    level=log.INFO, spider=spider)\n        return item\n\n```\n\n这个pipeline的作用包括上面提到的验证已经爬取的数据和将爬取的item存进数据库。去重暂时还没有做处理。\n\n### 3.3 配置pipeline ###\n 在settings.py中添加下面的配置\n \n ```python\n ITEM_PIPELINES = {\n    'news_crawler.pipelines.mongodb_ppl.MongoDBPipeline': 300,\n}\n \n ```\n \n 可以看到这是一个字典，键为pipeline的路径，值为优先级(值越小越优先)。\n \n \n## 4.总结 ##\n\n按照上面的步骤走下来，大概就能编写出一个网易新闻的爬虫。这个爬虫写出来，大概就迈出了重构以前爬虫代码的第一步了![1](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/1010.png?raw=true)\n\n后面碰到什么问题也会更新上来的，敬请期待![1](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/25.png?raw=true)\n","source":"_posts/scrapy_crawler_01.md","raw":"title: 使用scrapy搭建一个简单的新闻爬虫\ndate: 2017-11-24 01:01:43\ntags:\n- Python\n- scrapy\n- crawler\ncategories:\n- 技术分享\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/scrapylogo.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n\n# 使用scrapy搭建一个简单的新闻爬虫 #\n\n前段时间面了几家公司的爬虫工程师岗位。所有的公司都会问的一个问题就是: 你使用过哪种爬虫框架？熟练度如何？是否能根据需求修改框架源码？有过分布式爬取的经验吗？    \n每次我遇到这种问题都感到很尴尬 —— 现在主流的爬虫框架大概有Scrapy, PySpider(Python); Nutch, Heritrix(Java) —— 这些我一个都没用过, 目前在线上运行的爬虫全是 requests + json/html/xml 解析。![1](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/11.png?raw=true)    \n至于分布式爬虫, 由于我目前接触的项目爬取量比较小(200+新闻app，300+新闻媒体微信公众号，300+微博的每日增量爬取), 每天的爬取量一台1核/1G/1M的阿里云足够胜任了, 暂时还用不到分布式爬取......![1](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/01.png?raw=true)\n\n另外分布式爬取大多依赖上面提到的框架。\n\n所以我做了一个很艰难的决定！把之前写过的爬虫！用scrapy重新实现一遍！![1](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/1010.png?raw=true)\n\n......   \n......   \n......   \n\n好吧，的确有点艰难......\n\n所以先从其中一个开始吧![1](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/1015.png?raw=true)。\n\n下面会讲到如何使用scrapy 编写一个网易新闻app的爬虫。\n\n**\\*** 我选择了一本参考书籍 《learning scrapy》, 但是这本书爬取的示例网站需要翻墙，所以我只看了框架相关的部分，实际网页解析之类的事情，在修改之前的爬虫的过程中解决。\n\n## 1. 环境配置 ##\n我开发使用电脑的是Mac OSX, 但其实在实际的Python开发中, OSX使用的命令和ubuntu/debian大同小异。    \n\n- 安装scrapy\n\n```bash\nsudo pip install scrapy\n```\n\n- 创建工程文件夹\n\n```bash\nscrapy startproject crawler\ntree crawler\n.\n├── crawler\n│   ├── __init__.py\n│   ├── items.py\n│   ├── middlewares.py\n│   ├── pipelines.py\n│   ├── settings.py\n│   └── spiders\n│       └── __init__.py\n└── scrapy.cfg\n```\nscrapy startproject crawler 这行命令创建了一个新的工程文件夹，文件夹的结构使用tree命令展示出来了。     \n这些文件的主要作用:   \n\n(1) scrapy.cfg 项目的配置文件   \n(2) crawler/ :Python代码存放的位置   \n(3) crawler/items.py: items文件，定义一个(或多个)item的属性   \n(4) crawler/pipelines: 项目的管道文件。\n> 在scrapy的官方文档中，pipeline的作用是：   \n   1. 清洗html数据；   \n\t2. 验证已经爬取的数据(检查item是否有特定属性)；   \n\t3. 去重；   \n\t4. 将爬取的item存进数据库。   \n\n(5) crawler/settings.py 配置文件   \n(6) crawler/spiders/ :爬虫文件的目录   \n\n## 2. 爬虫的编写 ##\n\n### 2.1 定义Item ###\n简单来说，item的作用是装载抓取到的数据，是一种类似字典的容器。它的属性都会定义为scrapy.item.Field对象。\n\n由于我们要写的是一个爬取新闻的app, 首先要明确的是我们需要的数据是什么，对于一个爬虫来说, 重要的是能否**取我所需**, 而不是尽我所能爬取对应网站的所有数据。\n那么对于一个新闻爬虫，我们爬到的每一条新闻都需要一些什么样的数据呢？   \n\n-    category 新闻类型(按照包含的媒体 分为图片/视频)    \n-    source\\_type  新闻来源的类型(app, 微博, 微信, 网站, 电子报 etc.)   \n-    source\\_name  新闻来源的名称\n-    news_sign     一条新闻的唯一标识(可以用于去重)\n-    views         浏览量\n-    title         标题\n-    url           新闻链接\n-    publish_time  发布时间\n-    text          新闻文本\n-    images        新闻图片的列表\n\n以上就是我们需要的一些数据，我们按照上面的列表定义一个item\n\n```python\nfrom scrapy.item import Item, Field\n\nclass NewsCrawlerItem(Item):\n    category = Field()\n    source_type = Field()\n    source_name = Field()\n\n    news_sign = Field()\n    views = Field()\n    title = Field()\n    url = Field()\n    publish_time = Field()\n    text = Field()\n    images = Field()\n```\n\n### 2.2 编写爬虫 ###\nSpider是爬虫的核心部分，用于从一个(或一系列)网站爬取数据。\n要建立一个Spider，你必须为scrapy.spider.BaseSpider创建一个子类，并确定三个主要的、强制的属性：\n- name 爬虫名称，必须是唯一的\n- start_urls 起始页面\n- parse() 解析爬取到的数据所用的方法, 接受的唯一参数是scrapy.Request方法请求得到的Response对象\n\n#### 2.2.1 关于二维爬取 ####\n一个典型的爬虫在两个方向移动：\n- 水平方向：从一个索引页到另一个索引页\n- 垂直方向：从索引页面到下一级页面(可能是下一级的索引，或者内容页面)\n\n这个例子中水平方向是网易新闻的一页新闻到另一页，它返回的是一个个的新闻列表；   \n垂直方向是从新闻列表逐个进入新闻的内容界面\n\n#### 2.2.2 关于从网页(或者HTTP请求的Response Body)中提取数据 ####\n- html 网页的数据可以用 beautifusoup/xpath/正则 提取\n- json 直接解析成Python的字典即可\n- xml  python也有对应的库用于解析   \n\n本文的爬虫会用到json和html解析，这里html使用xpath解析。\n\n#### 2.2.3 一个网易新闻app的Spider ####\n\n```python\n#coding:utf-8\nimport datetime\nimport socket\nimport json\nimport scrapy\nimport urlparse\n\nfrom scrapy.loader.processors import MapCompose, Join\nfrom scrapy.loader import ItemLoader\nfrom scrapy.http import Request\n\nfrom news_crawler.items import NewsCrawlerItem\n\nclass BasicSpider(scrapy.Spider):\n    name = \"netease\"\n    allowed_domains = [\"163.com\"]\n    # Start on the first index page\n    chls = [\n        \"T1370583240249\",  \"T1348649145984\",  \"T1348647909107\",  \"T1348648037603\",  \n        \"T1368497029546\",  \"T1348648141035\",  \"T1474271789612\",  \"T1467284926140\",  \n        \"T1492136373327\",  \"T1348648517839\",  \"T1348648650048\",  \"T1498701411149\",  \n        \"T1348648756099\",  \"T1473054348939\",  \"T1356600029035\",  \"T1348649079062\",  \n        \"T1348649503389\",  \"T1348649176279\",  \"T1348649475931\",  \"T1411113472760\",  \n        \"T1486979691117\",  \"T1348649580692\",  \"T1348649654285\",  \"T1348649776727\",  \n        \"T1350383429665\",  \"T1421997195219\",  \"T1456394562871\",  \"T1348654060988\",  \n        \"T1348654085632\",  \"T1491816738487\",  \"T1348654105308\",  \"T1348654151579\",  \n        \"T1348654204705\",  \"T1414389941036\",  \"T1401272877187\",  \"T1385429690972\",  \n        \"T1348654225495\",  \"T1397116135282\",  \"T1444270454635\",  \"T1481105123675\",  \n        \"T1503456682313\",  \"T1464592736048\",  \"T1504171773862\",  \"T1348650593803\",  \n        \"T1348650839000\",  \"T1414142214384\",  \"T1441074311424\",  \"T1482470888760\",  \n        \"T1499853820829\",  \"T1509504918215\",  \"T1502955728035\",  \"T1509448512433\",  \n        \"T1419315959525\",  \"T1419316284722\",  \"T1419316384474\",  \"T1419316531256\",  \n        \"T1427878984398\",  \"T1433137697241\",  \"T1449126525962\",  \"T1456112189138\",  \n        \"T1493374039495\",  \"T1456112438822\",  \"T1468031118349\",  \"T1488432440430\",  \n        \"T1488432474929\",  \"T1504689350701\"\n    ]\n    start_urls = (\n        'http://c.m.163.com/nc/article/list/%s/0-20.html'%chlid for chlid in chls\n    )\n    def parse(self, response):\n        # Get the next index URLs and yield Requests\n        url_spl = response.url.split('/')\n        chl_url = '/'.join(url_spl[:-1])\n        chl_id = url_spl[-2]\n        items = json.loads(response.body)[chl_id]\n        # Get item URLs and yield Requests\n        for item in items:\n            if 'url_3w' in item and item['url_3w']:\n                news_url = item['url_3w']\n                if '_mobile' not in news_url and '3g.163.com' not in news_url:\n                    news_url = news_url.replace('.html', '_mobile.html')\n                yield Request(news_url, callback=self.parse_item, dont_filter=True)\n        if len(items) == 20:\n            page_num = int(url_spl[-1].split('-')[0]) /20 + 1\n            yield Request(chl_url+'/%d-%d.html'%(page_num*20, page_num*20+20), callback=self.parse, dont_filter=True)\n\n\n\n    def parse_item(self, response):\n        \"\"\" This function parses a netease page.\n        @returns item\n        @scrapes category source_type source_name news_sign views title url publish_time text images\n        \"\"\"\n\n        # Create the loader using the response\n        \n        item = NewsCrawlerItem()\n        item['category'] = 'image'\n        item['source_type'] = 'app'\n        item['source_name'] = self.name\n        item['news_sign'] = ''\n        item['views'] = 0\n        item['url'] = response.url\n        item['title'] = response.xpath('//h1/text()').extract()[0]\n        # Load fields using XPath expressions\n        if '3g.163.com' in response.url:\n            item['publish_time'] = response.xpath('//*[@property=\"article:published_time\"]/@content').extract()[0][:19].replace('T','')\n            item['text'] = ''.join(response.xpath('//*[@class=\"content\"]//p/text()').extract())\n            item['images'] = response.xpath('//*[@class=\"content\"]//img/@src').extract()\n            item['news_sign'] = 'netease'+response.xpath('//article/@id').extract()[0]\n        else:\n            item['publish_time'] = response.xpath('//*[@id=\"articleBody\"]/div[1]/span[1]/text()').extract()[0]\n            item['text'] = ''.join(response.xpath('//*[@class=\"article-body\"]//p/text()').extract())\n            item['images'] = response.xpath('//*[@class=\"article-body\"]//img/@src').extract()\n            item['news_sign'] = 'netease'+response.xpath('//*[@id=\"docId\"]/@value').extract()[0]\n        return item\n```\n\n#### 2.2.4 爬虫代码代码的解析 ####\n上面提到过parse接受response作为参数。\n这里重点说一下parse()方法中的两个生成器yeild,分别代表了垂直爬取和水平爬取。\n首先说一下Request对象:\n\n```python\nclass Request(object_ref):\n\n    def __init__(self, url, callback=None, method='GET', headers=None, body=None,\n                 cookies=None, meta=None, encoding='utf-8', priority=0,\n                 dont_filter=False, errback=None, flags=None):\n```\n\n这里我们使用到了3个参数,url,callback,dont\\_filter。\n我们第一次使用yeild是请求新闻的内容页面，这里的回调函数是parse\\_item()，用来提取单个新闻的信息;    \n第二次使用yeild是请求“下一页”的数据，这里的回调函数是parse(),当然从scrapy的官方文档来看，这里不传callback的话，默认的回调函数也是parse(),这样下一页的数据也会再一次通过parse()解析，实现水平方向上的爬取。\ndont\\_filter是告诉Request不要对url进行过滤(去重)\n\n下面的parse\\_item()就是html的解析了，这里不赘述。\n\n\n\n## 3 爬取到的数据存储 ##\n这里我们用mongoDb对爬取到的数据进行存储。\n### 3.1 配置MongoDB信息 ###\n在settings.py中设置MongoDB的信息\n\n```python\n# MongoDB settings\nMONGODB_SERVER = \"$mongo_server\"\nMONGODB_PORT = 27017\nMONGODB_DB = \"news\"\nMONGODB_COLLECTION = \"news_item\"\n\n```\n这里server的ip隐去了\n### 3.2 编写MongoDBPipeline ###\n\n```python\nfrom pymongo import MongoClient\n\nfrom scrapy.conf import settings\nfrom scrapy.exceptions import DropItem\nfrom scrapy import log\n\n\nclass MongoDBPipeline(object):\n\n    def __init__(self):\n        client = MongoClient(\n            settings['MONGODB_SERVER'],\n            settings['MONGODB_PORT']\n        )\n        news_db = client[settings['MONGODB_DB']]\n        self.collection = news_db[settings['MONGODB_COLLECTION']]\n\n    def process_item(self, item, spider):\n        valid = True\n        if not item['news_sign']:\n            valid = False\n            raise DropItem(\"Missing item!\")\n        if valid:\n            self.collection.insert(dict(item))\n            log.msg(\"news added to MongoDB database!\",\n                    level=log.INFO, spider=spider)\n        return item\n\n```\n\n这个pipeline的作用包括上面提到的验证已经爬取的数据和将爬取的item存进数据库。去重暂时还没有做处理。\n\n### 3.3 配置pipeline ###\n 在settings.py中添加下面的配置\n \n ```python\n ITEM_PIPELINES = {\n    'news_crawler.pipelines.mongodb_ppl.MongoDBPipeline': 300,\n}\n \n ```\n \n 可以看到这是一个字典，键为pipeline的路径，值为优先级(值越小越优先)。\n \n \n## 4.总结 ##\n\n按照上面的步骤走下来，大概就能编写出一个网易新闻的爬虫。这个爬虫写出来，大概就迈出了重构以前爬虫代码的第一步了![1](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/1010.png?raw=true)\n\n后面碰到什么问题也会更新上来的，敬请期待![1](https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/25.png?raw=true)\n","slug":"scrapy_crawler_01","published":1,"updated":"2019-04-25T01:27:25.032Z","comments":1,"layout":"post","link":"","_id":"cjuw5c6gp003udhyfxgaccm26","content":"<h1 id=\"使用scrapy搭建一个简单的新闻爬虫\"><a href=\"#使用scrapy搭建一个简单的新闻爬虫\" class=\"headerlink\" title=\"使用scrapy搭建一个简单的新闻爬虫\"></a>使用scrapy搭建一个简单的新闻爬虫</h1><p>前段时间面了几家公司的爬虫工程师岗位。所有的公司都会问的一个问题就是: 你使用过哪种爬虫框架？熟练度如何？是否能根据需求修改框架源码？有过分布式爬取的经验吗？<br>每次我遇到这种问题都感到很尴尬 —— 现在主流的爬虫框架大概有Scrapy, PySpider(Python); Nutch, Heritrix(Java) —— 这些我一个都没用过, 目前在线上运行的爬虫全是 requests + json/html/xml 解析。<img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/11.png?raw=true\" alt=\"1\"><br>至于分布式爬虫, 由于我目前接触的项目爬取量比较小(200+新闻app，300+新闻媒体微信公众号，300+微博的每日增量爬取), 每天的爬取量一台1核/1G/1M的阿里云足够胜任了, 暂时还用不到分布式爬取……<img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/01.png?raw=true\" alt=\"1\"></p>\n<p>另外分布式爬取大多依赖上面提到的框架。</p>\n<p>所以我做了一个很艰难的决定！把之前写过的爬虫！用scrapy重新实现一遍！<img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/1010.png?raw=true\" alt=\"1\"></p>\n<p>……<br>……<br>……   </p>\n<p>好吧，的确有点艰难……</p>\n<p>所以先从其中一个开始吧<img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/1015.png?raw=true\" alt=\"1\">。</p>\n<p>下面会讲到如何使用scrapy 编写一个网易新闻app的爬虫。</p>\n<p><strong>*</strong> 我选择了一本参考书籍 《learning scrapy》, 但是这本书爬取的示例网站需要翻墙，所以我只看了框架相关的部分，实际网页解析之类的事情，在修改之前的爬虫的过程中解决。</p>\n<h2 id=\"1-环境配置\"><a href=\"#1-环境配置\" class=\"headerlink\" title=\"1. 环境配置\"></a>1. 环境配置</h2><p>我开发使用电脑的是Mac OSX, 但其实在实际的Python开发中, OSX使用的命令和ubuntu/debian大同小异。    </p>\n<ul>\n<li>安装scrapy</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install scrapy</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建工程文件夹</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrapy startproject crawler</span><br><span class=\"line\">tree crawler</span><br><span class=\"line\">.</span><br><span class=\"line\">├── crawler</span><br><span class=\"line\">│   ├── __init__.py</span><br><span class=\"line\">│   ├── items.py</span><br><span class=\"line\">│   ├── middlewares.py</span><br><span class=\"line\">│   ├── pipelines.py</span><br><span class=\"line\">│   ├── settings.py</span><br><span class=\"line\">│   └── spiders</span><br><span class=\"line\">│       └── __init__.py</span><br><span class=\"line\">└── scrapy.cfg</span><br></pre></td></tr></table></figure>\n<p>scrapy startproject crawler 这行命令创建了一个新的工程文件夹，文件夹的结构使用tree命令展示出来了。<br>这些文件的主要作用:   </p>\n<p>(1) scrapy.cfg 项目的配置文件<br>(2) crawler/ :Python代码存放的位置<br>(3) crawler/items.py: items文件，定义一个(或多个)item的属性<br>(4) crawler/pipelines: 项目的管道文件。</p>\n<blockquote>\n<p>在scrapy的官方文档中，pipeline的作用是：   </p>\n<ol>\n<li>清洗html数据；   <ol start=\"2\">\n<li>验证已经爬取的数据(检查item是否有特定属性)；   </li>\n<li>去重；   </li>\n<li>将爬取的item存进数据库。   </li>\n</ol>\n</li>\n</ol>\n</blockquote>\n<p>(5) crawler/settings.py 配置文件<br>(6) crawler/spiders/ :爬虫文件的目录   </p>\n<h2 id=\"2-爬虫的编写\"><a href=\"#2-爬虫的编写\" class=\"headerlink\" title=\"2. 爬虫的编写\"></a>2. 爬虫的编写</h2><h3 id=\"2-1-定义Item\"><a href=\"#2-1-定义Item\" class=\"headerlink\" title=\"2.1 定义Item\"></a>2.1 定义Item</h3><p>简单来说，item的作用是装载抓取到的数据，是一种类似字典的容器。它的属性都会定义为scrapy.item.Field对象。</p>\n<p>由于我们要写的是一个爬取新闻的app, 首先要明确的是我们需要的数据是什么，对于一个爬虫来说, 重要的是能否<strong>取我所需</strong>, 而不是尽我所能爬取对应网站的所有数据。<br>那么对于一个新闻爬虫，我们爬到的每一条新闻都需要一些什么样的数据呢？   </p>\n<ul>\n<li>category 新闻类型(按照包含的媒体 分为图片/视频)    </li>\n<li>source_type  新闻来源的类型(app, 微博, 微信, 网站, 电子报 etc.)   </li>\n<li>source_name  新闻来源的名称</li>\n<li>news_sign     一条新闻的唯一标识(可以用于去重)</li>\n<li>views         浏览量</li>\n<li>title         标题</li>\n<li>url           新闻链接</li>\n<li>publish_time  发布时间</li>\n<li>text          新闻文本</li>\n<li>images        新闻图片的列表</li>\n</ul>\n<p>以上就是我们需要的一些数据，我们按照上面的列表定义一个item</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> scrapy.item <span class=\"keyword\">import</span> Item, Field</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewsCrawlerItem</span><span class=\"params\">(Item)</span>:</span></span><br><span class=\"line\">    category = Field()</span><br><span class=\"line\">    source_type = Field()</span><br><span class=\"line\">    source_name = Field()</span><br><span class=\"line\"></span><br><span class=\"line\">    news_sign = Field()</span><br><span class=\"line\">    views = Field()</span><br><span class=\"line\">    title = Field()</span><br><span class=\"line\">    url = Field()</span><br><span class=\"line\">    publish_time = Field()</span><br><span class=\"line\">    text = Field()</span><br><span class=\"line\">    images = Field()</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-编写爬虫\"><a href=\"#2-2-编写爬虫\" class=\"headerlink\" title=\"2.2 编写爬虫\"></a>2.2 编写爬虫</h3><p>Spider是爬虫的核心部分，用于从一个(或一系列)网站爬取数据。<br>要建立一个Spider，你必须为scrapy.spider.BaseSpider创建一个子类，并确定三个主要的、强制的属性：</p>\n<ul>\n<li>name 爬虫名称，必须是唯一的</li>\n<li>start_urls 起始页面</li>\n<li>parse() 解析爬取到的数据所用的方法, 接受的唯一参数是scrapy.Request方法请求得到的Response对象</li>\n</ul>\n<h4 id=\"2-2-1-关于二维爬取\"><a href=\"#2-2-1-关于二维爬取\" class=\"headerlink\" title=\"2.2.1 关于二维爬取\"></a>2.2.1 关于二维爬取</h4><p>一个典型的爬虫在两个方向移动：</p>\n<ul>\n<li>水平方向：从一个索引页到另一个索引页</li>\n<li>垂直方向：从索引页面到下一级页面(可能是下一级的索引，或者内容页面)</li>\n</ul>\n<p>这个例子中水平方向是网易新闻的一页新闻到另一页，它返回的是一个个的新闻列表；<br>垂直方向是从新闻列表逐个进入新闻的内容界面</p>\n<h4 id=\"2-2-2-关于从网页-或者HTTP请求的Response-Body-中提取数据\"><a href=\"#2-2-2-关于从网页-或者HTTP请求的Response-Body-中提取数据\" class=\"headerlink\" title=\"2.2.2 关于从网页(或者HTTP请求的Response Body)中提取数据\"></a>2.2.2 关于从网页(或者HTTP请求的Response Body)中提取数据</h4><ul>\n<li>html 网页的数据可以用 beautifusoup/xpath/正则 提取</li>\n<li>json 直接解析成Python的字典即可</li>\n<li>xml  python也有对应的库用于解析   </li>\n</ul>\n<p>本文的爬虫会用到json和html解析，这里html使用xpath解析。</p>\n<h4 id=\"2-2-3-一个网易新闻app的Spider\"><a href=\"#2-2-3-一个网易新闻app的Spider\" class=\"headerlink\" title=\"2.2.3 一个网易新闻app的Spider\"></a>2.2.3 一个网易新闻app的Spider</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"><span class=\"keyword\">import</span> urlparse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy.loader.processors <span class=\"keyword\">import</span> MapCompose, Join</span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy.loader <span class=\"keyword\">import</span> ItemLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy.http <span class=\"keyword\">import</span> Request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> news_crawler.items <span class=\"keyword\">import</span> NewsCrawlerItem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasicSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></span><br><span class=\"line\">    name = <span class=\"string\">\"netease\"</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">\"163.com\"</span>]</span><br><span class=\"line\">    <span class=\"comment\"># Start on the first index page</span></span><br><span class=\"line\">    chls = [</span><br><span class=\"line\">        <span class=\"string\">\"T1370583240249\"</span>,  <span class=\"string\">\"T1348649145984\"</span>,  <span class=\"string\">\"T1348647909107\"</span>,  <span class=\"string\">\"T1348648037603\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1368497029546\"</span>,  <span class=\"string\">\"T1348648141035\"</span>,  <span class=\"string\">\"T1474271789612\"</span>,  <span class=\"string\">\"T1467284926140\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1492136373327\"</span>,  <span class=\"string\">\"T1348648517839\"</span>,  <span class=\"string\">\"T1348648650048\"</span>,  <span class=\"string\">\"T1498701411149\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1348648756099\"</span>,  <span class=\"string\">\"T1473054348939\"</span>,  <span class=\"string\">\"T1356600029035\"</span>,  <span class=\"string\">\"T1348649079062\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1348649503389\"</span>,  <span class=\"string\">\"T1348649176279\"</span>,  <span class=\"string\">\"T1348649475931\"</span>,  <span class=\"string\">\"T1411113472760\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1486979691117\"</span>,  <span class=\"string\">\"T1348649580692\"</span>,  <span class=\"string\">\"T1348649654285\"</span>,  <span class=\"string\">\"T1348649776727\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1350383429665\"</span>,  <span class=\"string\">\"T1421997195219\"</span>,  <span class=\"string\">\"T1456394562871\"</span>,  <span class=\"string\">\"T1348654060988\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1348654085632\"</span>,  <span class=\"string\">\"T1491816738487\"</span>,  <span class=\"string\">\"T1348654105308\"</span>,  <span class=\"string\">\"T1348654151579\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1348654204705\"</span>,  <span class=\"string\">\"T1414389941036\"</span>,  <span class=\"string\">\"T1401272877187\"</span>,  <span class=\"string\">\"T1385429690972\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1348654225495\"</span>,  <span class=\"string\">\"T1397116135282\"</span>,  <span class=\"string\">\"T1444270454635\"</span>,  <span class=\"string\">\"T1481105123675\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1503456682313\"</span>,  <span class=\"string\">\"T1464592736048\"</span>,  <span class=\"string\">\"T1504171773862\"</span>,  <span class=\"string\">\"T1348650593803\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1348650839000\"</span>,  <span class=\"string\">\"T1414142214384\"</span>,  <span class=\"string\">\"T1441074311424\"</span>,  <span class=\"string\">\"T1482470888760\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1499853820829\"</span>,  <span class=\"string\">\"T1509504918215\"</span>,  <span class=\"string\">\"T1502955728035\"</span>,  <span class=\"string\">\"T1509448512433\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1419315959525\"</span>,  <span class=\"string\">\"T1419316284722\"</span>,  <span class=\"string\">\"T1419316384474\"</span>,  <span class=\"string\">\"T1419316531256\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1427878984398\"</span>,  <span class=\"string\">\"T1433137697241\"</span>,  <span class=\"string\">\"T1449126525962\"</span>,  <span class=\"string\">\"T1456112189138\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1493374039495\"</span>,  <span class=\"string\">\"T1456112438822\"</span>,  <span class=\"string\">\"T1468031118349\"</span>,  <span class=\"string\">\"T1488432440430\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1488432474929\"</span>,  <span class=\"string\">\"T1504689350701\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    start_urls = (</span><br><span class=\"line\">        <span class=\"string\">'http://c.m.163.com/nc/article/list/%s/0-20.html'</span>%chlid <span class=\"keyword\">for</span> chlid <span class=\"keyword\">in</span> chls</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># Get the next index URLs and yield Requests</span></span><br><span class=\"line\">        url_spl = response.url.split(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">        chl_url = <span class=\"string\">'/'</span>.join(url_spl[:<span class=\"number\">-1</span>])</span><br><span class=\"line\">        chl_id = url_spl[<span class=\"number\">-2</span>]</span><br><span class=\"line\">        items = json.loads(response.body)[chl_id]</span><br><span class=\"line\">        <span class=\"comment\"># Get item URLs and yield Requests</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">'url_3w'</span> <span class=\"keyword\">in</span> item <span class=\"keyword\">and</span> item[<span class=\"string\">'url_3w'</span>]:</span><br><span class=\"line\">                news_url = item[<span class=\"string\">'url_3w'</span>]</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"string\">'_mobile'</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> news_url <span class=\"keyword\">and</span> <span class=\"string\">'3g.163.com'</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> news_url:</span><br><span class=\"line\">                    news_url = news_url.replace(<span class=\"string\">'.html'</span>, <span class=\"string\">'_mobile.html'</span>)</span><br><span class=\"line\">                <span class=\"keyword\">yield</span> Request(news_url, callback=self.parse_item, dont_filter=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(items) == <span class=\"number\">20</span>:</span><br><span class=\"line\">            page_num = int(url_spl[<span class=\"number\">-1</span>].split(<span class=\"string\">'-'</span>)[<span class=\"number\">0</span>]) /<span class=\"number\">20</span> + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">yield</span> Request(chl_url+<span class=\"string\">'/%d-%d.html'</span>%(page_num*<span class=\"number\">20</span>, page_num*<span class=\"number\">20</span>+<span class=\"number\">20</span>), callback=self.parse, dont_filter=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_item</span><span class=\"params\">(self, response)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\" This function parses a netease page.</span></span><br><span class=\"line\"><span class=\"string\">        @returns item</span></span><br><span class=\"line\"><span class=\"string\">        @scrapes category source_type source_name news_sign views title url publish_time text images</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Create the loader using the response</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        item = NewsCrawlerItem()</span><br><span class=\"line\">        item[<span class=\"string\">'category'</span>] = <span class=\"string\">'image'</span></span><br><span class=\"line\">        item[<span class=\"string\">'source_type'</span>] = <span class=\"string\">'app'</span></span><br><span class=\"line\">        item[<span class=\"string\">'source_name'</span>] = self.name</span><br><span class=\"line\">        item[<span class=\"string\">'news_sign'</span>] = <span class=\"string\">''</span></span><br><span class=\"line\">        item[<span class=\"string\">'views'</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">        item[<span class=\"string\">'url'</span>] = response.url</span><br><span class=\"line\">        item[<span class=\"string\">'title'</span>] = response.xpath(<span class=\"string\">'//h1/text()'</span>).extract()[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"comment\"># Load fields using XPath expressions</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'3g.163.com'</span> <span class=\"keyword\">in</span> response.url:</span><br><span class=\"line\">            item[<span class=\"string\">'publish_time'</span>] = response.xpath(<span class=\"string\">'//*[@property=\"article:published_time\"]/@content'</span>).extract()[<span class=\"number\">0</span>][:<span class=\"number\">19</span>].replace(<span class=\"string\">'T'</span>,<span class=\"string\">''</span>)</span><br><span class=\"line\">            item[<span class=\"string\">'text'</span>] = <span class=\"string\">''</span>.join(response.xpath(<span class=\"string\">'//*[@class=\"content\"]//p/text()'</span>).extract())</span><br><span class=\"line\">            item[<span class=\"string\">'images'</span>] = response.xpath(<span class=\"string\">'//*[@class=\"content\"]//img/@src'</span>).extract()</span><br><span class=\"line\">            item[<span class=\"string\">'news_sign'</span>] = <span class=\"string\">'netease'</span>+response.xpath(<span class=\"string\">'//article/@id'</span>).extract()[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            item[<span class=\"string\">'publish_time'</span>] = response.xpath(<span class=\"string\">'//*[@id=\"articleBody\"]/div[1]/span[1]/text()'</span>).extract()[<span class=\"number\">0</span>]</span><br><span class=\"line\">            item[<span class=\"string\">'text'</span>] = <span class=\"string\">''</span>.join(response.xpath(<span class=\"string\">'//*[@class=\"article-body\"]//p/text()'</span>).extract())</span><br><span class=\"line\">            item[<span class=\"string\">'images'</span>] = response.xpath(<span class=\"string\">'//*[@class=\"article-body\"]//img/@src'</span>).extract()</span><br><span class=\"line\">            item[<span class=\"string\">'news_sign'</span>] = <span class=\"string\">'netease'</span>+response.xpath(<span class=\"string\">'//*[@id=\"docId\"]/@value'</span>).extract()[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-4-爬虫代码代码的解析\"><a href=\"#2-2-4-爬虫代码代码的解析\" class=\"headerlink\" title=\"2.2.4 爬虫代码代码的解析\"></a>2.2.4 爬虫代码代码的解析</h4><p>上面提到过parse接受response作为参数。<br>这里重点说一下parse()方法中的两个生成器yeild,分别代表了垂直爬取和水平爬取。<br>首先说一下Request对象:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request</span><span class=\"params\">(object_ref)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, url, callback=None, method=<span class=\"string\">'GET'</span>, headers=None, body=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 cookies=None, meta=None, encoding=<span class=\"string\">'utf-8'</span>, priority=<span class=\"number\">0</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 dont_filter=False, errback=None, flags=None)</span>:</span></span><br></pre></td></tr></table></figure>\n<p>这里我们使用到了3个参数,url,callback,dont_filter。<br>我们第一次使用yeild是请求新闻的内容页面，这里的回调函数是parse_item()，用来提取单个新闻的信息;<br>第二次使用yeild是请求“下一页”的数据，这里的回调函数是parse(),当然从scrapy的官方文档来看，这里不传callback的话，默认的回调函数也是parse(),这样下一页的数据也会再一次通过parse()解析，实现水平方向上的爬取。<br>dont_filter是告诉Request不要对url进行过滤(去重)</p>\n<p>下面的parse_item()就是html的解析了，这里不赘述。</p>\n<h2 id=\"3-爬取到的数据存储\"><a href=\"#3-爬取到的数据存储\" class=\"headerlink\" title=\"3 爬取到的数据存储\"></a>3 爬取到的数据存储</h2><p>这里我们用mongoDb对爬取到的数据进行存储。</p>\n<h3 id=\"3-1-配置MongoDB信息\"><a href=\"#3-1-配置MongoDB信息\" class=\"headerlink\" title=\"3.1 配置MongoDB信息\"></a>3.1 配置MongoDB信息</h3><p>在settings.py中设置MongoDB的信息</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># MongoDB settings</span></span><br><span class=\"line\">MONGODB_SERVER = <span class=\"string\">\"$mongo_server\"</span></span><br><span class=\"line\">MONGODB_PORT = <span class=\"number\">27017</span></span><br><span class=\"line\">MONGODB_DB = <span class=\"string\">\"news\"</span></span><br><span class=\"line\">MONGODB_COLLECTION = <span class=\"string\">\"news_item\"</span></span><br></pre></td></tr></table></figure>\n<p>这里server的ip隐去了</p>\n<h3 id=\"3-2-编写MongoDBPipeline\"><a href=\"#3-2-编写MongoDBPipeline\" class=\"headerlink\" title=\"3.2 编写MongoDBPipeline\"></a>3.2 编写MongoDBPipeline</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy.conf <span class=\"keyword\">import</span> settings</span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy.exceptions <span class=\"keyword\">import</span> DropItem</span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy <span class=\"keyword\">import</span> log</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MongoDBPipeline</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        client = MongoClient(</span><br><span class=\"line\">            settings[<span class=\"string\">'MONGODB_SERVER'</span>],</span><br><span class=\"line\">            settings[<span class=\"string\">'MONGODB_PORT'</span>]</span><br><span class=\"line\">        )</span><br><span class=\"line\">        news_db = client[settings[<span class=\"string\">'MONGODB_DB'</span>]]</span><br><span class=\"line\">        self.collection = news_db[settings[<span class=\"string\">'MONGODB_COLLECTION'</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_item</span><span class=\"params\">(self, item, spider)</span>:</span></span><br><span class=\"line\">        valid = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> item[<span class=\"string\">'news_sign'</span>]:</span><br><span class=\"line\">            valid = <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">raise</span> DropItem(<span class=\"string\">\"Missing item!\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> valid:</span><br><span class=\"line\">            self.collection.insert(dict(item))</span><br><span class=\"line\">            log.msg(<span class=\"string\">\"news added to MongoDB database!\"</span>,</span><br><span class=\"line\">                    level=log.INFO, spider=spider)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item</span><br></pre></td></tr></table></figure>\n<p>这个pipeline的作用包括上面提到的验证已经爬取的数据和将爬取的item存进数据库。去重暂时还没有做处理。</p>\n<h3 id=\"3-3-配置pipeline\"><a href=\"#3-3-配置pipeline\" class=\"headerlink\" title=\"3.3 配置pipeline\"></a>3.3 配置pipeline</h3><p> 在settings.py中添加下面的配置</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ITEM_PIPELINES = &#123;</span><br><span class=\"line\">    <span class=\"string\">'news_crawler.pipelines.mongodb_ppl.MongoDBPipeline'</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 可以看到这是一个字典，键为pipeline的路径，值为优先级(值越小越优先)。</p>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4.总结\"></a>4.总结</h2><p>按照上面的步骤走下来，大概就能编写出一个网易新闻的爬虫。这个爬虫写出来，大概就迈出了重构以前爬虫代码的第一步了<img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/1010.png?raw=true\" alt=\"1\"></p>\n<p>后面碰到什么问题也会更新上来的，敬请期待<img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/25.png?raw=true\" alt=\"1\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"使用scrapy搭建一个简单的新闻爬虫\"><a href=\"#使用scrapy搭建一个简单的新闻爬虫\" class=\"headerlink\" title=\"使用scrapy搭建一个简单的新闻爬虫\"></a>使用scrapy搭建一个简单的新闻爬虫</h1><p>前段时间面了几家公司的爬虫工程师岗位。所有的公司都会问的一个问题就是: 你使用过哪种爬虫框架？熟练度如何？是否能根据需求修改框架源码？有过分布式爬取的经验吗？<br>每次我遇到这种问题都感到很尴尬 —— 现在主流的爬虫框架大概有Scrapy, PySpider(Python); Nutch, Heritrix(Java) —— 这些我一个都没用过, 目前在线上运行的爬虫全是 requests + json/html/xml 解析。<img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/11.png?raw=true\" alt=\"1\"><br>至于分布式爬虫, 由于我目前接触的项目爬取量比较小(200+新闻app，300+新闻媒体微信公众号，300+微博的每日增量爬取), 每天的爬取量一台1核/1G/1M的阿里云足够胜任了, 暂时还用不到分布式爬取……<img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/01.png?raw=true\" alt=\"1\"></p>\n<p>另外分布式爬取大多依赖上面提到的框架。</p>\n<p>所以我做了一个很艰难的决定！把之前写过的爬虫！用scrapy重新实现一遍！<img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/1010.png?raw=true\" alt=\"1\"></p>\n<p>……<br>……<br>……   </p>\n<p>好吧，的确有点艰难……</p>\n<p>所以先从其中一个开始吧<img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/1015.png?raw=true\" alt=\"1\">。</p>\n<p>下面会讲到如何使用scrapy 编写一个网易新闻app的爬虫。</p>\n<p><strong>*</strong> 我选择了一本参考书籍 《learning scrapy》, 但是这本书爬取的示例网站需要翻墙，所以我只看了框架相关的部分，实际网页解析之类的事情，在修改之前的爬虫的过程中解决。</p>\n<h2 id=\"1-环境配置\"><a href=\"#1-环境配置\" class=\"headerlink\" title=\"1. 环境配置\"></a>1. 环境配置</h2><p>我开发使用电脑的是Mac OSX, 但其实在实际的Python开发中, OSX使用的命令和ubuntu/debian大同小异。    </p>\n<ul>\n<li>安装scrapy</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install scrapy</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建工程文件夹</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrapy startproject crawler</span><br><span class=\"line\">tree crawler</span><br><span class=\"line\">.</span><br><span class=\"line\">├── crawler</span><br><span class=\"line\">│   ├── __init__.py</span><br><span class=\"line\">│   ├── items.py</span><br><span class=\"line\">│   ├── middlewares.py</span><br><span class=\"line\">│   ├── pipelines.py</span><br><span class=\"line\">│   ├── settings.py</span><br><span class=\"line\">│   └── spiders</span><br><span class=\"line\">│       └── __init__.py</span><br><span class=\"line\">└── scrapy.cfg</span><br></pre></td></tr></table></figure>\n<p>scrapy startproject crawler 这行命令创建了一个新的工程文件夹，文件夹的结构使用tree命令展示出来了。<br>这些文件的主要作用:   </p>\n<p>(1) scrapy.cfg 项目的配置文件<br>(2) crawler/ :Python代码存放的位置<br>(3) crawler/items.py: items文件，定义一个(或多个)item的属性<br>(4) crawler/pipelines: 项目的管道文件。</p>\n<blockquote>\n<p>在scrapy的官方文档中，pipeline的作用是：   </p>\n<ol>\n<li>清洗html数据；   <ol start=\"2\">\n<li>验证已经爬取的数据(检查item是否有特定属性)；   </li>\n<li>去重；   </li>\n<li>将爬取的item存进数据库。   </li>\n</ol>\n</li>\n</ol>\n</blockquote>\n<p>(5) crawler/settings.py 配置文件<br>(6) crawler/spiders/ :爬虫文件的目录   </p>\n<h2 id=\"2-爬虫的编写\"><a href=\"#2-爬虫的编写\" class=\"headerlink\" title=\"2. 爬虫的编写\"></a>2. 爬虫的编写</h2><h3 id=\"2-1-定义Item\"><a href=\"#2-1-定义Item\" class=\"headerlink\" title=\"2.1 定义Item\"></a>2.1 定义Item</h3><p>简单来说，item的作用是装载抓取到的数据，是一种类似字典的容器。它的属性都会定义为scrapy.item.Field对象。</p>\n<p>由于我们要写的是一个爬取新闻的app, 首先要明确的是我们需要的数据是什么，对于一个爬虫来说, 重要的是能否<strong>取我所需</strong>, 而不是尽我所能爬取对应网站的所有数据。<br>那么对于一个新闻爬虫，我们爬到的每一条新闻都需要一些什么样的数据呢？   </p>\n<ul>\n<li>category 新闻类型(按照包含的媒体 分为图片/视频)    </li>\n<li>source_type  新闻来源的类型(app, 微博, 微信, 网站, 电子报 etc.)   </li>\n<li>source_name  新闻来源的名称</li>\n<li>news_sign     一条新闻的唯一标识(可以用于去重)</li>\n<li>views         浏览量</li>\n<li>title         标题</li>\n<li>url           新闻链接</li>\n<li>publish_time  发布时间</li>\n<li>text          新闻文本</li>\n<li>images        新闻图片的列表</li>\n</ul>\n<p>以上就是我们需要的一些数据，我们按照上面的列表定义一个item</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> scrapy.item <span class=\"keyword\">import</span> Item, Field</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewsCrawlerItem</span><span class=\"params\">(Item)</span>:</span></span><br><span class=\"line\">    category = Field()</span><br><span class=\"line\">    source_type = Field()</span><br><span class=\"line\">    source_name = Field()</span><br><span class=\"line\"></span><br><span class=\"line\">    news_sign = Field()</span><br><span class=\"line\">    views = Field()</span><br><span class=\"line\">    title = Field()</span><br><span class=\"line\">    url = Field()</span><br><span class=\"line\">    publish_time = Field()</span><br><span class=\"line\">    text = Field()</span><br><span class=\"line\">    images = Field()</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-编写爬虫\"><a href=\"#2-2-编写爬虫\" class=\"headerlink\" title=\"2.2 编写爬虫\"></a>2.2 编写爬虫</h3><p>Spider是爬虫的核心部分，用于从一个(或一系列)网站爬取数据。<br>要建立一个Spider，你必须为scrapy.spider.BaseSpider创建一个子类，并确定三个主要的、强制的属性：</p>\n<ul>\n<li>name 爬虫名称，必须是唯一的</li>\n<li>start_urls 起始页面</li>\n<li>parse() 解析爬取到的数据所用的方法, 接受的唯一参数是scrapy.Request方法请求得到的Response对象</li>\n</ul>\n<h4 id=\"2-2-1-关于二维爬取\"><a href=\"#2-2-1-关于二维爬取\" class=\"headerlink\" title=\"2.2.1 关于二维爬取\"></a>2.2.1 关于二维爬取</h4><p>一个典型的爬虫在两个方向移动：</p>\n<ul>\n<li>水平方向：从一个索引页到另一个索引页</li>\n<li>垂直方向：从索引页面到下一级页面(可能是下一级的索引，或者内容页面)</li>\n</ul>\n<p>这个例子中水平方向是网易新闻的一页新闻到另一页，它返回的是一个个的新闻列表；<br>垂直方向是从新闻列表逐个进入新闻的内容界面</p>\n<h4 id=\"2-2-2-关于从网页-或者HTTP请求的Response-Body-中提取数据\"><a href=\"#2-2-2-关于从网页-或者HTTP请求的Response-Body-中提取数据\" class=\"headerlink\" title=\"2.2.2 关于从网页(或者HTTP请求的Response Body)中提取数据\"></a>2.2.2 关于从网页(或者HTTP请求的Response Body)中提取数据</h4><ul>\n<li>html 网页的数据可以用 beautifusoup/xpath/正则 提取</li>\n<li>json 直接解析成Python的字典即可</li>\n<li>xml  python也有对应的库用于解析   </li>\n</ul>\n<p>本文的爬虫会用到json和html解析，这里html使用xpath解析。</p>\n<h4 id=\"2-2-3-一个网易新闻app的Spider\"><a href=\"#2-2-3-一个网易新闻app的Spider\" class=\"headerlink\" title=\"2.2.3 一个网易新闻app的Spider\"></a>2.2.3 一个网易新闻app的Spider</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"><span class=\"keyword\">import</span> urlparse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy.loader.processors <span class=\"keyword\">import</span> MapCompose, Join</span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy.loader <span class=\"keyword\">import</span> ItemLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy.http <span class=\"keyword\">import</span> Request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> news_crawler.items <span class=\"keyword\">import</span> NewsCrawlerItem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasicSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></span><br><span class=\"line\">    name = <span class=\"string\">\"netease\"</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">\"163.com\"</span>]</span><br><span class=\"line\">    <span class=\"comment\"># Start on the first index page</span></span><br><span class=\"line\">    chls = [</span><br><span class=\"line\">        <span class=\"string\">\"T1370583240249\"</span>,  <span class=\"string\">\"T1348649145984\"</span>,  <span class=\"string\">\"T1348647909107\"</span>,  <span class=\"string\">\"T1348648037603\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1368497029546\"</span>,  <span class=\"string\">\"T1348648141035\"</span>,  <span class=\"string\">\"T1474271789612\"</span>,  <span class=\"string\">\"T1467284926140\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1492136373327\"</span>,  <span class=\"string\">\"T1348648517839\"</span>,  <span class=\"string\">\"T1348648650048\"</span>,  <span class=\"string\">\"T1498701411149\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1348648756099\"</span>,  <span class=\"string\">\"T1473054348939\"</span>,  <span class=\"string\">\"T1356600029035\"</span>,  <span class=\"string\">\"T1348649079062\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1348649503389\"</span>,  <span class=\"string\">\"T1348649176279\"</span>,  <span class=\"string\">\"T1348649475931\"</span>,  <span class=\"string\">\"T1411113472760\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1486979691117\"</span>,  <span class=\"string\">\"T1348649580692\"</span>,  <span class=\"string\">\"T1348649654285\"</span>,  <span class=\"string\">\"T1348649776727\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1350383429665\"</span>,  <span class=\"string\">\"T1421997195219\"</span>,  <span class=\"string\">\"T1456394562871\"</span>,  <span class=\"string\">\"T1348654060988\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1348654085632\"</span>,  <span class=\"string\">\"T1491816738487\"</span>,  <span class=\"string\">\"T1348654105308\"</span>,  <span class=\"string\">\"T1348654151579\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1348654204705\"</span>,  <span class=\"string\">\"T1414389941036\"</span>,  <span class=\"string\">\"T1401272877187\"</span>,  <span class=\"string\">\"T1385429690972\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1348654225495\"</span>,  <span class=\"string\">\"T1397116135282\"</span>,  <span class=\"string\">\"T1444270454635\"</span>,  <span class=\"string\">\"T1481105123675\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1503456682313\"</span>,  <span class=\"string\">\"T1464592736048\"</span>,  <span class=\"string\">\"T1504171773862\"</span>,  <span class=\"string\">\"T1348650593803\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1348650839000\"</span>,  <span class=\"string\">\"T1414142214384\"</span>,  <span class=\"string\">\"T1441074311424\"</span>,  <span class=\"string\">\"T1482470888760\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1499853820829\"</span>,  <span class=\"string\">\"T1509504918215\"</span>,  <span class=\"string\">\"T1502955728035\"</span>,  <span class=\"string\">\"T1509448512433\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1419315959525\"</span>,  <span class=\"string\">\"T1419316284722\"</span>,  <span class=\"string\">\"T1419316384474\"</span>,  <span class=\"string\">\"T1419316531256\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1427878984398\"</span>,  <span class=\"string\">\"T1433137697241\"</span>,  <span class=\"string\">\"T1449126525962\"</span>,  <span class=\"string\">\"T1456112189138\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1493374039495\"</span>,  <span class=\"string\">\"T1456112438822\"</span>,  <span class=\"string\">\"T1468031118349\"</span>,  <span class=\"string\">\"T1488432440430\"</span>,  </span><br><span class=\"line\">        <span class=\"string\">\"T1488432474929\"</span>,  <span class=\"string\">\"T1504689350701\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    start_urls = (</span><br><span class=\"line\">        <span class=\"string\">'http://c.m.163.com/nc/article/list/%s/0-20.html'</span>%chlid <span class=\"keyword\">for</span> chlid <span class=\"keyword\">in</span> chls</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># Get the next index URLs and yield Requests</span></span><br><span class=\"line\">        url_spl = response.url.split(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">        chl_url = <span class=\"string\">'/'</span>.join(url_spl[:<span class=\"number\">-1</span>])</span><br><span class=\"line\">        chl_id = url_spl[<span class=\"number\">-2</span>]</span><br><span class=\"line\">        items = json.loads(response.body)[chl_id]</span><br><span class=\"line\">        <span class=\"comment\"># Get item URLs and yield Requests</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">'url_3w'</span> <span class=\"keyword\">in</span> item <span class=\"keyword\">and</span> item[<span class=\"string\">'url_3w'</span>]:</span><br><span class=\"line\">                news_url = item[<span class=\"string\">'url_3w'</span>]</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"string\">'_mobile'</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> news_url <span class=\"keyword\">and</span> <span class=\"string\">'3g.163.com'</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> news_url:</span><br><span class=\"line\">                    news_url = news_url.replace(<span class=\"string\">'.html'</span>, <span class=\"string\">'_mobile.html'</span>)</span><br><span class=\"line\">                <span class=\"keyword\">yield</span> Request(news_url, callback=self.parse_item, dont_filter=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(items) == <span class=\"number\">20</span>:</span><br><span class=\"line\">            page_num = int(url_spl[<span class=\"number\">-1</span>].split(<span class=\"string\">'-'</span>)[<span class=\"number\">0</span>]) /<span class=\"number\">20</span> + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">yield</span> Request(chl_url+<span class=\"string\">'/%d-%d.html'</span>%(page_num*<span class=\"number\">20</span>, page_num*<span class=\"number\">20</span>+<span class=\"number\">20</span>), callback=self.parse, dont_filter=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_item</span><span class=\"params\">(self, response)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\" This function parses a netease page.</span></span><br><span class=\"line\"><span class=\"string\">        @returns item</span></span><br><span class=\"line\"><span class=\"string\">        @scrapes category source_type source_name news_sign views title url publish_time text images</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Create the loader using the response</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        item = NewsCrawlerItem()</span><br><span class=\"line\">        item[<span class=\"string\">'category'</span>] = <span class=\"string\">'image'</span></span><br><span class=\"line\">        item[<span class=\"string\">'source_type'</span>] = <span class=\"string\">'app'</span></span><br><span class=\"line\">        item[<span class=\"string\">'source_name'</span>] = self.name</span><br><span class=\"line\">        item[<span class=\"string\">'news_sign'</span>] = <span class=\"string\">''</span></span><br><span class=\"line\">        item[<span class=\"string\">'views'</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">        item[<span class=\"string\">'url'</span>] = response.url</span><br><span class=\"line\">        item[<span class=\"string\">'title'</span>] = response.xpath(<span class=\"string\">'//h1/text()'</span>).extract()[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"comment\"># Load fields using XPath expressions</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'3g.163.com'</span> <span class=\"keyword\">in</span> response.url:</span><br><span class=\"line\">            item[<span class=\"string\">'publish_time'</span>] = response.xpath(<span class=\"string\">'//*[@property=\"article:published_time\"]/@content'</span>).extract()[<span class=\"number\">0</span>][:<span class=\"number\">19</span>].replace(<span class=\"string\">'T'</span>,<span class=\"string\">''</span>)</span><br><span class=\"line\">            item[<span class=\"string\">'text'</span>] = <span class=\"string\">''</span>.join(response.xpath(<span class=\"string\">'//*[@class=\"content\"]//p/text()'</span>).extract())</span><br><span class=\"line\">            item[<span class=\"string\">'images'</span>] = response.xpath(<span class=\"string\">'//*[@class=\"content\"]//img/@src'</span>).extract()</span><br><span class=\"line\">            item[<span class=\"string\">'news_sign'</span>] = <span class=\"string\">'netease'</span>+response.xpath(<span class=\"string\">'//article/@id'</span>).extract()[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            item[<span class=\"string\">'publish_time'</span>] = response.xpath(<span class=\"string\">'//*[@id=\"articleBody\"]/div[1]/span[1]/text()'</span>).extract()[<span class=\"number\">0</span>]</span><br><span class=\"line\">            item[<span class=\"string\">'text'</span>] = <span class=\"string\">''</span>.join(response.xpath(<span class=\"string\">'//*[@class=\"article-body\"]//p/text()'</span>).extract())</span><br><span class=\"line\">            item[<span class=\"string\">'images'</span>] = response.xpath(<span class=\"string\">'//*[@class=\"article-body\"]//img/@src'</span>).extract()</span><br><span class=\"line\">            item[<span class=\"string\">'news_sign'</span>] = <span class=\"string\">'netease'</span>+response.xpath(<span class=\"string\">'//*[@id=\"docId\"]/@value'</span>).extract()[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-4-爬虫代码代码的解析\"><a href=\"#2-2-4-爬虫代码代码的解析\" class=\"headerlink\" title=\"2.2.4 爬虫代码代码的解析\"></a>2.2.4 爬虫代码代码的解析</h4><p>上面提到过parse接受response作为参数。<br>这里重点说一下parse()方法中的两个生成器yeild,分别代表了垂直爬取和水平爬取。<br>首先说一下Request对象:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request</span><span class=\"params\">(object_ref)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, url, callback=None, method=<span class=\"string\">'GET'</span>, headers=None, body=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 cookies=None, meta=None, encoding=<span class=\"string\">'utf-8'</span>, priority=<span class=\"number\">0</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 dont_filter=False, errback=None, flags=None)</span>:</span></span><br></pre></td></tr></table></figure>\n<p>这里我们使用到了3个参数,url,callback,dont_filter。<br>我们第一次使用yeild是请求新闻的内容页面，这里的回调函数是parse_item()，用来提取单个新闻的信息;<br>第二次使用yeild是请求“下一页”的数据，这里的回调函数是parse(),当然从scrapy的官方文档来看，这里不传callback的话，默认的回调函数也是parse(),这样下一页的数据也会再一次通过parse()解析，实现水平方向上的爬取。<br>dont_filter是告诉Request不要对url进行过滤(去重)</p>\n<p>下面的parse_item()就是html的解析了，这里不赘述。</p>\n<h2 id=\"3-爬取到的数据存储\"><a href=\"#3-爬取到的数据存储\" class=\"headerlink\" title=\"3 爬取到的数据存储\"></a>3 爬取到的数据存储</h2><p>这里我们用mongoDb对爬取到的数据进行存储。</p>\n<h3 id=\"3-1-配置MongoDB信息\"><a href=\"#3-1-配置MongoDB信息\" class=\"headerlink\" title=\"3.1 配置MongoDB信息\"></a>3.1 配置MongoDB信息</h3><p>在settings.py中设置MongoDB的信息</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># MongoDB settings</span></span><br><span class=\"line\">MONGODB_SERVER = <span class=\"string\">\"$mongo_server\"</span></span><br><span class=\"line\">MONGODB_PORT = <span class=\"number\">27017</span></span><br><span class=\"line\">MONGODB_DB = <span class=\"string\">\"news\"</span></span><br><span class=\"line\">MONGODB_COLLECTION = <span class=\"string\">\"news_item\"</span></span><br></pre></td></tr></table></figure>\n<p>这里server的ip隐去了</p>\n<h3 id=\"3-2-编写MongoDBPipeline\"><a href=\"#3-2-编写MongoDBPipeline\" class=\"headerlink\" title=\"3.2 编写MongoDBPipeline\"></a>3.2 编写MongoDBPipeline</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy.conf <span class=\"keyword\">import</span> settings</span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy.exceptions <span class=\"keyword\">import</span> DropItem</span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy <span class=\"keyword\">import</span> log</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MongoDBPipeline</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        client = MongoClient(</span><br><span class=\"line\">            settings[<span class=\"string\">'MONGODB_SERVER'</span>],</span><br><span class=\"line\">            settings[<span class=\"string\">'MONGODB_PORT'</span>]</span><br><span class=\"line\">        )</span><br><span class=\"line\">        news_db = client[settings[<span class=\"string\">'MONGODB_DB'</span>]]</span><br><span class=\"line\">        self.collection = news_db[settings[<span class=\"string\">'MONGODB_COLLECTION'</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_item</span><span class=\"params\">(self, item, spider)</span>:</span></span><br><span class=\"line\">        valid = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> item[<span class=\"string\">'news_sign'</span>]:</span><br><span class=\"line\">            valid = <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">raise</span> DropItem(<span class=\"string\">\"Missing item!\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> valid:</span><br><span class=\"line\">            self.collection.insert(dict(item))</span><br><span class=\"line\">            log.msg(<span class=\"string\">\"news added to MongoDB database!\"</span>,</span><br><span class=\"line\">                    level=log.INFO, spider=spider)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item</span><br></pre></td></tr></table></figure>\n<p>这个pipeline的作用包括上面提到的验证已经爬取的数据和将爬取的item存进数据库。去重暂时还没有做处理。</p>\n<h3 id=\"3-3-配置pipeline\"><a href=\"#3-3-配置pipeline\" class=\"headerlink\" title=\"3.3 配置pipeline\"></a>3.3 配置pipeline</h3><p> 在settings.py中添加下面的配置</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ITEM_PIPELINES = &#123;</span><br><span class=\"line\">    <span class=\"string\">'news_crawler.pipelines.mongodb_ppl.MongoDBPipeline'</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 可以看到这是一个字典，键为pipeline的路径，值为优先级(值越小越优先)。</p>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4.总结\"></a>4.总结</h2><p>按照上面的步骤走下来，大概就能编写出一个网易新闻的爬虫。这个爬虫写出来，大概就迈出了重构以前爬虫代码的第一步了<img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/1010.png?raw=true\" alt=\"1\"></p>\n<p>后面碰到什么问题也会更新上来的，敬请期待<img src=\"https://github.com/aldslvda/blog-images/blob/master/acfun_emoji/25.png?raw=true\" alt=\"1\"></p>\n"},{"title":"Python常用的一些小技巧(语法糖 etc.)","date":"2018-09-17T06:27:22.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/python-tricks-title.jpg?raw=true"],"toc":true,"comment":true,"_content":"\n\n## Python 一些小技巧\n\n本文分享一些使用 Python 的技巧，顺序按照 A-Z 排列。\n\n### all or any\n\nPython 非常受欢迎的原因之一是其可读性和表达性。\n\n人们还经常把 Python 笑称为「可执行伪码（executable pseudocode）」。但是，当你可以编写这样的代码时，很难去反驳这种言论：\n\n```python\nx = [True, True, False]\n\nif any(x):\n\n    print(\"At least one True\")\n\nif all(x):\n\n    print(\"Not one False\")\n\nif any(x) and not all(x):\n\n    print(\"At least one True and one False\")\n```\n\n### bashplotlib\n\n想在控制台中绘图吗？\n\n```bash\n$ pip install bashplotlib\n```\n\n使用上面的行，即可在控制台中绘图。\n\n### collections\n\nPython 有一些很棒的默认数据类型，但有时候它们可能不会尽如你意。\n\n不过，Python 标准库提供了 collections 模块。这个方便的附加组件可以为你提供更多数据类型。\n\n> collections 模块：https://docs.python.org/3/library/collections.html\n\n```python\nfrom collections import OrderedDict, Counter\n\n# Remembers the order the keys are added!\n\nx = OrderedDict(a=1, b=2, c=3)\n\n# Counts the frequency of each character\n\ny = Counter(\"Hello World!\")\n```\n\n### dir\n\n你是否想过如何查看 Python 对象内部及其具有哪些属性？\n\n输入以下命令行：\n```bash\n>>> dir()\n\n>>> dir(\"Hello World\")\n\n>>> dir(dir)\n```\n\n当以交互方式运行 Python 时，这可能是一个非常有用的功能，并且可以动态地探索你正在使用的对象和模块。\n\n想要了解更多，点这里\n> https://docs.python.org/3/library/functions.html#dir\n\n\n### emoji\n\n是的，真的有。请点击这里\n> https://pypi.org/project/emoji/\n\n```bash\n$ pip install emoji\n```\n\n别以为我不知道你会偷偷试它→→\n```python\nfrom emoji import emojize\n\nprint(emojize(\":thumbs_up:\"))\n\n👍\n```\n\n### from \\_\\_future\\_\\_ import\n\nPython 流行的一个结果是，总有新版本正在开发中。新版本意味着新功能——除非你的版本已经过时。\n\n不过，别担心。\\_\\_future\\_\\_模块允许用户导入新版 Python 的功能。这简直就像时间旅行，或者魔法什么的。\n\n> \\_\\_future\\_\\_模块：https://docs.python.org/2/library/\\*future\\*.html\n\n```python\nfrom \\_\\_future\\_\\_ import print_function\n\nprint(\"Hello World!\")\n```\n\n### geopy\n\n地理（Geography）对于程序员来说可能是一个具有挑战性的领域。但是 geopy 模块让它变得异常简单。\n\n> geopy 模块：https://geopy.readthedocs.io/en/latest/\n```bash\n$ pip install geopy\n```\n\n它通过抽取一系列不同地理编码服务的 API 来工作，使用户获取一个地方的完整街道地址、纬度、经度，甚至海拔高度。\n\n另外一个有用的功能是距离：它可以用你喜欢的度量单位计算出两个位置之间的距离。\n\n```python\nfrom geopy import GoogleV3\n\nplace = \"221b Baker Street, London\"\n\nlocation = GoogleV3().geocode(place)\n\nprint(location.address)\n\nprint(location.location)\n```\n\n### howdoi\n\n陷入编码问题，却不记得以前见过的解决方案？需要检查 StackOverflow，但不想离开终端？\n\n那么你需要这个有用的命令行工具：https://github.com/gleitz/howdoi。\n\n```bash\n$ pip install howdoi\n```\n无论你有什么问题都可以问它，它会尽力回答。\n```bash\n$ howdoi vertical align css\n\n$ howdoi for loop in java\n\n$ howdoi undo commits in git\n```\n但是请注意——它会从 StackOverflow 的最高票答案中抓取代码。也就是说它提供的信息并非总是有用……\n```bash\n$ howdoi exit vim\n```\n### inspect\n\nPython 的 inspect 模块非常有助于理解问题背后的详情。你甚至可以在 inspect 模块上调用其方法！\n\n> inspect 模块：https://docs.python.org/3/library/inspect.html\n\n下面的代码示例使用 inspect.getsource() 打印自己的源代码。它还使用 inspect.getmodule() 打印定义它的模块。\n\n最后一行代码打印出自己的行号。\n```python\nimport inspect\n\nprint(inspect.getsource(inspect.getsource))\n\nprint(inspect.getmodule(inspect.getmodule))\n\nprint(inspect.currentframe().f_lineno)\n```\n\n当然，除了这些琐碎的用途之外，inspect 模块还能帮助你理解代码正在做的事。你还可以用它编写自文档化代码。\n\n### Jedi\n\nJedi 库是一个自动完成和代码分析的库。它使代码编写变得更快、效果更高。\n\n除非你正在开发自己的 IDE，否则你肯定会对使用 Jedi 库作为编辑插件很感兴趣。\n\n> Jedi：https://jedi.readthedocs.io/en/latest/docs/usage.html\n\n你可能已经在使用 Jedi 了。IPython 项目就使用 Jedi 实现代码自动完成功能。\n\n### \\*\\*kwargs\n\n学习任何语言时都会遇到很多里程碑。对于 Python 来说，理解神秘的\\*\\*kwargs 语法可能算是其中之一。\n\n词典对象前面的双星号可以让你把该词典的内容作为命名参数输入到函数中。\n\n词典的秘钥是参数名，值是传递给函数的值。你甚至不需要称它为 kwargs！\n\n```python\ndictionary = {\"a\": 1, \"b\": 2}\n\ndef someFunction(a, b):\n\n    print(a + b)\n\n    return\n\n# these do the same thing:\n\nsomeFunction(**dictionary)\n\nsomeFunction(a=1, b=2)\n```\n\n当你想编写能够处理事先未定义的命名参数的函数时，这个很有用。\n\n### 列表推导式（List comprehensions）\n\n我最喜欢 Python 编程的原因之一是它的列表推导式\n> https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions\n\n这些表达式使得编写干净易读的代码变得很容易，那些代码读起来几乎像自然语言一样。\n\n> 关于它们的更多使用信息请查看：https://www.learnpython.org/en/List_Comprehensions\n\n```python\nnumbers = [1,2,3,4,5,6,7]\n\nevens = [x for x in numbers if x % 2 is 0]\n\nodds = [y for y in numbers if y not in evens]\n\ncities = ['London', 'Dublin', 'Oslo']\n\ndef visit(city):\n\n    print(\"Welcome to \"+city)\n\nfor city in cities:\n\n    visit(city)\n```\n### map\n\nPython 通过许多内置功能支持函数式编程。map() 函数是最有用的函数之一——特别是当它与 lambda 函数结合使用时。\n\n> lambda 函数：https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions\n\n```python\nx = [1, 2, 3]\n\ny = map(lambda x : x + 1 , x)\n\n# prints out [2,3,4]\n\nprint(list(y))\n```\n\n在上面的例子中，map() 将一个简单的 lambda 函数应用于 x 中的每个元素。它返回一个 map 对象，该对象可以被转换成可迭代的对象，如列表或元组。\n\n### newspaper3k\n\n如果你之前没有见过它，那么我建议你先查看\n> https://pypi.org/project/newspaper3k/。\n\n它可以帮助你从大量顶级国际出版物中检索到新闻文章和相关元数据。你可以检索图像、文本和作者名。\n\n它还有一些内置的 NLP 功能。\n\n> 地址：https://newspaper.readthedocs.io/en/latest/user_guide/quickstart.html#performing-nlp-on-an-article\n\n如果你想在下一个项目中使用 BeautifulSoup 或其它 DIY 网页抓取库，那么不如使用$ pip install newspaper3k，既省时又省事，何乐而不为呢？\n\n### 运算符重载（Operator overloading）\n\nPython 支持运算符重载。\n\n它实际上是一个简单的概念。你有没有想过为什么 Python 允许用户使用 + 运算符来将数字相加，并级联字符串？这就是运算符重载在发挥作用。\n\n你可以使用 Python 的标准运算符号来定义对象，这样你可以在与这些对象相关的语境中使用它们。\n```python\nclass Thing:\n\n    def __init__(self, value):\n\n        self.__value = value\n\n    def __gt__(self, other):\n\n        return self.__value > other.__value\n\n    def __lt__(self, other):\n\n        return self.__value < other.__value\n\nsomething = Thing(100)\n\nnothing = Thing(0)\n\n# True\n\nsomething > nothing\n\n# False\n\nsomething < nothing\n\n# Error\n\nsomething + nothing\n```\n\n### pprint\n\nPython 的默认 print 函数就可以实现打印功能。但如果尝试打印较大的嵌套对象，就会发现打印结果很丑。\n\n这时 Python 标准库的 pretty printer 模块就可以发挥作用了。该模块可以将复杂的结构化对象以一种易读的格式打印出来。\n\n> pretty printer 模块：https://docs.python.org/3/library/pprint.html\n\nPython 开发者的必备技能之一就是处理复杂的数据结构。\n```python\nimport requests\n\nimport pprint\n\nurl = 'https://randomuser.me/api/?results=1'\n\nusers = requests.get(url).json()\n\npprint.pprint(users)\n\nQueue\n```\n\n### Python 支持多线程，而这是由 Python 标准库的 Queue 模块支持的。\n\n该模块允许用户实现队列（queue）数据结构。队列数据结构允许用户根据特定的规则添加和检索条目。\n\n『First in, first out』 (FIFO) 队列允许用户按照对象被添加的顺序来检索对象。『Last in, first out』 (LIFO) 队列允许用户首先访问最新添加的对象。\n\n最后，优先级队列（priority queue）允许用户根据对象对应的优先级类别来检索对象。\n\n如何使用 queue 在 Python 中实现多线程编程，示例详见：https://www.tutorialspoint.com/python3/python_multithreading.htm。\n\n### \\_\\_repr\\_\\_\n\n在 Python 中定义一个类别或对象时，以「官方」方式将对象表示为字符串很有用。例如：\n```bash\n>>> file = open('file.txt', 'r')\n\n>>> print(file)\n\n<open file 'file.txt', mode 'r' at 0x10d30aaf0>\n```\n这使代码 debug 变得简单很多。将字符串添加到类别定义，如下所示：\n\n```python\nclass someClass:\n\n    def __repr__(self):\n\n        return \"<some description here>\"\n\nsomeInstance = someClass()\n\n# prints <some description here>\n\nprint(someInstance)\n```\n\n### sh\n\nPython 是一种伟大的脚本语言，不过有时使用标准 os 和 subprocess 库会有点棘手。\n\nsh 库提供了一种不错的替代方案。\n\n> sh 库：http://amoffat.github.io/sh/\n\n该库允许用户像使用普通函数一样调用任意程序，这对自动化工作流和任务非常有用。\n```python\nfrom sh import *\n\nsh.pwd()\n\nsh.mkdir('new_folder')\n\nsh.touch('new_file.txt')\n\nsh.whoami()\n\nsh.echo('This is great!')\n```\n\n### 类型提示（Type hints）\n\nPython 是动态语言。在定义变量、函数、类别等时无需指定数据类型。\n\n这有利于缩短开发周期。但是，简单的类型错误（typing issue）导致的运行时错误真的太烦了。\n\n从 Python 3.5 版本开始，用户可以选择在定义函数时开启类型提示。\n```python\ndef addTwo(x : Int) -> Int:\n\n    return x + 2\n```\n你还可以定义类型别名：\n```python\nfrom typing import List\n\nVector = List[float]\n\nMatrix = List[Vector]\n\ndef addMatrix(a : Matrix, b : Matrix) -> Matrix:\n\n  result = []\n\n  for i,row in enumerate(a):\n\n    result_row =[]\n\n    for j, col in enumerate(row):\n\n      result_row += [a[i][j] + b[i][j]]\n\n    result += [result_row]\n\n  return result\n\nx = [[1.0, 0.0], [0.0, 1.0]]\n\ny = [[2.0, 1.0], [0.0, -2.0]]\n\nz = addMatrix(x, y)\n```\n尽管非强制，但类型注释可以使代码更易理解。\n\n它们还允许你在运行之前使用类型检查工具捕捉 TypeError。在进行大型复杂项目时执行此类操作是值得的。\n\n### uuid\n\n生成通用唯一标识符（Universally Unique ID，UUID）的一种快速简单方法就是使用 Python 标准库的 uuid 模块。\n\n> uuid 模块：https://docs.python.org/3/library/uuid.html\n\n```python\nimport uuid\n\nuser_id = uuid.uuid4()\n\nprint(user_id)\n```\n\n这创建了一个随机化后的 128 比特数字，该数字几乎必然是唯一的。\n\n事实上，可以生成 2¹²²可能的 UUID。这个数字超过了 5,000,000,000,000,000,000,000,000,000,000,000,000。\n\n在给定集合中找出重复数字的可能性极低。即使有一万亿 UUID，重复数字存在的概率也远远低于十亿分之一。\n\n### 虚拟环境（Virtual environment）\n\n这可能是 Python 中我最喜欢的事物了。\n\n你可能同时处理多个 Python 项目。不幸的是，有时候两个项目依赖于相同依赖项的不同版本。那你要安装哪个版本呢？\n\n幸运的是，Python 支持虚拟环境，这使得用户能够充分利用两种环境。见下列行：\n```bash\npython -m venv my-project\n\nsource my-project/bin/activate\n\npip install all-the-modules \n```\n现在你在一台机器上具备独立的多个 Python 版本了。问题解决！\n\n### wikipedia\n\nWikipedia 拥有一个很棒的 API，允许用户以编程方式访问巨大体量的免费知识和信息。\n\nwikipedia 模块使得访问该 API 非常便捷。\n\n> Wikipedia 模块：https://wikipedia.readthedocs.io/en/latest/quickstart.html\n\n```python\nimport wikipedia\n\nresult = wikipedia.page('freeCodeCamp')\n\nprint(result.summary)\n\nfor link in result.links:\n\n    print(link)\n```\n和真实的维基百科网站类似，该模块支持多种语言、页面消歧、随机页面检索，甚至还具备 donate() 方法。\n\n### xkcd\n\nhumour 是 Python 语言的一个关键特征，其名称来自英国喜剧片《蒙提·派森的飞行马戏团》(Monty Python and the Flying Circus)。Python 的很多官方文档引用了该喜剧片最著名的剧情。\n\n幽默感并不限于文档。试着运行下列行：\n```python\nimport antigravity\n```\n将打开 xkcd 画的 Python 漫画。不要改变这一点，Python。不要改变。\n\n### YAML\n\nYAML 代表 『YAML Ain』t Markup Language』。它是一种数据格式语言，是 JSON 的超集。\n\n与 JSON 不同，它可以存储更复杂的对象并引用自己的元素。你还可以编写注释，使其尤其适用于编写配置文件。\n\n> PyYAML 模块（https://pyyaml.org/wiki/PyYAMLDocumentation）可以让你在 Python 中使用 YAML。\n\n安装：\n```basj\n$ pip install pyyaml\n```\n然后导入到项目中：\n```python\nimport yaml\n```\nPyYAML 使你能够存储任何数据类型的 Python 对象，以及任何用户定义类别的实例。\n\n### zip\n\n给你支最后一招，非常酷。还在用两个列表来组成一部词典吗？\n```python\nkeys = ['a', 'b', 'c']\n\nvals = [1, 2, 3]\n\nzipped = dict(zip(keys, vals))\n```\nzip() 内置函数使用多个可迭代对象作为输入并返回元组列表。每个元组按位置索引对输入对象的元素进行分组。\n\n你也可以通过调用\\*zip() 来「解压」对象。\n\n\n原文链接：https://medium.freecodecamp.org/an-a-z-of-useful-python-tricks-b467524ee747","source":"_posts/some_python_tricks.md","raw":"title: Python常用的一些小技巧(语法糖 etc.)\ndate: 2018-09-17 14:27:22\ntags:\n- Python Tricks\n- Syntactic sugar\n- 语法糖\ncategories:\n- 随手摘录\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/python-tricks-title.jpg?raw=true\"\ntoc: true\ncomment: true\n---\n\n\n## Python 一些小技巧\n\n本文分享一些使用 Python 的技巧，顺序按照 A-Z 排列。\n\n### all or any\n\nPython 非常受欢迎的原因之一是其可读性和表达性。\n\n人们还经常把 Python 笑称为「可执行伪码（executable pseudocode）」。但是，当你可以编写这样的代码时，很难去反驳这种言论：\n\n```python\nx = [True, True, False]\n\nif any(x):\n\n    print(\"At least one True\")\n\nif all(x):\n\n    print(\"Not one False\")\n\nif any(x) and not all(x):\n\n    print(\"At least one True and one False\")\n```\n\n### bashplotlib\n\n想在控制台中绘图吗？\n\n```bash\n$ pip install bashplotlib\n```\n\n使用上面的行，即可在控制台中绘图。\n\n### collections\n\nPython 有一些很棒的默认数据类型，但有时候它们可能不会尽如你意。\n\n不过，Python 标准库提供了 collections 模块。这个方便的附加组件可以为你提供更多数据类型。\n\n> collections 模块：https://docs.python.org/3/library/collections.html\n\n```python\nfrom collections import OrderedDict, Counter\n\n# Remembers the order the keys are added!\n\nx = OrderedDict(a=1, b=2, c=3)\n\n# Counts the frequency of each character\n\ny = Counter(\"Hello World!\")\n```\n\n### dir\n\n你是否想过如何查看 Python 对象内部及其具有哪些属性？\n\n输入以下命令行：\n```bash\n>>> dir()\n\n>>> dir(\"Hello World\")\n\n>>> dir(dir)\n```\n\n当以交互方式运行 Python 时，这可能是一个非常有用的功能，并且可以动态地探索你正在使用的对象和模块。\n\n想要了解更多，点这里\n> https://docs.python.org/3/library/functions.html#dir\n\n\n### emoji\n\n是的，真的有。请点击这里\n> https://pypi.org/project/emoji/\n\n```bash\n$ pip install emoji\n```\n\n别以为我不知道你会偷偷试它→→\n```python\nfrom emoji import emojize\n\nprint(emojize(\":thumbs_up:\"))\n\n👍\n```\n\n### from \\_\\_future\\_\\_ import\n\nPython 流行的一个结果是，总有新版本正在开发中。新版本意味着新功能——除非你的版本已经过时。\n\n不过，别担心。\\_\\_future\\_\\_模块允许用户导入新版 Python 的功能。这简直就像时间旅行，或者魔法什么的。\n\n> \\_\\_future\\_\\_模块：https://docs.python.org/2/library/\\*future\\*.html\n\n```python\nfrom \\_\\_future\\_\\_ import print_function\n\nprint(\"Hello World!\")\n```\n\n### geopy\n\n地理（Geography）对于程序员来说可能是一个具有挑战性的领域。但是 geopy 模块让它变得异常简单。\n\n> geopy 模块：https://geopy.readthedocs.io/en/latest/\n```bash\n$ pip install geopy\n```\n\n它通过抽取一系列不同地理编码服务的 API 来工作，使用户获取一个地方的完整街道地址、纬度、经度，甚至海拔高度。\n\n另外一个有用的功能是距离：它可以用你喜欢的度量单位计算出两个位置之间的距离。\n\n```python\nfrom geopy import GoogleV3\n\nplace = \"221b Baker Street, London\"\n\nlocation = GoogleV3().geocode(place)\n\nprint(location.address)\n\nprint(location.location)\n```\n\n### howdoi\n\n陷入编码问题，却不记得以前见过的解决方案？需要检查 StackOverflow，但不想离开终端？\n\n那么你需要这个有用的命令行工具：https://github.com/gleitz/howdoi。\n\n```bash\n$ pip install howdoi\n```\n无论你有什么问题都可以问它，它会尽力回答。\n```bash\n$ howdoi vertical align css\n\n$ howdoi for loop in java\n\n$ howdoi undo commits in git\n```\n但是请注意——它会从 StackOverflow 的最高票答案中抓取代码。也就是说它提供的信息并非总是有用……\n```bash\n$ howdoi exit vim\n```\n### inspect\n\nPython 的 inspect 模块非常有助于理解问题背后的详情。你甚至可以在 inspect 模块上调用其方法！\n\n> inspect 模块：https://docs.python.org/3/library/inspect.html\n\n下面的代码示例使用 inspect.getsource() 打印自己的源代码。它还使用 inspect.getmodule() 打印定义它的模块。\n\n最后一行代码打印出自己的行号。\n```python\nimport inspect\n\nprint(inspect.getsource(inspect.getsource))\n\nprint(inspect.getmodule(inspect.getmodule))\n\nprint(inspect.currentframe().f_lineno)\n```\n\n当然，除了这些琐碎的用途之外，inspect 模块还能帮助你理解代码正在做的事。你还可以用它编写自文档化代码。\n\n### Jedi\n\nJedi 库是一个自动完成和代码分析的库。它使代码编写变得更快、效果更高。\n\n除非你正在开发自己的 IDE，否则你肯定会对使用 Jedi 库作为编辑插件很感兴趣。\n\n> Jedi：https://jedi.readthedocs.io/en/latest/docs/usage.html\n\n你可能已经在使用 Jedi 了。IPython 项目就使用 Jedi 实现代码自动完成功能。\n\n### \\*\\*kwargs\n\n学习任何语言时都会遇到很多里程碑。对于 Python 来说，理解神秘的\\*\\*kwargs 语法可能算是其中之一。\n\n词典对象前面的双星号可以让你把该词典的内容作为命名参数输入到函数中。\n\n词典的秘钥是参数名，值是传递给函数的值。你甚至不需要称它为 kwargs！\n\n```python\ndictionary = {\"a\": 1, \"b\": 2}\n\ndef someFunction(a, b):\n\n    print(a + b)\n\n    return\n\n# these do the same thing:\n\nsomeFunction(**dictionary)\n\nsomeFunction(a=1, b=2)\n```\n\n当你想编写能够处理事先未定义的命名参数的函数时，这个很有用。\n\n### 列表推导式（List comprehensions）\n\n我最喜欢 Python 编程的原因之一是它的列表推导式\n> https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions\n\n这些表达式使得编写干净易读的代码变得很容易，那些代码读起来几乎像自然语言一样。\n\n> 关于它们的更多使用信息请查看：https://www.learnpython.org/en/List_Comprehensions\n\n```python\nnumbers = [1,2,3,4,5,6,7]\n\nevens = [x for x in numbers if x % 2 is 0]\n\nodds = [y for y in numbers if y not in evens]\n\ncities = ['London', 'Dublin', 'Oslo']\n\ndef visit(city):\n\n    print(\"Welcome to \"+city)\n\nfor city in cities:\n\n    visit(city)\n```\n### map\n\nPython 通过许多内置功能支持函数式编程。map() 函数是最有用的函数之一——特别是当它与 lambda 函数结合使用时。\n\n> lambda 函数：https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions\n\n```python\nx = [1, 2, 3]\n\ny = map(lambda x : x + 1 , x)\n\n# prints out [2,3,4]\n\nprint(list(y))\n```\n\n在上面的例子中，map() 将一个简单的 lambda 函数应用于 x 中的每个元素。它返回一个 map 对象，该对象可以被转换成可迭代的对象，如列表或元组。\n\n### newspaper3k\n\n如果你之前没有见过它，那么我建议你先查看\n> https://pypi.org/project/newspaper3k/。\n\n它可以帮助你从大量顶级国际出版物中检索到新闻文章和相关元数据。你可以检索图像、文本和作者名。\n\n它还有一些内置的 NLP 功能。\n\n> 地址：https://newspaper.readthedocs.io/en/latest/user_guide/quickstart.html#performing-nlp-on-an-article\n\n如果你想在下一个项目中使用 BeautifulSoup 或其它 DIY 网页抓取库，那么不如使用$ pip install newspaper3k，既省时又省事，何乐而不为呢？\n\n### 运算符重载（Operator overloading）\n\nPython 支持运算符重载。\n\n它实际上是一个简单的概念。你有没有想过为什么 Python 允许用户使用 + 运算符来将数字相加，并级联字符串？这就是运算符重载在发挥作用。\n\n你可以使用 Python 的标准运算符号来定义对象，这样你可以在与这些对象相关的语境中使用它们。\n```python\nclass Thing:\n\n    def __init__(self, value):\n\n        self.__value = value\n\n    def __gt__(self, other):\n\n        return self.__value > other.__value\n\n    def __lt__(self, other):\n\n        return self.__value < other.__value\n\nsomething = Thing(100)\n\nnothing = Thing(0)\n\n# True\n\nsomething > nothing\n\n# False\n\nsomething < nothing\n\n# Error\n\nsomething + nothing\n```\n\n### pprint\n\nPython 的默认 print 函数就可以实现打印功能。但如果尝试打印较大的嵌套对象，就会发现打印结果很丑。\n\n这时 Python 标准库的 pretty printer 模块就可以发挥作用了。该模块可以将复杂的结构化对象以一种易读的格式打印出来。\n\n> pretty printer 模块：https://docs.python.org/3/library/pprint.html\n\nPython 开发者的必备技能之一就是处理复杂的数据结构。\n```python\nimport requests\n\nimport pprint\n\nurl = 'https://randomuser.me/api/?results=1'\n\nusers = requests.get(url).json()\n\npprint.pprint(users)\n\nQueue\n```\n\n### Python 支持多线程，而这是由 Python 标准库的 Queue 模块支持的。\n\n该模块允许用户实现队列（queue）数据结构。队列数据结构允许用户根据特定的规则添加和检索条目。\n\n『First in, first out』 (FIFO) 队列允许用户按照对象被添加的顺序来检索对象。『Last in, first out』 (LIFO) 队列允许用户首先访问最新添加的对象。\n\n最后，优先级队列（priority queue）允许用户根据对象对应的优先级类别来检索对象。\n\n如何使用 queue 在 Python 中实现多线程编程，示例详见：https://www.tutorialspoint.com/python3/python_multithreading.htm。\n\n### \\_\\_repr\\_\\_\n\n在 Python 中定义一个类别或对象时，以「官方」方式将对象表示为字符串很有用。例如：\n```bash\n>>> file = open('file.txt', 'r')\n\n>>> print(file)\n\n<open file 'file.txt', mode 'r' at 0x10d30aaf0>\n```\n这使代码 debug 变得简单很多。将字符串添加到类别定义，如下所示：\n\n```python\nclass someClass:\n\n    def __repr__(self):\n\n        return \"<some description here>\"\n\nsomeInstance = someClass()\n\n# prints <some description here>\n\nprint(someInstance)\n```\n\n### sh\n\nPython 是一种伟大的脚本语言，不过有时使用标准 os 和 subprocess 库会有点棘手。\n\nsh 库提供了一种不错的替代方案。\n\n> sh 库：http://amoffat.github.io/sh/\n\n该库允许用户像使用普通函数一样调用任意程序，这对自动化工作流和任务非常有用。\n```python\nfrom sh import *\n\nsh.pwd()\n\nsh.mkdir('new_folder')\n\nsh.touch('new_file.txt')\n\nsh.whoami()\n\nsh.echo('This is great!')\n```\n\n### 类型提示（Type hints）\n\nPython 是动态语言。在定义变量、函数、类别等时无需指定数据类型。\n\n这有利于缩短开发周期。但是，简单的类型错误（typing issue）导致的运行时错误真的太烦了。\n\n从 Python 3.5 版本开始，用户可以选择在定义函数时开启类型提示。\n```python\ndef addTwo(x : Int) -> Int:\n\n    return x + 2\n```\n你还可以定义类型别名：\n```python\nfrom typing import List\n\nVector = List[float]\n\nMatrix = List[Vector]\n\ndef addMatrix(a : Matrix, b : Matrix) -> Matrix:\n\n  result = []\n\n  for i,row in enumerate(a):\n\n    result_row =[]\n\n    for j, col in enumerate(row):\n\n      result_row += [a[i][j] + b[i][j]]\n\n    result += [result_row]\n\n  return result\n\nx = [[1.0, 0.0], [0.0, 1.0]]\n\ny = [[2.0, 1.0], [0.0, -2.0]]\n\nz = addMatrix(x, y)\n```\n尽管非强制，但类型注释可以使代码更易理解。\n\n它们还允许你在运行之前使用类型检查工具捕捉 TypeError。在进行大型复杂项目时执行此类操作是值得的。\n\n### uuid\n\n生成通用唯一标识符（Universally Unique ID，UUID）的一种快速简单方法就是使用 Python 标准库的 uuid 模块。\n\n> uuid 模块：https://docs.python.org/3/library/uuid.html\n\n```python\nimport uuid\n\nuser_id = uuid.uuid4()\n\nprint(user_id)\n```\n\n这创建了一个随机化后的 128 比特数字，该数字几乎必然是唯一的。\n\n事实上，可以生成 2¹²²可能的 UUID。这个数字超过了 5,000,000,000,000,000,000,000,000,000,000,000,000。\n\n在给定集合中找出重复数字的可能性极低。即使有一万亿 UUID，重复数字存在的概率也远远低于十亿分之一。\n\n### 虚拟环境（Virtual environment）\n\n这可能是 Python 中我最喜欢的事物了。\n\n你可能同时处理多个 Python 项目。不幸的是，有时候两个项目依赖于相同依赖项的不同版本。那你要安装哪个版本呢？\n\n幸运的是，Python 支持虚拟环境，这使得用户能够充分利用两种环境。见下列行：\n```bash\npython -m venv my-project\n\nsource my-project/bin/activate\n\npip install all-the-modules \n```\n现在你在一台机器上具备独立的多个 Python 版本了。问题解决！\n\n### wikipedia\n\nWikipedia 拥有一个很棒的 API，允许用户以编程方式访问巨大体量的免费知识和信息。\n\nwikipedia 模块使得访问该 API 非常便捷。\n\n> Wikipedia 模块：https://wikipedia.readthedocs.io/en/latest/quickstart.html\n\n```python\nimport wikipedia\n\nresult = wikipedia.page('freeCodeCamp')\n\nprint(result.summary)\n\nfor link in result.links:\n\n    print(link)\n```\n和真实的维基百科网站类似，该模块支持多种语言、页面消歧、随机页面检索，甚至还具备 donate() 方法。\n\n### xkcd\n\nhumour 是 Python 语言的一个关键特征，其名称来自英国喜剧片《蒙提·派森的飞行马戏团》(Monty Python and the Flying Circus)。Python 的很多官方文档引用了该喜剧片最著名的剧情。\n\n幽默感并不限于文档。试着运行下列行：\n```python\nimport antigravity\n```\n将打开 xkcd 画的 Python 漫画。不要改变这一点，Python。不要改变。\n\n### YAML\n\nYAML 代表 『YAML Ain』t Markup Language』。它是一种数据格式语言，是 JSON 的超集。\n\n与 JSON 不同，它可以存储更复杂的对象并引用自己的元素。你还可以编写注释，使其尤其适用于编写配置文件。\n\n> PyYAML 模块（https://pyyaml.org/wiki/PyYAMLDocumentation）可以让你在 Python 中使用 YAML。\n\n安装：\n```basj\n$ pip install pyyaml\n```\n然后导入到项目中：\n```python\nimport yaml\n```\nPyYAML 使你能够存储任何数据类型的 Python 对象，以及任何用户定义类别的实例。\n\n### zip\n\n给你支最后一招，非常酷。还在用两个列表来组成一部词典吗？\n```python\nkeys = ['a', 'b', 'c']\n\nvals = [1, 2, 3]\n\nzipped = dict(zip(keys, vals))\n```\nzip() 内置函数使用多个可迭代对象作为输入并返回元组列表。每个元组按位置索引对输入对象的元素进行分组。\n\n你也可以通过调用\\*zip() 来「解压」对象。\n\n\n原文链接：https://medium.freecodecamp.org/an-a-z-of-useful-python-tricks-b467524ee747","slug":"some_python_tricks","published":1,"updated":"2019-04-25T01:27:25.828Z","comments":1,"layout":"post","link":"","_id":"cjuw5c6gr003xdhyf5qoa8r4s","content":"<h2 id=\"Python-一些小技巧\"><a href=\"#Python-一些小技巧\" class=\"headerlink\" title=\"Python 一些小技巧\"></a>Python 一些小技巧</h2><p>本文分享一些使用 Python 的技巧，顺序按照 A-Z 排列。</p>\n<h3 id=\"all-or-any\"><a href=\"#all-or-any\" class=\"headerlink\" title=\"all or any\"></a>all or any</h3><p>Python 非常受欢迎的原因之一是其可读性和表达性。</p>\n<p>人们还经常把 Python 笑称为「可执行伪码（executable pseudocode）」。但是，当你可以编写这样的代码时，很难去反驳这种言论：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = [<span class=\"literal\">True</span>, <span class=\"literal\">True</span>, <span class=\"literal\">False</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> any(x):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"At least one True\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> all(x):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"Not one False\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> any(x) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> all(x):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"At least one True and one False\"</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"bashplotlib\"><a href=\"#bashplotlib\" class=\"headerlink\" title=\"bashplotlib\"></a>bashplotlib</h3><p>想在控制台中绘图吗？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install bashplotlib</span><br></pre></td></tr></table></figure>\n<p>使用上面的行，即可在控制台中绘图。</p>\n<h3 id=\"collections\"><a href=\"#collections\" class=\"headerlink\" title=\"collections\"></a>collections</h3><p>Python 有一些很棒的默认数据类型，但有时候它们可能不会尽如你意。</p>\n<p>不过，Python 标准库提供了 collections 模块。这个方便的附加组件可以为你提供更多数据类型。</p>\n<blockquote>\n<p>collections 模块：<a href=\"https://docs.python.org/3/library/collections.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/library/collections.html</a></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> OrderedDict, Counter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Remembers the order the keys are added!</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = OrderedDict(a=<span class=\"number\">1</span>, b=<span class=\"number\">2</span>, c=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Counts the frequency of each character</span></span><br><span class=\"line\"></span><br><span class=\"line\">y = Counter(<span class=\"string\">\"Hello World!\"</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"dir\"><a href=\"#dir\" class=\"headerlink\" title=\"dir\"></a>dir</h3><p>你是否想过如何查看 Python 对象内部及其具有哪些属性？</p>\n<p>输入以下命令行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; dir()</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; dir(<span class=\"string\">\"Hello World\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; dir(dir)</span><br></pre></td></tr></table></figure></p>\n<p>当以交互方式运行 Python 时，这可能是一个非常有用的功能，并且可以动态地探索你正在使用的对象和模块。</p>\n<p>想要了解更多，点这里</p>\n<blockquote>\n<p><a href=\"https://docs.python.org/3/library/functions.html#dir\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/library/functions.html#dir</a></p>\n</blockquote>\n<h3 id=\"emoji\"><a href=\"#emoji\" class=\"headerlink\" title=\"emoji\"></a>emoji</h3><p>是的，真的有。请点击这里</p>\n<blockquote>\n<p><a href=\"https://pypi.org/project/emoji/\" target=\"_blank\" rel=\"noopener\">https://pypi.org/project/emoji/</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install emoji</span><br></pre></td></tr></table></figure>\n<p>别以为我不知道你会偷偷试它→→<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> emoji <span class=\"keyword\">import</span> emojize</span><br><span class=\"line\"></span><br><span class=\"line\">print(emojize(<span class=\"string\">\":thumbs_up:\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">👍</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"from-future-import\"><a href=\"#from-future-import\" class=\"headerlink\" title=\"from __future__ import\"></a>from __future__ import</h3><p>Python 流行的一个结果是，总有新版本正在开发中。新版本意味着新功能——除非你的版本已经过时。</p>\n<p>不过，别担心。__future__模块允许用户导入新版 Python 的功能。这简直就像时间旅行，或者魔法什么的。</p>\n<blockquote>\n<p>__future__模块：<a href=\"https://docs.python.org/2/library/\\*future\\*.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/2/library/\\*future\\*.html</a></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> \\_\\_future\\_\\_ <span class=\"keyword\">import</span> print_function</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"Hello World!\"</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"geopy\"><a href=\"#geopy\" class=\"headerlink\" title=\"geopy\"></a>geopy</h3><p>地理（Geography）对于程序员来说可能是一个具有挑战性的领域。但是 geopy 模块让它变得异常简单。</p>\n<blockquote>\n<p>geopy 模块：<a href=\"https://geopy.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">https://geopy.readthedocs.io/en/latest/</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install geopy</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>它通过抽取一系列不同地理编码服务的 API 来工作，使用户获取一个地方的完整街道地址、纬度、经度，甚至海拔高度。</p>\n<p>另外一个有用的功能是距离：它可以用你喜欢的度量单位计算出两个位置之间的距离。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> geopy <span class=\"keyword\">import</span> GoogleV3</span><br><span class=\"line\"></span><br><span class=\"line\">place = <span class=\"string\">\"221b Baker Street, London\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">location = GoogleV3().geocode(place)</span><br><span class=\"line\"></span><br><span class=\"line\">print(location.address)</span><br><span class=\"line\"></span><br><span class=\"line\">print(location.location)</span><br></pre></td></tr></table></figure>\n<h3 id=\"howdoi\"><a href=\"#howdoi\" class=\"headerlink\" title=\"howdoi\"></a>howdoi</h3><p>陷入编码问题，却不记得以前见过的解决方案？需要检查 StackOverflow，但不想离开终端？</p>\n<p>那么你需要这个有用的命令行工具：<a href=\"https://github.com/gleitz/howdoi。\" target=\"_blank\" rel=\"noopener\">https://github.com/gleitz/howdoi。</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install howdoi</span><br></pre></td></tr></table></figure>\n<p>无论你有什么问题都可以问它，它会尽力回答。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ howdoi vertical align css</span><br><span class=\"line\"></span><br><span class=\"line\">$ howdoi <span class=\"keyword\">for</span> loop <span class=\"keyword\">in</span> java</span><br><span class=\"line\"></span><br><span class=\"line\">$ howdoi undo commits <span class=\"keyword\">in</span> git</span><br></pre></td></tr></table></figure></p>\n<p>但是请注意——它会从 StackOverflow 的最高票答案中抓取代码。也就是说它提供的信息并非总是有用……<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ howdoi <span class=\"built_in\">exit</span> vim</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"inspect\"><a href=\"#inspect\" class=\"headerlink\" title=\"inspect\"></a>inspect</h3><p>Python 的 inspect 模块非常有助于理解问题背后的详情。你甚至可以在 inspect 模块上调用其方法！</p>\n<blockquote>\n<p>inspect 模块：<a href=\"https://docs.python.org/3/library/inspect.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/library/inspect.html</a></p>\n</blockquote>\n<p>下面的代码示例使用 inspect.getsource() 打印自己的源代码。它还使用 inspect.getmodule() 打印定义它的模块。</p>\n<p>最后一行代码打印出自己的行号。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> inspect</span><br><span class=\"line\"></span><br><span class=\"line\">print(inspect.getsource(inspect.getsource))</span><br><span class=\"line\"></span><br><span class=\"line\">print(inspect.getmodule(inspect.getmodule))</span><br><span class=\"line\"></span><br><span class=\"line\">print(inspect.currentframe().f_lineno)</span><br></pre></td></tr></table></figure></p>\n<p>当然，除了这些琐碎的用途之外，inspect 模块还能帮助你理解代码正在做的事。你还可以用它编写自文档化代码。</p>\n<h3 id=\"Jedi\"><a href=\"#Jedi\" class=\"headerlink\" title=\"Jedi\"></a>Jedi</h3><p>Jedi 库是一个自动完成和代码分析的库。它使代码编写变得更快、效果更高。</p>\n<p>除非你正在开发自己的 IDE，否则你肯定会对使用 Jedi 库作为编辑插件很感兴趣。</p>\n<blockquote>\n<p>Jedi：<a href=\"https://jedi.readthedocs.io/en/latest/docs/usage.html\" target=\"_blank\" rel=\"noopener\">https://jedi.readthedocs.io/en/latest/docs/usage.html</a></p>\n</blockquote>\n<p>你可能已经在使用 Jedi 了。IPython 项目就使用 Jedi 实现代码自动完成功能。</p>\n<h3 id=\"kwargs\"><a href=\"#kwargs\" class=\"headerlink\" title=\"**kwargs\"></a>**kwargs</h3><p>学习任何语言时都会遇到很多里程碑。对于 Python 来说，理解神秘的**kwargs 语法可能算是其中之一。</p>\n<p>词典对象前面的双星号可以让你把该词典的内容作为命名参数输入到函数中。</p>\n<p>词典的秘钥是参数名，值是传递给函数的值。你甚至不需要称它为 kwargs！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dictionary = &#123;<span class=\"string\">\"a\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">someFunction</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(a + b)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># these do the same thing:</span></span><br><span class=\"line\"></span><br><span class=\"line\">someFunction(**dictionary)</span><br><span class=\"line\"></span><br><span class=\"line\">someFunction(a=<span class=\"number\">1</span>, b=<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>当你想编写能够处理事先未定义的命名参数的函数时，这个很有用。</p>\n<h3 id=\"列表推导式（List-comprehensions）\"><a href=\"#列表推导式（List-comprehensions）\" class=\"headerlink\" title=\"列表推导式（List comprehensions）\"></a>列表推导式（List comprehensions）</h3><p>我最喜欢 Python 编程的原因之一是它的列表推导式</p>\n<blockquote>\n<p><a href=\"https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions</a></p>\n</blockquote>\n<p>这些表达式使得编写干净易读的代码变得很容易，那些代码读起来几乎像自然语言一样。</p>\n<blockquote>\n<p>关于它们的更多使用信息请查看：<a href=\"https://www.learnpython.org/en/List_Comprehensions\" target=\"_blank\" rel=\"noopener\">https://www.learnpython.org/en/List_Comprehensions</a></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">evens = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> numbers <span class=\"keyword\">if</span> x % <span class=\"number\">2</span> <span class=\"keyword\">is</span> <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">odds = [y <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> numbers <span class=\"keyword\">if</span> y <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> evens]</span><br><span class=\"line\"></span><br><span class=\"line\">cities = [<span class=\"string\">'London'</span>, <span class=\"string\">'Dublin'</span>, <span class=\"string\">'Oslo'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">visit</span><span class=\"params\">(city)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"Welcome to \"</span>+city)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> city <span class=\"keyword\">in</span> cities:</span><br><span class=\"line\"></span><br><span class=\"line\">    visit(city)</span><br></pre></td></tr></table></figure>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><p>Python 通过许多内置功能支持函数式编程。map() 函数是最有用的函数之一——特别是当它与 lambda 函数结合使用时。</p>\n<blockquote>\n<p>lambda 函数：<a href=\"https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions</a></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">y = map(<span class=\"keyword\">lambda</span> x : x + <span class=\"number\">1</span> , x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># prints out [2,3,4]</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(list(y))</span><br></pre></td></tr></table></figure>\n<p>在上面的例子中，map() 将一个简单的 lambda 函数应用于 x 中的每个元素。它返回一个 map 对象，该对象可以被转换成可迭代的对象，如列表或元组。</p>\n<h3 id=\"newspaper3k\"><a href=\"#newspaper3k\" class=\"headerlink\" title=\"newspaper3k\"></a>newspaper3k</h3><p>如果你之前没有见过它，那么我建议你先查看</p>\n<blockquote>\n<p><a href=\"https://pypi.org/project/newspaper3k/。\" target=\"_blank\" rel=\"noopener\">https://pypi.org/project/newspaper3k/。</a></p>\n</blockquote>\n<p>它可以帮助你从大量顶级国际出版物中检索到新闻文章和相关元数据。你可以检索图像、文本和作者名。</p>\n<p>它还有一些内置的 NLP 功能。</p>\n<blockquote>\n<p>地址：<a href=\"https://newspaper.readthedocs.io/en/latest/user_guide/quickstart.html#performing-nlp-on-an-article\" target=\"_blank\" rel=\"noopener\">https://newspaper.readthedocs.io/en/latest/user_guide/quickstart.html#performing-nlp-on-an-article</a></p>\n</blockquote>\n<p>如果你想在下一个项目中使用 BeautifulSoup 或其它 DIY 网页抓取库，那么不如使用$ pip install newspaper3k，既省时又省事，何乐而不为呢？</p>\n<h3 id=\"运算符重载（Operator-overloading）\"><a href=\"#运算符重载（Operator-overloading）\" class=\"headerlink\" title=\"运算符重载（Operator overloading）\"></a>运算符重载（Operator overloading）</h3><p>Python 支持运算符重载。</p>\n<p>它实际上是一个简单的概念。你有没有想过为什么 Python 允许用户使用 + 运算符来将数字相加，并级联字符串？这就是运算符重载在发挥作用。</p>\n<p>你可以使用 Python 的标准运算符号来定义对象，这样你可以在与这些对象相关的语境中使用它们。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thing</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.__value = value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__gt__</span><span class=\"params\">(self, other)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__value &gt; other.__value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__lt__</span><span class=\"params\">(self, other)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__value &lt; other.__value</span><br><span class=\"line\"></span><br><span class=\"line\">something = Thing(<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">nothing = Thing(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># True</span></span><br><span class=\"line\"></span><br><span class=\"line\">something &gt; nothing</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># False</span></span><br><span class=\"line\"></span><br><span class=\"line\">something &lt; nothing</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Error</span></span><br><span class=\"line\"></span><br><span class=\"line\">something + nothing</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"pprint\"><a href=\"#pprint\" class=\"headerlink\" title=\"pprint\"></a>pprint</h3><p>Python 的默认 print 函数就可以实现打印功能。但如果尝试打印较大的嵌套对象，就会发现打印结果很丑。</p>\n<p>这时 Python 标准库的 pretty printer 模块就可以发挥作用了。该模块可以将复杂的结构化对象以一种易读的格式打印出来。</p>\n<blockquote>\n<p>pretty printer 模块：<a href=\"https://docs.python.org/3/library/pprint.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/library/pprint.html</a></p>\n</blockquote>\n<p>Python 开发者的必备技能之一就是处理复杂的数据结构。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pprint</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">'https://randomuser.me/api/?results=1'</span></span><br><span class=\"line\"></span><br><span class=\"line\">users = requests.get(url).json()</span><br><span class=\"line\"></span><br><span class=\"line\">pprint.pprint(users)</span><br><span class=\"line\"></span><br><span class=\"line\">Queue</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Python-支持多线程，而这是由-Python-标准库的-Queue-模块支持的。\"><a href=\"#Python-支持多线程，而这是由-Python-标准库的-Queue-模块支持的。\" class=\"headerlink\" title=\"Python 支持多线程，而这是由 Python 标准库的 Queue 模块支持的。\"></a>Python 支持多线程，而这是由 Python 标准库的 Queue 模块支持的。</h3><p>该模块允许用户实现队列（queue）数据结构。队列数据结构允许用户根据特定的规则添加和检索条目。</p>\n<p>『First in, first out』 (FIFO) 队列允许用户按照对象被添加的顺序来检索对象。『Last in, first out』 (LIFO) 队列允许用户首先访问最新添加的对象。</p>\n<p>最后，优先级队列（priority queue）允许用户根据对象对应的优先级类别来检索对象。</p>\n<p>如何使用 queue 在 Python 中实现多线程编程，示例详见：<a href=\"https://www.tutorialspoint.com/python3/python_multithreading.htm。\" target=\"_blank\" rel=\"noopener\">https://www.tutorialspoint.com/python3/python_multithreading.htm。</a></p>\n<h3 id=\"repr\"><a href=\"#repr\" class=\"headerlink\" title=\"__repr__\"></a>__repr__</h3><p>在 Python 中定义一个类别或对象时，以「官方」方式将对象表示为字符串很有用。例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; file = open(<span class=\"string\">'file.txt'</span>, <span class=\"string\">'r'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; <span class=\"built_in\">print</span>(file)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;open file <span class=\"string\">'file.txt'</span>, mode <span class=\"string\">'r'</span> at 0x10d30aaf0&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这使代码 debug 变得简单很多。将字符串添加到类别定义，如下所示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">someClass</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;some description here&gt;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">someInstance = someClass()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># prints &lt;some description here&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(someInstance)</span><br></pre></td></tr></table></figure>\n<h3 id=\"sh\"><a href=\"#sh\" class=\"headerlink\" title=\"sh\"></a>sh</h3><p>Python 是一种伟大的脚本语言，不过有时使用标准 os 和 subprocess 库会有点棘手。</p>\n<p>sh 库提供了一种不错的替代方案。</p>\n<blockquote>\n<p>sh 库：<a href=\"http://amoffat.github.io/sh/\" target=\"_blank\" rel=\"noopener\">http://amoffat.github.io/sh/</a></p>\n</blockquote>\n<p>该库允许用户像使用普通函数一样调用任意程序，这对自动化工作流和任务非常有用。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sh <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">sh.pwd()</span><br><span class=\"line\"></span><br><span class=\"line\">sh.mkdir(<span class=\"string\">'new_folder'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sh.touch(<span class=\"string\">'new_file.txt'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sh.whoami()</span><br><span class=\"line\"></span><br><span class=\"line\">sh.echo(<span class=\"string\">'This is great!'</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"类型提示（Type-hints）\"><a href=\"#类型提示（Type-hints）\" class=\"headerlink\" title=\"类型提示（Type hints）\"></a>类型提示（Type hints）</h3><p>Python 是动态语言。在定义变量、函数、类别等时无需指定数据类型。</p>\n<p>这有利于缩短开发周期。但是，简单的类型错误（typing issue）导致的运行时错误真的太烦了。</p>\n<p>从 Python 3.5 版本开始，用户可以选择在定义函数时开启类型提示。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addTwo</span><span class=\"params\">(x : Int)</span> -&gt; Int:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + <span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<p>你还可以定义类型别名：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> List</span><br><span class=\"line\"></span><br><span class=\"line\">Vector = List[float]</span><br><span class=\"line\"></span><br><span class=\"line\">Matrix = List[Vector]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addMatrix</span><span class=\"params\">(a : Matrix, b : Matrix)</span> -&gt; Matrix:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  result = []</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i,row <span class=\"keyword\">in</span> enumerate(a):</span><br><span class=\"line\"></span><br><span class=\"line\">    result_row =[]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j, col <span class=\"keyword\">in</span> enumerate(row):</span><br><span class=\"line\"></span><br><span class=\"line\">      result_row += [a[i][j] + b[i][j]]</span><br><span class=\"line\"></span><br><span class=\"line\">    result += [result_row]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">x = [[<span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>], [<span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">y = [[<span class=\"number\">2.0</span>, <span class=\"number\">1.0</span>], [<span class=\"number\">0.0</span>, <span class=\"number\">-2.0</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">z = addMatrix(x, y)</span><br></pre></td></tr></table></figure></p>\n<p>尽管非强制，但类型注释可以使代码更易理解。</p>\n<p>它们还允许你在运行之前使用类型检查工具捕捉 TypeError。在进行大型复杂项目时执行此类操作是值得的。</p>\n<h3 id=\"uuid\"><a href=\"#uuid\" class=\"headerlink\" title=\"uuid\"></a>uuid</h3><p>生成通用唯一标识符（Universally Unique ID，UUID）的一种快速简单方法就是使用 Python 标准库的 uuid 模块。</p>\n<blockquote>\n<p>uuid 模块：<a href=\"https://docs.python.org/3/library/uuid.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/library/uuid.html</a></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> uuid</span><br><span class=\"line\"></span><br><span class=\"line\">user_id = uuid.uuid4()</span><br><span class=\"line\"></span><br><span class=\"line\">print(user_id)</span><br></pre></td></tr></table></figure>\n<p>这创建了一个随机化后的 128 比特数字，该数字几乎必然是唯一的。</p>\n<p>事实上，可以生成 2¹²²可能的 UUID。这个数字超过了 5,000,000,000,000,000,000,000,000,000,000,000,000。</p>\n<p>在给定集合中找出重复数字的可能性极低。即使有一万亿 UUID，重复数字存在的概率也远远低于十亿分之一。</p>\n<h3 id=\"虚拟环境（Virtual-environment）\"><a href=\"#虚拟环境（Virtual-environment）\" class=\"headerlink\" title=\"虚拟环境（Virtual environment）\"></a>虚拟环境（Virtual environment）</h3><p>这可能是 Python 中我最喜欢的事物了。</p>\n<p>你可能同时处理多个 Python 项目。不幸的是，有时候两个项目依赖于相同依赖项的不同版本。那你要安装哪个版本呢？</p>\n<p>幸运的是，Python 支持虚拟环境，这使得用户能够充分利用两种环境。见下列行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m venv my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> my-project/bin/activate</span><br><span class=\"line\"></span><br><span class=\"line\">pip install all-the-modules</span><br></pre></td></tr></table></figure></p>\n<p>现在你在一台机器上具备独立的多个 Python 版本了。问题解决！</p>\n<h3 id=\"wikipedia\"><a href=\"#wikipedia\" class=\"headerlink\" title=\"wikipedia\"></a>wikipedia</h3><p>Wikipedia 拥有一个很棒的 API，允许用户以编程方式访问巨大体量的免费知识和信息。</p>\n<p>wikipedia 模块使得访问该 API 非常便捷。</p>\n<blockquote>\n<p>Wikipedia 模块：<a href=\"https://wikipedia.readthedocs.io/en/latest/quickstart.html\" target=\"_blank\" rel=\"noopener\">https://wikipedia.readthedocs.io/en/latest/quickstart.html</a></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> wikipedia</span><br><span class=\"line\"></span><br><span class=\"line\">result = wikipedia.page(<span class=\"string\">'freeCodeCamp'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result.summary)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> link <span class=\"keyword\">in</span> result.links:</span><br><span class=\"line\"></span><br><span class=\"line\">    print(link)</span><br></pre></td></tr></table></figure>\n<p>和真实的维基百科网站类似，该模块支持多种语言、页面消歧、随机页面检索，甚至还具备 donate() 方法。</p>\n<h3 id=\"xkcd\"><a href=\"#xkcd\" class=\"headerlink\" title=\"xkcd\"></a>xkcd</h3><p>humour 是 Python 语言的一个关键特征，其名称来自英国喜剧片《蒙提·派森的飞行马戏团》(Monty Python and the Flying Circus)。Python 的很多官方文档引用了该喜剧片最著名的剧情。</p>\n<p>幽默感并不限于文档。试着运行下列行：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> antigravity</span><br></pre></td></tr></table></figure></p>\n<p>将打开 xkcd 画的 Python 漫画。不要改变这一点，Python。不要改变。</p>\n<h3 id=\"YAML\"><a href=\"#YAML\" class=\"headerlink\" title=\"YAML\"></a>YAML</h3><p>YAML 代表 『YAML Ain』t Markup Language』。它是一种数据格式语言，是 JSON 的超集。</p>\n<p>与 JSON 不同，它可以存储更复杂的对象并引用自己的元素。你还可以编写注释，使其尤其适用于编写配置文件。</p>\n<blockquote>\n<p>PyYAML 模块（<a href=\"https://pyyaml.org/wiki/PyYAMLDocumentation）可以让你在\" target=\"_blank\" rel=\"noopener\">https://pyyaml.org/wiki/PyYAMLDocumentation）可以让你在</a> Python 中使用 YAML。</p>\n</blockquote>\n<p>安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install pyyaml</span><br></pre></td></tr></table></figure></p>\n<p>然后导入到项目中：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> yaml</span><br></pre></td></tr></table></figure></p>\n<p>PyYAML 使你能够存储任何数据类型的 Python 对象，以及任何用户定义类别的实例。</p>\n<h3 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a>zip</h3><p>给你支最后一招，非常酷。还在用两个列表来组成一部词典吗？<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keys = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">vals = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">zipped = dict(zip(keys, vals))</span><br></pre></td></tr></table></figure></p>\n<p>zip() 内置函数使用多个可迭代对象作为输入并返回元组列表。每个元组按位置索引对输入对象的元素进行分组。</p>\n<p>你也可以通过调用*zip() 来「解压」对象。</p>\n<p>原文链接：<a href=\"https://medium.freecodecamp.org/an-a-z-of-useful-python-tricks-b467524ee747\" target=\"_blank\" rel=\"noopener\">https://medium.freecodecamp.org/an-a-z-of-useful-python-tricks-b467524ee747</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Python-一些小技巧\"><a href=\"#Python-一些小技巧\" class=\"headerlink\" title=\"Python 一些小技巧\"></a>Python 一些小技巧</h2><p>本文分享一些使用 Python 的技巧，顺序按照 A-Z 排列。</p>\n<h3 id=\"all-or-any\"><a href=\"#all-or-any\" class=\"headerlink\" title=\"all or any\"></a>all or any</h3><p>Python 非常受欢迎的原因之一是其可读性和表达性。</p>\n<p>人们还经常把 Python 笑称为「可执行伪码（executable pseudocode）」。但是，当你可以编写这样的代码时，很难去反驳这种言论：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = [<span class=\"literal\">True</span>, <span class=\"literal\">True</span>, <span class=\"literal\">False</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> any(x):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"At least one True\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> all(x):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"Not one False\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> any(x) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> all(x):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"At least one True and one False\"</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"bashplotlib\"><a href=\"#bashplotlib\" class=\"headerlink\" title=\"bashplotlib\"></a>bashplotlib</h3><p>想在控制台中绘图吗？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install bashplotlib</span><br></pre></td></tr></table></figure>\n<p>使用上面的行，即可在控制台中绘图。</p>\n<h3 id=\"collections\"><a href=\"#collections\" class=\"headerlink\" title=\"collections\"></a>collections</h3><p>Python 有一些很棒的默认数据类型，但有时候它们可能不会尽如你意。</p>\n<p>不过，Python 标准库提供了 collections 模块。这个方便的附加组件可以为你提供更多数据类型。</p>\n<blockquote>\n<p>collections 模块：<a href=\"https://docs.python.org/3/library/collections.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/library/collections.html</a></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> OrderedDict, Counter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Remembers the order the keys are added!</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = OrderedDict(a=<span class=\"number\">1</span>, b=<span class=\"number\">2</span>, c=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Counts the frequency of each character</span></span><br><span class=\"line\"></span><br><span class=\"line\">y = Counter(<span class=\"string\">\"Hello World!\"</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"dir\"><a href=\"#dir\" class=\"headerlink\" title=\"dir\"></a>dir</h3><p>你是否想过如何查看 Python 对象内部及其具有哪些属性？</p>\n<p>输入以下命令行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; dir()</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; dir(<span class=\"string\">\"Hello World\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; dir(dir)</span><br></pre></td></tr></table></figure></p>\n<p>当以交互方式运行 Python 时，这可能是一个非常有用的功能，并且可以动态地探索你正在使用的对象和模块。</p>\n<p>想要了解更多，点这里</p>\n<blockquote>\n<p><a href=\"https://docs.python.org/3/library/functions.html#dir\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/library/functions.html#dir</a></p>\n</blockquote>\n<h3 id=\"emoji\"><a href=\"#emoji\" class=\"headerlink\" title=\"emoji\"></a>emoji</h3><p>是的，真的有。请点击这里</p>\n<blockquote>\n<p><a href=\"https://pypi.org/project/emoji/\" target=\"_blank\" rel=\"noopener\">https://pypi.org/project/emoji/</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install emoji</span><br></pre></td></tr></table></figure>\n<p>别以为我不知道你会偷偷试它→→<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> emoji <span class=\"keyword\">import</span> emojize</span><br><span class=\"line\"></span><br><span class=\"line\">print(emojize(<span class=\"string\">\":thumbs_up:\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">👍</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"from-future-import\"><a href=\"#from-future-import\" class=\"headerlink\" title=\"from __future__ import\"></a>from __future__ import</h3><p>Python 流行的一个结果是，总有新版本正在开发中。新版本意味着新功能——除非你的版本已经过时。</p>\n<p>不过，别担心。__future__模块允许用户导入新版 Python 的功能。这简直就像时间旅行，或者魔法什么的。</p>\n<blockquote>\n<p>__future__模块：<a href=\"https://docs.python.org/2/library/\\*future\\*.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/2/library/\\*future\\*.html</a></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> \\_\\_future\\_\\_ <span class=\"keyword\">import</span> print_function</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"Hello World!\"</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"geopy\"><a href=\"#geopy\" class=\"headerlink\" title=\"geopy\"></a>geopy</h3><p>地理（Geography）对于程序员来说可能是一个具有挑战性的领域。但是 geopy 模块让它变得异常简单。</p>\n<blockquote>\n<p>geopy 模块：<a href=\"https://geopy.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">https://geopy.readthedocs.io/en/latest/</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install geopy</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>它通过抽取一系列不同地理编码服务的 API 来工作，使用户获取一个地方的完整街道地址、纬度、经度，甚至海拔高度。</p>\n<p>另外一个有用的功能是距离：它可以用你喜欢的度量单位计算出两个位置之间的距离。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> geopy <span class=\"keyword\">import</span> GoogleV3</span><br><span class=\"line\"></span><br><span class=\"line\">place = <span class=\"string\">\"221b Baker Street, London\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">location = GoogleV3().geocode(place)</span><br><span class=\"line\"></span><br><span class=\"line\">print(location.address)</span><br><span class=\"line\"></span><br><span class=\"line\">print(location.location)</span><br></pre></td></tr></table></figure>\n<h3 id=\"howdoi\"><a href=\"#howdoi\" class=\"headerlink\" title=\"howdoi\"></a>howdoi</h3><p>陷入编码问题，却不记得以前见过的解决方案？需要检查 StackOverflow，但不想离开终端？</p>\n<p>那么你需要这个有用的命令行工具：<a href=\"https://github.com/gleitz/howdoi。\" target=\"_blank\" rel=\"noopener\">https://github.com/gleitz/howdoi。</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install howdoi</span><br></pre></td></tr></table></figure>\n<p>无论你有什么问题都可以问它，它会尽力回答。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ howdoi vertical align css</span><br><span class=\"line\"></span><br><span class=\"line\">$ howdoi <span class=\"keyword\">for</span> loop <span class=\"keyword\">in</span> java</span><br><span class=\"line\"></span><br><span class=\"line\">$ howdoi undo commits <span class=\"keyword\">in</span> git</span><br></pre></td></tr></table></figure></p>\n<p>但是请注意——它会从 StackOverflow 的最高票答案中抓取代码。也就是说它提供的信息并非总是有用……<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ howdoi <span class=\"built_in\">exit</span> vim</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"inspect\"><a href=\"#inspect\" class=\"headerlink\" title=\"inspect\"></a>inspect</h3><p>Python 的 inspect 模块非常有助于理解问题背后的详情。你甚至可以在 inspect 模块上调用其方法！</p>\n<blockquote>\n<p>inspect 模块：<a href=\"https://docs.python.org/3/library/inspect.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/library/inspect.html</a></p>\n</blockquote>\n<p>下面的代码示例使用 inspect.getsource() 打印自己的源代码。它还使用 inspect.getmodule() 打印定义它的模块。</p>\n<p>最后一行代码打印出自己的行号。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> inspect</span><br><span class=\"line\"></span><br><span class=\"line\">print(inspect.getsource(inspect.getsource))</span><br><span class=\"line\"></span><br><span class=\"line\">print(inspect.getmodule(inspect.getmodule))</span><br><span class=\"line\"></span><br><span class=\"line\">print(inspect.currentframe().f_lineno)</span><br></pre></td></tr></table></figure></p>\n<p>当然，除了这些琐碎的用途之外，inspect 模块还能帮助你理解代码正在做的事。你还可以用它编写自文档化代码。</p>\n<h3 id=\"Jedi\"><a href=\"#Jedi\" class=\"headerlink\" title=\"Jedi\"></a>Jedi</h3><p>Jedi 库是一个自动完成和代码分析的库。它使代码编写变得更快、效果更高。</p>\n<p>除非你正在开发自己的 IDE，否则你肯定会对使用 Jedi 库作为编辑插件很感兴趣。</p>\n<blockquote>\n<p>Jedi：<a href=\"https://jedi.readthedocs.io/en/latest/docs/usage.html\" target=\"_blank\" rel=\"noopener\">https://jedi.readthedocs.io/en/latest/docs/usage.html</a></p>\n</blockquote>\n<p>你可能已经在使用 Jedi 了。IPython 项目就使用 Jedi 实现代码自动完成功能。</p>\n<h3 id=\"kwargs\"><a href=\"#kwargs\" class=\"headerlink\" title=\"**kwargs\"></a>**kwargs</h3><p>学习任何语言时都会遇到很多里程碑。对于 Python 来说，理解神秘的**kwargs 语法可能算是其中之一。</p>\n<p>词典对象前面的双星号可以让你把该词典的内容作为命名参数输入到函数中。</p>\n<p>词典的秘钥是参数名，值是传递给函数的值。你甚至不需要称它为 kwargs！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dictionary = &#123;<span class=\"string\">\"a\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">someFunction</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(a + b)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># these do the same thing:</span></span><br><span class=\"line\"></span><br><span class=\"line\">someFunction(**dictionary)</span><br><span class=\"line\"></span><br><span class=\"line\">someFunction(a=<span class=\"number\">1</span>, b=<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>当你想编写能够处理事先未定义的命名参数的函数时，这个很有用。</p>\n<h3 id=\"列表推导式（List-comprehensions）\"><a href=\"#列表推导式（List-comprehensions）\" class=\"headerlink\" title=\"列表推导式（List comprehensions）\"></a>列表推导式（List comprehensions）</h3><p>我最喜欢 Python 编程的原因之一是它的列表推导式</p>\n<blockquote>\n<p><a href=\"https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions</a></p>\n</blockquote>\n<p>这些表达式使得编写干净易读的代码变得很容易，那些代码读起来几乎像自然语言一样。</p>\n<blockquote>\n<p>关于它们的更多使用信息请查看：<a href=\"https://www.learnpython.org/en/List_Comprehensions\" target=\"_blank\" rel=\"noopener\">https://www.learnpython.org/en/List_Comprehensions</a></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">evens = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> numbers <span class=\"keyword\">if</span> x % <span class=\"number\">2</span> <span class=\"keyword\">is</span> <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">odds = [y <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> numbers <span class=\"keyword\">if</span> y <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> evens]</span><br><span class=\"line\"></span><br><span class=\"line\">cities = [<span class=\"string\">'London'</span>, <span class=\"string\">'Dublin'</span>, <span class=\"string\">'Oslo'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">visit</span><span class=\"params\">(city)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"Welcome to \"</span>+city)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> city <span class=\"keyword\">in</span> cities:</span><br><span class=\"line\"></span><br><span class=\"line\">    visit(city)</span><br></pre></td></tr></table></figure>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><p>Python 通过许多内置功能支持函数式编程。map() 函数是最有用的函数之一——特别是当它与 lambda 函数结合使用时。</p>\n<blockquote>\n<p>lambda 函数：<a href=\"https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions</a></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">y = map(<span class=\"keyword\">lambda</span> x : x + <span class=\"number\">1</span> , x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># prints out [2,3,4]</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(list(y))</span><br></pre></td></tr></table></figure>\n<p>在上面的例子中，map() 将一个简单的 lambda 函数应用于 x 中的每个元素。它返回一个 map 对象，该对象可以被转换成可迭代的对象，如列表或元组。</p>\n<h3 id=\"newspaper3k\"><a href=\"#newspaper3k\" class=\"headerlink\" title=\"newspaper3k\"></a>newspaper3k</h3><p>如果你之前没有见过它，那么我建议你先查看</p>\n<blockquote>\n<p><a href=\"https://pypi.org/project/newspaper3k/。\" target=\"_blank\" rel=\"noopener\">https://pypi.org/project/newspaper3k/。</a></p>\n</blockquote>\n<p>它可以帮助你从大量顶级国际出版物中检索到新闻文章和相关元数据。你可以检索图像、文本和作者名。</p>\n<p>它还有一些内置的 NLP 功能。</p>\n<blockquote>\n<p>地址：<a href=\"https://newspaper.readthedocs.io/en/latest/user_guide/quickstart.html#performing-nlp-on-an-article\" target=\"_blank\" rel=\"noopener\">https://newspaper.readthedocs.io/en/latest/user_guide/quickstart.html#performing-nlp-on-an-article</a></p>\n</blockquote>\n<p>如果你想在下一个项目中使用 BeautifulSoup 或其它 DIY 网页抓取库，那么不如使用$ pip install newspaper3k，既省时又省事，何乐而不为呢？</p>\n<h3 id=\"运算符重载（Operator-overloading）\"><a href=\"#运算符重载（Operator-overloading）\" class=\"headerlink\" title=\"运算符重载（Operator overloading）\"></a>运算符重载（Operator overloading）</h3><p>Python 支持运算符重载。</p>\n<p>它实际上是一个简单的概念。你有没有想过为什么 Python 允许用户使用 + 运算符来将数字相加，并级联字符串？这就是运算符重载在发挥作用。</p>\n<p>你可以使用 Python 的标准运算符号来定义对象，这样你可以在与这些对象相关的语境中使用它们。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thing</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.__value = value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__gt__</span><span class=\"params\">(self, other)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__value &gt; other.__value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__lt__</span><span class=\"params\">(self, other)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__value &lt; other.__value</span><br><span class=\"line\"></span><br><span class=\"line\">something = Thing(<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">nothing = Thing(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># True</span></span><br><span class=\"line\"></span><br><span class=\"line\">something &gt; nothing</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># False</span></span><br><span class=\"line\"></span><br><span class=\"line\">something &lt; nothing</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Error</span></span><br><span class=\"line\"></span><br><span class=\"line\">something + nothing</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"pprint\"><a href=\"#pprint\" class=\"headerlink\" title=\"pprint\"></a>pprint</h3><p>Python 的默认 print 函数就可以实现打印功能。但如果尝试打印较大的嵌套对象，就会发现打印结果很丑。</p>\n<p>这时 Python 标准库的 pretty printer 模块就可以发挥作用了。该模块可以将复杂的结构化对象以一种易读的格式打印出来。</p>\n<blockquote>\n<p>pretty printer 模块：<a href=\"https://docs.python.org/3/library/pprint.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/library/pprint.html</a></p>\n</blockquote>\n<p>Python 开发者的必备技能之一就是处理复杂的数据结构。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pprint</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">'https://randomuser.me/api/?results=1'</span></span><br><span class=\"line\"></span><br><span class=\"line\">users = requests.get(url).json()</span><br><span class=\"line\"></span><br><span class=\"line\">pprint.pprint(users)</span><br><span class=\"line\"></span><br><span class=\"line\">Queue</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Python-支持多线程，而这是由-Python-标准库的-Queue-模块支持的。\"><a href=\"#Python-支持多线程，而这是由-Python-标准库的-Queue-模块支持的。\" class=\"headerlink\" title=\"Python 支持多线程，而这是由 Python 标准库的 Queue 模块支持的。\"></a>Python 支持多线程，而这是由 Python 标准库的 Queue 模块支持的。</h3><p>该模块允许用户实现队列（queue）数据结构。队列数据结构允许用户根据特定的规则添加和检索条目。</p>\n<p>『First in, first out』 (FIFO) 队列允许用户按照对象被添加的顺序来检索对象。『Last in, first out』 (LIFO) 队列允许用户首先访问最新添加的对象。</p>\n<p>最后，优先级队列（priority queue）允许用户根据对象对应的优先级类别来检索对象。</p>\n<p>如何使用 queue 在 Python 中实现多线程编程，示例详见：<a href=\"https://www.tutorialspoint.com/python3/python_multithreading.htm。\" target=\"_blank\" rel=\"noopener\">https://www.tutorialspoint.com/python3/python_multithreading.htm。</a></p>\n<h3 id=\"repr\"><a href=\"#repr\" class=\"headerlink\" title=\"__repr__\"></a>__repr__</h3><p>在 Python 中定义一个类别或对象时，以「官方」方式将对象表示为字符串很有用。例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; file = open(<span class=\"string\">'file.txt'</span>, <span class=\"string\">'r'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; <span class=\"built_in\">print</span>(file)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;open file <span class=\"string\">'file.txt'</span>, mode <span class=\"string\">'r'</span> at 0x10d30aaf0&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这使代码 debug 变得简单很多。将字符串添加到类别定义，如下所示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">someClass</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;some description here&gt;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">someInstance = someClass()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># prints &lt;some description here&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(someInstance)</span><br></pre></td></tr></table></figure>\n<h3 id=\"sh\"><a href=\"#sh\" class=\"headerlink\" title=\"sh\"></a>sh</h3><p>Python 是一种伟大的脚本语言，不过有时使用标准 os 和 subprocess 库会有点棘手。</p>\n<p>sh 库提供了一种不错的替代方案。</p>\n<blockquote>\n<p>sh 库：<a href=\"http://amoffat.github.io/sh/\" target=\"_blank\" rel=\"noopener\">http://amoffat.github.io/sh/</a></p>\n</blockquote>\n<p>该库允许用户像使用普通函数一样调用任意程序，这对自动化工作流和任务非常有用。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sh <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">sh.pwd()</span><br><span class=\"line\"></span><br><span class=\"line\">sh.mkdir(<span class=\"string\">'new_folder'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sh.touch(<span class=\"string\">'new_file.txt'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sh.whoami()</span><br><span class=\"line\"></span><br><span class=\"line\">sh.echo(<span class=\"string\">'This is great!'</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"类型提示（Type-hints）\"><a href=\"#类型提示（Type-hints）\" class=\"headerlink\" title=\"类型提示（Type hints）\"></a>类型提示（Type hints）</h3><p>Python 是动态语言。在定义变量、函数、类别等时无需指定数据类型。</p>\n<p>这有利于缩短开发周期。但是，简单的类型错误（typing issue）导致的运行时错误真的太烦了。</p>\n<p>从 Python 3.5 版本开始，用户可以选择在定义函数时开启类型提示。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addTwo</span><span class=\"params\">(x : Int)</span> -&gt; Int:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + <span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<p>你还可以定义类型别名：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> List</span><br><span class=\"line\"></span><br><span class=\"line\">Vector = List[float]</span><br><span class=\"line\"></span><br><span class=\"line\">Matrix = List[Vector]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addMatrix</span><span class=\"params\">(a : Matrix, b : Matrix)</span> -&gt; Matrix:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  result = []</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i,row <span class=\"keyword\">in</span> enumerate(a):</span><br><span class=\"line\"></span><br><span class=\"line\">    result_row =[]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j, col <span class=\"keyword\">in</span> enumerate(row):</span><br><span class=\"line\"></span><br><span class=\"line\">      result_row += [a[i][j] + b[i][j]]</span><br><span class=\"line\"></span><br><span class=\"line\">    result += [result_row]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">x = [[<span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>], [<span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">y = [[<span class=\"number\">2.0</span>, <span class=\"number\">1.0</span>], [<span class=\"number\">0.0</span>, <span class=\"number\">-2.0</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">z = addMatrix(x, y)</span><br></pre></td></tr></table></figure></p>\n<p>尽管非强制，但类型注释可以使代码更易理解。</p>\n<p>它们还允许你在运行之前使用类型检查工具捕捉 TypeError。在进行大型复杂项目时执行此类操作是值得的。</p>\n<h3 id=\"uuid\"><a href=\"#uuid\" class=\"headerlink\" title=\"uuid\"></a>uuid</h3><p>生成通用唯一标识符（Universally Unique ID，UUID）的一种快速简单方法就是使用 Python 标准库的 uuid 模块。</p>\n<blockquote>\n<p>uuid 模块：<a href=\"https://docs.python.org/3/library/uuid.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/library/uuid.html</a></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> uuid</span><br><span class=\"line\"></span><br><span class=\"line\">user_id = uuid.uuid4()</span><br><span class=\"line\"></span><br><span class=\"line\">print(user_id)</span><br></pre></td></tr></table></figure>\n<p>这创建了一个随机化后的 128 比特数字，该数字几乎必然是唯一的。</p>\n<p>事实上，可以生成 2¹²²可能的 UUID。这个数字超过了 5,000,000,000,000,000,000,000,000,000,000,000,000。</p>\n<p>在给定集合中找出重复数字的可能性极低。即使有一万亿 UUID，重复数字存在的概率也远远低于十亿分之一。</p>\n<h3 id=\"虚拟环境（Virtual-environment）\"><a href=\"#虚拟环境（Virtual-environment）\" class=\"headerlink\" title=\"虚拟环境（Virtual environment）\"></a>虚拟环境（Virtual environment）</h3><p>这可能是 Python 中我最喜欢的事物了。</p>\n<p>你可能同时处理多个 Python 项目。不幸的是，有时候两个项目依赖于相同依赖项的不同版本。那你要安装哪个版本呢？</p>\n<p>幸运的是，Python 支持虚拟环境，这使得用户能够充分利用两种环境。见下列行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m venv my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> my-project/bin/activate</span><br><span class=\"line\"></span><br><span class=\"line\">pip install all-the-modules</span><br></pre></td></tr></table></figure></p>\n<p>现在你在一台机器上具备独立的多个 Python 版本了。问题解决！</p>\n<h3 id=\"wikipedia\"><a href=\"#wikipedia\" class=\"headerlink\" title=\"wikipedia\"></a>wikipedia</h3><p>Wikipedia 拥有一个很棒的 API，允许用户以编程方式访问巨大体量的免费知识和信息。</p>\n<p>wikipedia 模块使得访问该 API 非常便捷。</p>\n<blockquote>\n<p>Wikipedia 模块：<a href=\"https://wikipedia.readthedocs.io/en/latest/quickstart.html\" target=\"_blank\" rel=\"noopener\">https://wikipedia.readthedocs.io/en/latest/quickstart.html</a></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> wikipedia</span><br><span class=\"line\"></span><br><span class=\"line\">result = wikipedia.page(<span class=\"string\">'freeCodeCamp'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result.summary)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> link <span class=\"keyword\">in</span> result.links:</span><br><span class=\"line\"></span><br><span class=\"line\">    print(link)</span><br></pre></td></tr></table></figure>\n<p>和真实的维基百科网站类似，该模块支持多种语言、页面消歧、随机页面检索，甚至还具备 donate() 方法。</p>\n<h3 id=\"xkcd\"><a href=\"#xkcd\" class=\"headerlink\" title=\"xkcd\"></a>xkcd</h3><p>humour 是 Python 语言的一个关键特征，其名称来自英国喜剧片《蒙提·派森的飞行马戏团》(Monty Python and the Flying Circus)。Python 的很多官方文档引用了该喜剧片最著名的剧情。</p>\n<p>幽默感并不限于文档。试着运行下列行：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> antigravity</span><br></pre></td></tr></table></figure></p>\n<p>将打开 xkcd 画的 Python 漫画。不要改变这一点，Python。不要改变。</p>\n<h3 id=\"YAML\"><a href=\"#YAML\" class=\"headerlink\" title=\"YAML\"></a>YAML</h3><p>YAML 代表 『YAML Ain』t Markup Language』。它是一种数据格式语言，是 JSON 的超集。</p>\n<p>与 JSON 不同，它可以存储更复杂的对象并引用自己的元素。你还可以编写注释，使其尤其适用于编写配置文件。</p>\n<blockquote>\n<p>PyYAML 模块（<a href=\"https://pyyaml.org/wiki/PyYAMLDocumentation）可以让你在\" target=\"_blank\" rel=\"noopener\">https://pyyaml.org/wiki/PyYAMLDocumentation）可以让你在</a> Python 中使用 YAML。</p>\n</blockquote>\n<p>安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install pyyaml</span><br></pre></td></tr></table></figure></p>\n<p>然后导入到项目中：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> yaml</span><br></pre></td></tr></table></figure></p>\n<p>PyYAML 使你能够存储任何数据类型的 Python 对象，以及任何用户定义类别的实例。</p>\n<h3 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a>zip</h3><p>给你支最后一招，非常酷。还在用两个列表来组成一部词典吗？<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keys = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">vals = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">zipped = dict(zip(keys, vals))</span><br></pre></td></tr></table></figure></p>\n<p>zip() 内置函数使用多个可迭代对象作为输入并返回元组列表。每个元组按位置索引对输入对象的元素进行分组。</p>\n<p>你也可以通过调用*zip() 来「解压」对象。</p>\n<p>原文链接：<a href=\"https://medium.freecodecamp.org/an-a-z-of-useful-python-tricks-b467524ee747\" target=\"_blank\" rel=\"noopener\">https://medium.freecodecamp.org/an-a-z-of-useful-python-tricks-b467524ee747</a></p>\n"},{"title":"Fluent Python 第七章小结","date":"2017-12-19T09:01:13.000Z","photos":["https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true"],"toc":true,"comment":true,"_content":"\n## Fluent Python ##\n### Chapter 7. Function Decorators and Closures\n### 第七章: 函数装饰器和函数闭包\n\n函数装饰器使用特殊的\b标记增强函数，要想掌握装饰器，首先要理解函数闭包。  \nnonlocal 是在Python3 中引入的保留关键字，如果要使用函数闭包和装饰器，也必须要了解nonlocal。    \n另外，闭包同时也是函数式编程和回调式异步编程的基础。   \n这一张要讨论的话题:    \n基础知识：    \n\n- python 计算装饰器句法\n- python 如何判断变量是否是局部的\n- 闭包存在的原因和工作原理\n- nonlocal 可以解决的问题\n\n进一步探讨装饰器:\n\n- 实现行为良好的装饰器\n- 标准库中有用的装饰器\n- 实现参数化装饰器\n\n#### 装饰器基础知识\n\n装饰器是一个可调用的对象，它的参数是另一个函数（被装饰的函数），装饰器可能会将输入的函数进行处理返回结果，或者将其替换成另一个函数或者可调用对象。     \n下面是一个例子, 假设有一个名为decorate的装饰器:\n\n```python\n@decorate\ndef target():\n    print('running target()') \n# 等价于下面的写法\ntarget = decorate(target())\n```\n\n\n上述两段代码得到的target函数都是经过decrate处理过的, 下面的控制台会话证明了这点:   \n\n    ```python   \n>>> def deco(func):\n...     def inner():\n...         print('running inner()')\n...     return inner\n...\n>>> @deco\n... def target():\n...     print('running target()')\n...\n>>> target()\nrunning inner()\n>>> target\n<function deco.<locals>.inner at 0x10063b598>\n```\n\n可以看到target 已经被替换成了inner,严格来说target现在是inner的引用。       \n\n#### Python何时执行装饰器    \n装饰器的一大特性是，能把被装饰的函数替换成其他函数，第二个特性是装饰器加载模块时会立即执行。  \n第二个特性看可以看看下面这个例子:    \n\n```python     \nregistry = []\ndef register(func):\n    print('running register(%s)' % func)\n    registry.append(func)\n    return func\n\n@register\ndef f1():\n    print('running f1()')\n@register\ndef f2():\n    print('running f2()')\ndef f3():\n    print('running f3()')\ndef main():\n    print('running main()')\n    print('registry ->', registry)\n    f1()\n    f2()\n    f3()\nif __name__=='__main__':\n    main()\n```\n\n控制台输出如下:\n\n```python    \nrunning register(<function f1 at 0x10320eb70>)\nrunning register(<function f2 at 0x10320eae8>)\nrunning main()\nregistry -> [<function f1 at 0x10320eb70>, <function f2 at 0x10320eae8>]\nrunning f1()\nrunning f2()\nrunning f3()\n```\n\n如果是导入:    \n```python    \n>>> import registeration\nrunning register(<function f1 at 0x1100480d0>)\nrunning register(<function f2 at 0x110048158>)\n>>> registeration.registry\n[<function f1 at 0x1100480d0>, <function f2 at 0x110048158>]   \n```\n\n上面的例子可以看出：函数装饰器在导入模块时立即执行，而被装饰的函数只在明确调用时运行。这突出了 Python 的**导入时**和**运行时**之间的区别。    \n\n这里提到装饰器的通常用法和registeration.py中的不同:   \n- 例子中的装饰器函数与被装饰的函数在同一个模块中定义。实际情况是，装饰器通常在一个模块中定义，然后应用到其他模块中的函数上。\n- 例子中的 register \n\n#### 使用装饰器改进策略模式\n在使用一等对象的特性实现策略模式时，曾经说过，当时的实现有一些问题，就是如何方便的遍历所有的策略以获取最佳的折扣，现在我们可以使用装饰器很好的解决这个问题。\n\n```python    \npromos = []\ndef promotion(promo_func):\n    promos.append(promo_func)\n    return promo_func\n@promotion\ndef fidelity(order):\n    \"\"\"为积分为1000或以上的顾客提供5%折扣\"\"\"\n    return order.total() * .05 if order.customer.fidelity >= 1000 else 0\n@promotion\n    def bulk_item(order):\n    \"\"\"单个商品为20个或以上时提供10%折扣\"\"\"\n    discount = 0\n    for item in order.cart:\n        if item.quantity >= 20:\n            discount += item.total() * .1\n        return discount\n@promotion\ndef large_order(order):\n    \"\"\"订单中的不同商品达到10个或以上时提供7%折扣\"\"\"\n    distinct_items = {item.product for item in order.cart}\n    if len(distinct_items) >= 10:\n        return order.total() * .07\n    return 0\ndef best_promo(order):\n    \"\"\"选择可用的最佳折扣\"\"\"\n    return max(promo(order) for promo in promos)\n```\n\n这样做的好处有:\n\n- 策略函数无须使用特殊的名称作区分\n- @promotion 装饰器既可以增加策略，也可以方便禁用策略（注释掉装饰器即可）\n- 策略函数可以在任何地方定义，只需要使用@promotion装饰器\n\n多数装饰器会修改被装饰的函数。通常，它们会定义一个内部函数，然后将其返回，替换被装饰的函数。使用内部函数的代码几乎都要靠闭包才能正确运作。为了理解闭包，我们要先了解 Python 中的变量作用域。   \n#### Python中变量的作用域   \n下面的一系列控制台交互可以让我们更加了解Python的变量作用域：     \n\n```python    \n>>> def f1(a):\n...     print(a)\n...     print(b)\n...\n>>> f1(3)\n3\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 3, in f1\nNameError: name 'b' is not defined\n```\n\n这个例子中由于没有定义全局变量b导致报错\n\n```python    \n>>> b = 6\n>>> f1(3)\n3\n6\n\n```\n\n这里定义了全局变量b,正常运行\n\n```python    \n>>> def f2(a):\n...     print(a)\n...     print(b)\n...     b = 6\n...\n>>> b = 3\n>>> f2(3)\n3\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 3, in f2\nUnboundLocalError: local variable 'b' referenced before assignment\n\n```\n\n这里由于函数f2的定义体中给b赋值了，导致f2判断b是局部变量。\n\n这里我们可以看到Python对变量的一个设计: Python 不要求声明变量，但是假定在函数定义体中赋值的变量是局部变量。这样的好处是可以防止在不知情的情况下使用全局变量。\n如果也要在函数定义体中对全局变量赋值，只需要用global声明：\n\n```python    \n>>> def f3(a):\n...     global b\n...     print(a)\n...     print(b)\n...     b = 6\n...\n>>> b = 3\n>>> f3(b)\n3\n3\n>>> b\n6\n>>>\n```\n\n为了深入理解一下f1/f2这两个函数的变量加载方式，可以使用dis模块反汇编，查看字节码：  \n\n```python     \n>>> dis(f1)\n  2           0 LOAD_GLOBAL              0 (print)\n              2 LOAD_FAST                0 (a)\n              4 CALL_FUNCTION            1\n              6 POP_TOP\n\n  3           8 LOAD_GLOBAL              0 (print)\n             10 LOAD_GLOBAL              1 (b)  #全局变量\n             12 CALL_FUNCTION            1\n             14 POP_TOP\n             16 LOAD_CONST               0 (None)\n             18 RETURN_VALUE\n\nSyntaxError: invalid syntax\n>>> dis(f2)\n  2           0 LOAD_GLOBAL              0 (print)\n              2 LOAD_FAST                0 (a)\n              4 CALL_FUNCTION            1\n              6 POP_TOP\n\n  3           8 LOAD_GLOBAL              0 (print)\n             10 LOAD_FAST                1 (b)  #局部变量\n             12 CALL_FUNCTION            1\n             14 POP_TOP\n\n  4          16 LOAD_CONST               1 (6)\n             18 STORE_FAST               1 (b)\n             20 LOAD_CONST               0 (None)\n             22 RETURN_VALUE\n```\n\n\n####  7.5  闭包   \n闭包指延伸了作用域的函数，其中包含函数定义体中引用、但是不在定义体中定义的非全局变量。函数是不是匿名的没有关系，关键是它能访问定义体之外定义的非全局变量。     \n这个概念非常抽象，我们通过一个例子更好地理解它:\n\n> 假如有个名为 avg 的函数，它的作用是计算不断增加的系列值的均值；例如，整个历史中某个商品的平均收盘价。每天都会增加新价格，因此平均值要考虑至目前为止所有的价格。    \n\n首先看看这个函数的面对对象实现:\n\n```python   \nclass Averager():\n    def __init__(self):\n        self.series = []\n    def __call__(self, new_value):\n        self.series.append(new_value)\n        total = sum(self.series)\n        return total/len(self.series)\n```\n\n其中Averager()是一个可调用对象，创建Averager的实例就可以达成上面所说的要求。\n\n> \\>\\>\\> avg = Averager()     \n> \\>\\>\\> avg(10)   \n> 10.0   \n> \\>\\>\\> avg(11)    \n> 10.5   \n> \\>\\>\\> avg(12)    \n> 11.0  \n\n接下来是函数式实现，使用高阶函数make_averager:    \n\n```python    \ndef make_averager():\n    series = []\n    def averager(new_value):\n        series.append(new_value)\n        total = sum(series)\n        return total/len(series)\n    return averager\n```\n> \\>\\>\\> avg = make_averager()    \n> \\>\\>\\> avg(10)    \n>  10.0    \n> \\>\\>\\> avg(11)    \n>  10.5    \n> \\>\\>\\> avg(12)    \n>  11.0    \n\n这两个示例的相同点: 都是通过更新历史值再进行平均值计算。问题在于数据的存储，面对对象实现是存储在实例属性self.series中的，而make_averager是存储在series中的。\n\n这里需要注意的地方是，在 avg = make\\_averager() 这句执行以后，make_averager函数已经返回了，这时series的本地作用域已经不存在了。\n\n而在averager中，series是自由变量（free variable）,指未在本地作用域中绑定的变量。\n![自由变量](https://github.com/aldslvda/blog-images/blob/master/fluent-python-7.1.png?raw=true)\n\n接下来审查averager对象，我们发现Python在\\_\\_code\\_\\_属性中保存局部变量和自由变量的\b名称。\n\n```python    \n>>> from averager import make_averager\n>>>\n>>> avg = make_averager()\n>>> avg.__code__.co_varnames\n('new_value', 'total')\n>>> avg.__code__.co_freevars\n('series',)\n```\n\nseries 绑定在 avg.\\_\\_closure\\_\\_属性中\n\n```python     \n>>> avg.__closure__[0].cell_contents\n[]\n>>> avg(10)\n10.0\n>>> avg.__closure__[0].cell_contents\n[10]\n>>> avg(11)\n10.5\n>>> avg.__closure__[0].cell_contents\n[10, 11]\n>>> avg(13)\n11.333333333333334\n>>> avg.__closure__[0].cell_contents\n[10, 11, 13]\n```\n\n这样我们可以很形象的理解闭包的性质了，闭包是一种函数，它会保留定义函数时存在的自由变量的绑定，这样调用函数时，虽然定义作用域不可用了，但是仍能使用那些绑定。    \n\n只有嵌套在其他函数中的函数才可能需要处理不在全局作用域中的外部变量，这也是匿名函数容易和闭包混淆的一个原因。    \n\n#### nonlocal声明\n\n前面实现的make_averager函数的效率并不高，因为每次调用avg都要对所有历史值求和，实际上只需要当前值+历史值的和就可以了。    \n接下来我们尝试对代码进行一些优化:      \n\n```python\ndef make_averager_v1():\n    count = 0\n    total = 0\n    def averager(new_value):\n        count += 1\n        total += new_value\n        return total / count\n    return averager    \n```\n\n控制台输出如下:   \n```python      \n>>> from averager import make_averager_v1\n>>> avg = make_averager_v1()\n>>> avg(10)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/Users/NickAl/study/github/readings/Fluent-Python/7. Function Decorators and Closures/averager.py\", line 13, in averager\n    count += 1\nUnboundLocalError: local variable 'count' referenced before assignment\n>>>\n```\n\n由于函数的定义体对count赋值了，由于count是int,赋值会隐式的创建一个新对象，导致函数判断count是局部变量而不是自由变量，不会保存在闭包中，会导致抛出异常。\n\nPython3 中的nonlocal声明会把变量标记为自由变量，使得变量可以保存在闭包中。\n下面利用nonlocal对上面的代码进行修正：\n\n```python    \ndef make_averager_v1():\n    count = 0\n    total = 0\n    def averager(new_value):\n        nonlocal count, total\n        count += 1\n        total += new_value\n        return total / count\n    return averager\n```\n在没有nonlocal声明的Python2中，我们可以将变量作为值存储在可变对象中来解决这个问题。\n\n#### 实现一个简单的装饰器     \n下面是一个简单的装饰器，输出函数的运行时间, clocked是一个闭包，func是自由变量。   \n\n```python    \nimport time\ndef clock(func):\n    def clocked(*args):\n        t0 = time.perf_counter()\n        result = func(*args)\n        elapsed = time.perf_counter() - t0\n        name = func.__name__\n        arg_str = ', '.join(repr(arg) for arg in args)\n        print('[%0.8fs] %s(%s) -> %r' % (elapsed, name, arg_str, result))\n        return result\n    return clocked\n```\n\n下面的Python代码展示了如何使用这个装饰器:\n\n```python     \n# clockdeco_demo.py\nimport time\nfrom clockdeco import clock\n@clock\ndef snooze(seconds):\n    time.sleep(seconds)\n@clock\ndef factorial(n):\n    return 1 if n < 2 else n*factorial(n-1)\nif __name__=='__main__':\n    print('*' * 40, 'Calling snooze(.123)')\n    snooze(.123)\n    print('*' * 40, 'Calling factorial(6)')\n    print('6! =', factorial(6))\n```\n\n输出如下:\n\n> -> % python3 clockdeco_demo.py     \n> **************************************** Calling snooze(.123)     \n> [0.12309374s] snooze(0.123) -> None     \n> **************************************** Calling factorial(6)     \n> [0.00000162s] factorial(1) -> 1    \n> [0.00003553s] factorial(2) -> 2    \n> [0.00005951s] factorial(3) -> 6    \n> [0.00008194s] factorial(4) -> 24    \n> [0.00010441s] factorial(5) -> 120    \n> [0.00013048s] factorial(6) -> 720    \n> 6! = 720    \n\n这个例子中，clocked参数做了如下操作:     \n(1) 记录初始时间 t0。    \n(2) 调用原来的 factorial 函数，保存结果。    \n(3) 计算经过的时间。    \n(4) 格式化收集的数据，然后打印出来。    \n(5) 返回第 2 步保存的结果。    \n这是装饰器的典型行为：把被装饰的函数替换成新函数，二者接受相同的参数，而且（通常）返回被装饰的函数本该返回的值，同时还会做些额外操作。\n\n上面的装饰器还存在一些问题:\n\n- 不支持关键字参数\n- 遮盖了被装饰的函数的\\_\\_name\\_\\_和\\_\\_doc\\_\\_属性\n\n下面的示例解决了这个问题：\n\n```python    \n#clockdeco2.py\nimport time\nimport functools\ndef clock(func):\n    @functools.wraps(func)\n    def clocked(*args, **kwargs):\n        t0 = time.time()\n        result = func(*args, **kwargs)\n        elapsed = time.time() - t0\n        name = func.__name__\n        arg_lst = []\n        if args:\n            arg_lst.append(', '.join(repr(arg) for arg in args))\n        if kwargs:\n            pairs = ['%s=%r' % (k, w) for k, w in sorted(kwargs.items())]\n            arg_lst.append(', '.join(pairs))\n            arg_str = ', '.join(arg_lst)\n        print('[%0.8fs] %s(%s) -> %r ' % (elapsed, name, arg_str, result))\n        return result\n    return clocked\n```\nfunctool.wrap是标准库中可以直接取用的装饰器。\n\n#### 标准库中的装饰器\n\n这节会讲到functool中的两个值得关注的装饰器: lru\\_cache和single\\_dispatch\n\n##### 使用functools.lru_cache做备忘\nfunctools.lru_cache 是非常实用的装饰器，它实现了备忘（memoization）功能。这是一项优化技术，它把耗时的函数的结果保存起来，避免传入相同的参数时重复计算。LRU三个字母是“Least Recently Used”的缩写，表明缓存不会无限制增长，一段时间不用的缓存条目会被扔掉。    \n生成第 n 个斐波纳契数这种慢速递归函数适合使用 lru_cache，下面的代码是一个示例\n\n```python     \nfrom clockdeco import clock\n@clock\ndef fibonacci(n):\n    if n < 2:\n        return n\n    return fibonacci(n-2) + fibonacci(n-1)\nif __name__=='__main__':\n    print(fibonacci(6))\n\n```\n\n输出如下：\n\n> -> % python3 fibo_demo.py  \n> [0.00000075s] fibonacci(0) -> 0   \n> [0.00000106s] fibonacci(1) -> 1  \n> [0.00008829s] fibonacci(2) -> 1  \n> [0.00000052s] fibonacci(1) -> 1  \n> [0.00000056s] fibonacci(0) -> 0  \n> [0.00000068s] fibonacci(1) -> 1  \n> [0.00002681s] fibonacci(2) -> 1  \n> [0.00005140s] fibonacci(3) -> 2  \n> [0.00016751s] fibonacci(4) -> 3  \n> [0.00000051s] fibonacci(1) -> 1  \n> [0.00000046s] fibonacci(0) -> 0  \n> [0.00000054s] fibonacci(1) -> 1  \n> [0.00002430s] fibonacci(2) -> 1  \n> [0.00005003s] fibonacci(3) -> 2  \n> [0.00000054s] fibonacci(0) -> 0  \n> [0.00000057s] fibonacci(1) -> 1  \n> [0.00002484s] fibonacci(2) -> 1   \n> [0.00000044s] fibonacci(1) -> 1  \n> [0.00000081s] fibonacci(0) -> 0   \n> [0.00000073s] fibonacci(1) -> 1   \n> [0.00002765s] fibonacci(2) -> 1   \n> [0.00005353s] fibonacci(3) -> 2   \n> [0.00010212s] fibonacci(4) -> 3  \n> [0.00017658s] fibonacci(5) -> 5  \n> [0.00037021s] fibonacci(6) -> 8  \n>  8\n\n可以看到低阶的部分不断的被运算，非常浪费时间，下面是利用缓存优化后的代码:\n\n```python    \nimport functools\nfrom clockdeco import clock\n@functools.lru_cache()\n@clock\ndef fibonacci(n):\n    if n < 2:\n        return n\n    return fibonacci(n-2) + fibonacci(n-1)\nif __name__=='__main__':\n    print(fibonacci(6))\n```\n\n控制台输出:\n\n> -> % python3 fibo_demo.py  \n> [0.00000114s] fibonacci(0) -> 0  \n> [0.00000152s] fibonacci(1) -> 1  \n> [0.00014005s] fibonacci(2) -> 1  \n> [0.00000173s] fibonacci(3) -> 2  \n> [0.00018128s] fibonacci(4) -> 3  \n> [0.00000119s] fibonacci(5) -> 5   \n> [0.00022029s] fibonacci(6) -> 8   \n>  8  \n\n这里要注意的两点是:lru\\_cache必须向常规函数一样被调用，而是装饰器是可以叠加的。   \n上面的例子告诉我们lru\\_cache在优化递归缓存方面的巨大用途，其实它在Web应用中也能起到很大的用处\n\n> functools.lru_cache(maxsize=128, typed=False)\n\n上面可以看出functools.lru\\_cache接收两个参数，maxsize和typed。\n- maxsize指定存储结果的数量，缓存满了之后，旧的结果会被丢掉，一般为了性能考虑，这个值设为2的幂。\n- typed是否区分不同类型的结果（如浮点数和整数）\n- 同时lru\\_cache要求被传入的函数的参数是可散列的。\n\n7.8.2 单分派泛函数\n\nPython中经常会困扰我们的问题是:没有switch语句，如何处理多条件的问题。用多个if/elif/else组合可以解决这个问题，但有时候这样做的代码过于冗杂难以阅读。      \n\nsingle\\_dispatch装饰器就是被用来处理这种问题的。使用 @singledispatch 装饰的普通函数会变成泛函数（generic function）：根据第一个参数的类型，以不同方式执行相同操作的一组函数。\n\n下面的例子展示了一个根据参数类型不同生成不同的Html的场景\n\n```python\nfrom functools import singledispatch\nfrom collections import abc\nimport numbers\nimport html\n@singledispatch\ndef htmlize(obj):\n    content = html.escape(repr(obj))\n    return '<pre>{}</pre>'.format(content)\n@htmlize.register(str)\ndef _(text):\n    content = html.escape(text).replace('\\n', '<br>\\n')\n    return '<p>{0}</p>'.format(content)\n@htmlize.register(numbers.Integral)\ndef _(n):\n    return '<pre>{0} (0x{0:x})</pre>'.format(n)\n@htmlize.register(tuple)\n@htmlize.register(abc.MutableSequence)\ndef _(seq):\n    inner = '</li>\\n<li>'.join(htmlize(item) for item in seq)\n    return '<ul>\\n<li>' + inner + '</li>\\n</ul>'\n\n```\n\n注册的专门函数应该尽可能处理抽象基类（如 numbers.Integral 和abc.MutableSequence），不要处理具体实现（如 int 和 list）。这样，代码支持的兼容类型更广泛。例如，Python 扩展可以子类化 numbers.Integral，使用固定的位数实现 int 类型。   \n\nsingle dispatch 类似重载，但绝不是为了把 Java 的那种方法重载带入 Python。   \n\n#### 7.9 参数化装饰器\nPython 把被装饰的函数作为第一个参数传给装饰器函数。那怎么让装饰器接受其他参数呢？答案是：创建一个装饰器工厂函数，把参数传给它，返回一个装饰器，然后再把它应用到要装饰的函数上。\n\n下面依次讲解上文中出现过的装饰器的参数化:\n\n##### 参数化的registeration\n为了便于启用或禁用 register 执行的函数注册功能，我们为它提供一个可选的 active参数，设为 False 时，不注册被装饰的函数。\n```python     \nregistry = set()\ndef register(active=True):\n    def decorate(func):\n        print('running register(active=%s)->decorate(%s)'% (active, func))\n        if active:\n            registry.add(func)\n        else:\n            registry.discard(func)\n        return func\n    return decorate\n@register(active=False)\ndef f1():\n    print('running f1()')\n@register()\ndef f2():\n    print('running f2()')\ndef f3():\n    print('running f3()')\n```\n\n这里的关键是，register() 要返回 decorate，然后把它应用到被装饰的函数上。    \n这只是一个最简单的例子，参数化装饰器通常会把被装饰的函数替换掉，而且结构上需要多一层嵌套。接下来会探讨这种函数金字塔。  \n\n##### 参数化clock装饰器\n\n我们需要对clock装饰器添加一个功能：让用户传入一个格式字符串，控制被装饰函数的输出。\n\n```python   \nimport time\nDEFAULT_FMT = '[{elapsed:0.8f}s] {name}({args}) -> {result}'\ndef clock(fmt=DEFAULT_FMT): #参数化的装饰器工厂函数\n    def decorate(func):     #真正的装饰器\n        def clocked(*_args):#包装函数的函数\n            t0 = time.time()\n            _result = func(*_args)\n            elapsed = time.time() - t0\n            name = func.__name__\n            args = ', '.join(repr(arg) for arg in _args)\n            result = repr(_result)\n            print(fmt.format(**locals()))\n            return _result\n        return clocked\n    return decorate \nif __name__ == '__main__':\n    @clock()\n    def snooze(seconds):\n        time.sleep(seconds)\n        for i in range(3):\n            snooze(.123)\n```\n\n#### 小结\n这章开始已经进入元编程领域了。\n参数化装饰器基本上都涉及至少两层嵌套函数，如果想使用 @functools.wraps 生成装饰器，为高级技术提供更好的支持，嵌套层级可能还会更深，比如前面简要介绍过的叠放装饰器。     \n若想真正理解装饰器，需要区分导入时和运行时，还要知道变量作用域、闭包和新增的nonlocal 声明。掌握闭包和 nonlocal 不仅对构建装饰器有帮助，还能协助你在构建GUI 程序时面向事件编程，或者使用回调处理异步 I/O。","source":"_posts/fluent-python-7.md","raw":"title: Fluent Python 第七章小结\ndate: 2017-12-19 17:01:13\ntags:\n- Python\n- decorator\n- closure\n- fluent python\ncategories:\n- 读书笔记\nphotos:\t \n- \"https://github.com/aldslvda/blog-images/blob/master/fluent_python_logo.png?raw=true\"\ntoc: true\ncomment: true\n---\n\n## Fluent Python ##\n### Chapter 7. Function Decorators and Closures\n### 第七章: 函数装饰器和函数闭包\n\n函数装饰器使用特殊的\b标记增强函数，要想掌握装饰器，首先要理解函数闭包。  \nnonlocal 是在Python3 中引入的保留关键字，如果要使用函数闭包和装饰器，也必须要了解nonlocal。    \n另外，闭包同时也是函数式编程和回调式异步编程的基础。   \n这一张要讨论的话题:    \n基础知识：    \n\n- python 计算装饰器句法\n- python 如何判断变量是否是局部的\n- 闭包存在的原因和工作原理\n- nonlocal 可以解决的问题\n\n进一步探讨装饰器:\n\n- 实现行为良好的装饰器\n- 标准库中有用的装饰器\n- 实现参数化装饰器\n\n#### 装饰器基础知识\n\n装饰器是一个可调用的对象，它的参数是另一个函数（被装饰的函数），装饰器可能会将输入的函数进行处理返回结果，或者将其替换成另一个函数或者可调用对象。     \n下面是一个例子, 假设有一个名为decorate的装饰器:\n\n```python\n@decorate\ndef target():\n    print('running target()') \n# 等价于下面的写法\ntarget = decorate(target())\n```\n\n\n上述两段代码得到的target函数都是经过decrate处理过的, 下面的控制台会话证明了这点:   \n\n    ```python   \n>>> def deco(func):\n...     def inner():\n...         print('running inner()')\n...     return inner\n...\n>>> @deco\n... def target():\n...     print('running target()')\n...\n>>> target()\nrunning inner()\n>>> target\n<function deco.<locals>.inner at 0x10063b598>\n```\n\n可以看到target 已经被替换成了inner,严格来说target现在是inner的引用。       \n\n#### Python何时执行装饰器    \n装饰器的一大特性是，能把被装饰的函数替换成其他函数，第二个特性是装饰器加载模块时会立即执行。  \n第二个特性看可以看看下面这个例子:    \n\n```python     \nregistry = []\ndef register(func):\n    print('running register(%s)' % func)\n    registry.append(func)\n    return func\n\n@register\ndef f1():\n    print('running f1()')\n@register\ndef f2():\n    print('running f2()')\ndef f3():\n    print('running f3()')\ndef main():\n    print('running main()')\n    print('registry ->', registry)\n    f1()\n    f2()\n    f3()\nif __name__=='__main__':\n    main()\n```\n\n控制台输出如下:\n\n```python    \nrunning register(<function f1 at 0x10320eb70>)\nrunning register(<function f2 at 0x10320eae8>)\nrunning main()\nregistry -> [<function f1 at 0x10320eb70>, <function f2 at 0x10320eae8>]\nrunning f1()\nrunning f2()\nrunning f3()\n```\n\n如果是导入:    \n```python    \n>>> import registeration\nrunning register(<function f1 at 0x1100480d0>)\nrunning register(<function f2 at 0x110048158>)\n>>> registeration.registry\n[<function f1 at 0x1100480d0>, <function f2 at 0x110048158>]   \n```\n\n上面的例子可以看出：函数装饰器在导入模块时立即执行，而被装饰的函数只在明确调用时运行。这突出了 Python 的**导入时**和**运行时**之间的区别。    \n\n这里提到装饰器的通常用法和registeration.py中的不同:   \n- 例子中的装饰器函数与被装饰的函数在同一个模块中定义。实际情况是，装饰器通常在一个模块中定义，然后应用到其他模块中的函数上。\n- 例子中的 register \n\n#### 使用装饰器改进策略模式\n在使用一等对象的特性实现策略模式时，曾经说过，当时的实现有一些问题，就是如何方便的遍历所有的策略以获取最佳的折扣，现在我们可以使用装饰器很好的解决这个问题。\n\n```python    \npromos = []\ndef promotion(promo_func):\n    promos.append(promo_func)\n    return promo_func\n@promotion\ndef fidelity(order):\n    \"\"\"为积分为1000或以上的顾客提供5%折扣\"\"\"\n    return order.total() * .05 if order.customer.fidelity >= 1000 else 0\n@promotion\n    def bulk_item(order):\n    \"\"\"单个商品为20个或以上时提供10%折扣\"\"\"\n    discount = 0\n    for item in order.cart:\n        if item.quantity >= 20:\n            discount += item.total() * .1\n        return discount\n@promotion\ndef large_order(order):\n    \"\"\"订单中的不同商品达到10个或以上时提供7%折扣\"\"\"\n    distinct_items = {item.product for item in order.cart}\n    if len(distinct_items) >= 10:\n        return order.total() * .07\n    return 0\ndef best_promo(order):\n    \"\"\"选择可用的最佳折扣\"\"\"\n    return max(promo(order) for promo in promos)\n```\n\n这样做的好处有:\n\n- 策略函数无须使用特殊的名称作区分\n- @promotion 装饰器既可以增加策略，也可以方便禁用策略（注释掉装饰器即可）\n- 策略函数可以在任何地方定义，只需要使用@promotion装饰器\n\n多数装饰器会修改被装饰的函数。通常，它们会定义一个内部函数，然后将其返回，替换被装饰的函数。使用内部函数的代码几乎都要靠闭包才能正确运作。为了理解闭包，我们要先了解 Python 中的变量作用域。   \n#### Python中变量的作用域   \n下面的一系列控制台交互可以让我们更加了解Python的变量作用域：     \n\n```python    \n>>> def f1(a):\n...     print(a)\n...     print(b)\n...\n>>> f1(3)\n3\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 3, in f1\nNameError: name 'b' is not defined\n```\n\n这个例子中由于没有定义全局变量b导致报错\n\n```python    \n>>> b = 6\n>>> f1(3)\n3\n6\n\n```\n\n这里定义了全局变量b,正常运行\n\n```python    \n>>> def f2(a):\n...     print(a)\n...     print(b)\n...     b = 6\n...\n>>> b = 3\n>>> f2(3)\n3\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 3, in f2\nUnboundLocalError: local variable 'b' referenced before assignment\n\n```\n\n这里由于函数f2的定义体中给b赋值了，导致f2判断b是局部变量。\n\n这里我们可以看到Python对变量的一个设计: Python 不要求声明变量，但是假定在函数定义体中赋值的变量是局部变量。这样的好处是可以防止在不知情的情况下使用全局变量。\n如果也要在函数定义体中对全局变量赋值，只需要用global声明：\n\n```python    \n>>> def f3(a):\n...     global b\n...     print(a)\n...     print(b)\n...     b = 6\n...\n>>> b = 3\n>>> f3(b)\n3\n3\n>>> b\n6\n>>>\n```\n\n为了深入理解一下f1/f2这两个函数的变量加载方式，可以使用dis模块反汇编，查看字节码：  \n\n```python     \n>>> dis(f1)\n  2           0 LOAD_GLOBAL              0 (print)\n              2 LOAD_FAST                0 (a)\n              4 CALL_FUNCTION            1\n              6 POP_TOP\n\n  3           8 LOAD_GLOBAL              0 (print)\n             10 LOAD_GLOBAL              1 (b)  #全局变量\n             12 CALL_FUNCTION            1\n             14 POP_TOP\n             16 LOAD_CONST               0 (None)\n             18 RETURN_VALUE\n\nSyntaxError: invalid syntax\n>>> dis(f2)\n  2           0 LOAD_GLOBAL              0 (print)\n              2 LOAD_FAST                0 (a)\n              4 CALL_FUNCTION            1\n              6 POP_TOP\n\n  3           8 LOAD_GLOBAL              0 (print)\n             10 LOAD_FAST                1 (b)  #局部变量\n             12 CALL_FUNCTION            1\n             14 POP_TOP\n\n  4          16 LOAD_CONST               1 (6)\n             18 STORE_FAST               1 (b)\n             20 LOAD_CONST               0 (None)\n             22 RETURN_VALUE\n```\n\n\n####  7.5  闭包   \n闭包指延伸了作用域的函数，其中包含函数定义体中引用、但是不在定义体中定义的非全局变量。函数是不是匿名的没有关系，关键是它能访问定义体之外定义的非全局变量。     \n这个概念非常抽象，我们通过一个例子更好地理解它:\n\n> 假如有个名为 avg 的函数，它的作用是计算不断增加的系列值的均值；例如，整个历史中某个商品的平均收盘价。每天都会增加新价格，因此平均值要考虑至目前为止所有的价格。    \n\n首先看看这个函数的面对对象实现:\n\n```python   \nclass Averager():\n    def __init__(self):\n        self.series = []\n    def __call__(self, new_value):\n        self.series.append(new_value)\n        total = sum(self.series)\n        return total/len(self.series)\n```\n\n其中Averager()是一个可调用对象，创建Averager的实例就可以达成上面所说的要求。\n\n> \\>\\>\\> avg = Averager()     \n> \\>\\>\\> avg(10)   \n> 10.0   \n> \\>\\>\\> avg(11)    \n> 10.5   \n> \\>\\>\\> avg(12)    \n> 11.0  \n\n接下来是函数式实现，使用高阶函数make_averager:    \n\n```python    \ndef make_averager():\n    series = []\n    def averager(new_value):\n        series.append(new_value)\n        total = sum(series)\n        return total/len(series)\n    return averager\n```\n> \\>\\>\\> avg = make_averager()    \n> \\>\\>\\> avg(10)    \n>  10.0    \n> \\>\\>\\> avg(11)    \n>  10.5    \n> \\>\\>\\> avg(12)    \n>  11.0    \n\n这两个示例的相同点: 都是通过更新历史值再进行平均值计算。问题在于数据的存储，面对对象实现是存储在实例属性self.series中的，而make_averager是存储在series中的。\n\n这里需要注意的地方是，在 avg = make\\_averager() 这句执行以后，make_averager函数已经返回了，这时series的本地作用域已经不存在了。\n\n而在averager中，series是自由变量（free variable）,指未在本地作用域中绑定的变量。\n![自由变量](https://github.com/aldslvda/blog-images/blob/master/fluent-python-7.1.png?raw=true)\n\n接下来审查averager对象，我们发现Python在\\_\\_code\\_\\_属性中保存局部变量和自由变量的\b名称。\n\n```python    \n>>> from averager import make_averager\n>>>\n>>> avg = make_averager()\n>>> avg.__code__.co_varnames\n('new_value', 'total')\n>>> avg.__code__.co_freevars\n('series',)\n```\n\nseries 绑定在 avg.\\_\\_closure\\_\\_属性中\n\n```python     \n>>> avg.__closure__[0].cell_contents\n[]\n>>> avg(10)\n10.0\n>>> avg.__closure__[0].cell_contents\n[10]\n>>> avg(11)\n10.5\n>>> avg.__closure__[0].cell_contents\n[10, 11]\n>>> avg(13)\n11.333333333333334\n>>> avg.__closure__[0].cell_contents\n[10, 11, 13]\n```\n\n这样我们可以很形象的理解闭包的性质了，闭包是一种函数，它会保留定义函数时存在的自由变量的绑定，这样调用函数时，虽然定义作用域不可用了，但是仍能使用那些绑定。    \n\n只有嵌套在其他函数中的函数才可能需要处理不在全局作用域中的外部变量，这也是匿名函数容易和闭包混淆的一个原因。    \n\n#### nonlocal声明\n\n前面实现的make_averager函数的效率并不高，因为每次调用avg都要对所有历史值求和，实际上只需要当前值+历史值的和就可以了。    \n接下来我们尝试对代码进行一些优化:      \n\n```python\ndef make_averager_v1():\n    count = 0\n    total = 0\n    def averager(new_value):\n        count += 1\n        total += new_value\n        return total / count\n    return averager    \n```\n\n控制台输出如下:   \n```python      \n>>> from averager import make_averager_v1\n>>> avg = make_averager_v1()\n>>> avg(10)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/Users/NickAl/study/github/readings/Fluent-Python/7. Function Decorators and Closures/averager.py\", line 13, in averager\n    count += 1\nUnboundLocalError: local variable 'count' referenced before assignment\n>>>\n```\n\n由于函数的定义体对count赋值了，由于count是int,赋值会隐式的创建一个新对象，导致函数判断count是局部变量而不是自由变量，不会保存在闭包中，会导致抛出异常。\n\nPython3 中的nonlocal声明会把变量标记为自由变量，使得变量可以保存在闭包中。\n下面利用nonlocal对上面的代码进行修正：\n\n```python    \ndef make_averager_v1():\n    count = 0\n    total = 0\n    def averager(new_value):\n        nonlocal count, total\n        count += 1\n        total += new_value\n        return total / count\n    return averager\n```\n在没有nonlocal声明的Python2中，我们可以将变量作为值存储在可变对象中来解决这个问题。\n\n#### 实现一个简单的装饰器     \n下面是一个简单的装饰器，输出函数的运行时间, clocked是一个闭包，func是自由变量。   \n\n```python    \nimport time\ndef clock(func):\n    def clocked(*args):\n        t0 = time.perf_counter()\n        result = func(*args)\n        elapsed = time.perf_counter() - t0\n        name = func.__name__\n        arg_str = ', '.join(repr(arg) for arg in args)\n        print('[%0.8fs] %s(%s) -> %r' % (elapsed, name, arg_str, result))\n        return result\n    return clocked\n```\n\n下面的Python代码展示了如何使用这个装饰器:\n\n```python     \n# clockdeco_demo.py\nimport time\nfrom clockdeco import clock\n@clock\ndef snooze(seconds):\n    time.sleep(seconds)\n@clock\ndef factorial(n):\n    return 1 if n < 2 else n*factorial(n-1)\nif __name__=='__main__':\n    print('*' * 40, 'Calling snooze(.123)')\n    snooze(.123)\n    print('*' * 40, 'Calling factorial(6)')\n    print('6! =', factorial(6))\n```\n\n输出如下:\n\n> -> % python3 clockdeco_demo.py     \n> **************************************** Calling snooze(.123)     \n> [0.12309374s] snooze(0.123) -> None     \n> **************************************** Calling factorial(6)     \n> [0.00000162s] factorial(1) -> 1    \n> [0.00003553s] factorial(2) -> 2    \n> [0.00005951s] factorial(3) -> 6    \n> [0.00008194s] factorial(4) -> 24    \n> [0.00010441s] factorial(5) -> 120    \n> [0.00013048s] factorial(6) -> 720    \n> 6! = 720    \n\n这个例子中，clocked参数做了如下操作:     \n(1) 记录初始时间 t0。    \n(2) 调用原来的 factorial 函数，保存结果。    \n(3) 计算经过的时间。    \n(4) 格式化收集的数据，然后打印出来。    \n(5) 返回第 2 步保存的结果。    \n这是装饰器的典型行为：把被装饰的函数替换成新函数，二者接受相同的参数，而且（通常）返回被装饰的函数本该返回的值，同时还会做些额外操作。\n\n上面的装饰器还存在一些问题:\n\n- 不支持关键字参数\n- 遮盖了被装饰的函数的\\_\\_name\\_\\_和\\_\\_doc\\_\\_属性\n\n下面的示例解决了这个问题：\n\n```python    \n#clockdeco2.py\nimport time\nimport functools\ndef clock(func):\n    @functools.wraps(func)\n    def clocked(*args, **kwargs):\n        t0 = time.time()\n        result = func(*args, **kwargs)\n        elapsed = time.time() - t0\n        name = func.__name__\n        arg_lst = []\n        if args:\n            arg_lst.append(', '.join(repr(arg) for arg in args))\n        if kwargs:\n            pairs = ['%s=%r' % (k, w) for k, w in sorted(kwargs.items())]\n            arg_lst.append(', '.join(pairs))\n            arg_str = ', '.join(arg_lst)\n        print('[%0.8fs] %s(%s) -> %r ' % (elapsed, name, arg_str, result))\n        return result\n    return clocked\n```\nfunctool.wrap是标准库中可以直接取用的装饰器。\n\n#### 标准库中的装饰器\n\n这节会讲到functool中的两个值得关注的装饰器: lru\\_cache和single\\_dispatch\n\n##### 使用functools.lru_cache做备忘\nfunctools.lru_cache 是非常实用的装饰器，它实现了备忘（memoization）功能。这是一项优化技术，它把耗时的函数的结果保存起来，避免传入相同的参数时重复计算。LRU三个字母是“Least Recently Used”的缩写，表明缓存不会无限制增长，一段时间不用的缓存条目会被扔掉。    \n生成第 n 个斐波纳契数这种慢速递归函数适合使用 lru_cache，下面的代码是一个示例\n\n```python     \nfrom clockdeco import clock\n@clock\ndef fibonacci(n):\n    if n < 2:\n        return n\n    return fibonacci(n-2) + fibonacci(n-1)\nif __name__=='__main__':\n    print(fibonacci(6))\n\n```\n\n输出如下：\n\n> -> % python3 fibo_demo.py  \n> [0.00000075s] fibonacci(0) -> 0   \n> [0.00000106s] fibonacci(1) -> 1  \n> [0.00008829s] fibonacci(2) -> 1  \n> [0.00000052s] fibonacci(1) -> 1  \n> [0.00000056s] fibonacci(0) -> 0  \n> [0.00000068s] fibonacci(1) -> 1  \n> [0.00002681s] fibonacci(2) -> 1  \n> [0.00005140s] fibonacci(3) -> 2  \n> [0.00016751s] fibonacci(4) -> 3  \n> [0.00000051s] fibonacci(1) -> 1  \n> [0.00000046s] fibonacci(0) -> 0  \n> [0.00000054s] fibonacci(1) -> 1  \n> [0.00002430s] fibonacci(2) -> 1  \n> [0.00005003s] fibonacci(3) -> 2  \n> [0.00000054s] fibonacci(0) -> 0  \n> [0.00000057s] fibonacci(1) -> 1  \n> [0.00002484s] fibonacci(2) -> 1   \n> [0.00000044s] fibonacci(1) -> 1  \n> [0.00000081s] fibonacci(0) -> 0   \n> [0.00000073s] fibonacci(1) -> 1   \n> [0.00002765s] fibonacci(2) -> 1   \n> [0.00005353s] fibonacci(3) -> 2   \n> [0.00010212s] fibonacci(4) -> 3  \n> [0.00017658s] fibonacci(5) -> 5  \n> [0.00037021s] fibonacci(6) -> 8  \n>  8\n\n可以看到低阶的部分不断的被运算，非常浪费时间，下面是利用缓存优化后的代码:\n\n```python    \nimport functools\nfrom clockdeco import clock\n@functools.lru_cache()\n@clock\ndef fibonacci(n):\n    if n < 2:\n        return n\n    return fibonacci(n-2) + fibonacci(n-1)\nif __name__=='__main__':\n    print(fibonacci(6))\n```\n\n控制台输出:\n\n> -> % python3 fibo_demo.py  \n> [0.00000114s] fibonacci(0) -> 0  \n> [0.00000152s] fibonacci(1) -> 1  \n> [0.00014005s] fibonacci(2) -> 1  \n> [0.00000173s] fibonacci(3) -> 2  \n> [0.00018128s] fibonacci(4) -> 3  \n> [0.00000119s] fibonacci(5) -> 5   \n> [0.00022029s] fibonacci(6) -> 8   \n>  8  \n\n这里要注意的两点是:lru\\_cache必须向常规函数一样被调用，而是装饰器是可以叠加的。   \n上面的例子告诉我们lru\\_cache在优化递归缓存方面的巨大用途，其实它在Web应用中也能起到很大的用处\n\n> functools.lru_cache(maxsize=128, typed=False)\n\n上面可以看出functools.lru\\_cache接收两个参数，maxsize和typed。\n- maxsize指定存储结果的数量，缓存满了之后，旧的结果会被丢掉，一般为了性能考虑，这个值设为2的幂。\n- typed是否区分不同类型的结果（如浮点数和整数）\n- 同时lru\\_cache要求被传入的函数的参数是可散列的。\n\n7.8.2 单分派泛函数\n\nPython中经常会困扰我们的问题是:没有switch语句，如何处理多条件的问题。用多个if/elif/else组合可以解决这个问题，但有时候这样做的代码过于冗杂难以阅读。      \n\nsingle\\_dispatch装饰器就是被用来处理这种问题的。使用 @singledispatch 装饰的普通函数会变成泛函数（generic function）：根据第一个参数的类型，以不同方式执行相同操作的一组函数。\n\n下面的例子展示了一个根据参数类型不同生成不同的Html的场景\n\n```python\nfrom functools import singledispatch\nfrom collections import abc\nimport numbers\nimport html\n@singledispatch\ndef htmlize(obj):\n    content = html.escape(repr(obj))\n    return '<pre>{}</pre>'.format(content)\n@htmlize.register(str)\ndef _(text):\n    content = html.escape(text).replace('\\n', '<br>\\n')\n    return '<p>{0}</p>'.format(content)\n@htmlize.register(numbers.Integral)\ndef _(n):\n    return '<pre>{0} (0x{0:x})</pre>'.format(n)\n@htmlize.register(tuple)\n@htmlize.register(abc.MutableSequence)\ndef _(seq):\n    inner = '</li>\\n<li>'.join(htmlize(item) for item in seq)\n    return '<ul>\\n<li>' + inner + '</li>\\n</ul>'\n\n```\n\n注册的专门函数应该尽可能处理抽象基类（如 numbers.Integral 和abc.MutableSequence），不要处理具体实现（如 int 和 list）。这样，代码支持的兼容类型更广泛。例如，Python 扩展可以子类化 numbers.Integral，使用固定的位数实现 int 类型。   \n\nsingle dispatch 类似重载，但绝不是为了把 Java 的那种方法重载带入 Python。   \n\n#### 7.9 参数化装饰器\nPython 把被装饰的函数作为第一个参数传给装饰器函数。那怎么让装饰器接受其他参数呢？答案是：创建一个装饰器工厂函数，把参数传给它，返回一个装饰器，然后再把它应用到要装饰的函数上。\n\n下面依次讲解上文中出现过的装饰器的参数化:\n\n##### 参数化的registeration\n为了便于启用或禁用 register 执行的函数注册功能，我们为它提供一个可选的 active参数，设为 False 时，不注册被装饰的函数。\n```python     \nregistry = set()\ndef register(active=True):\n    def decorate(func):\n        print('running register(active=%s)->decorate(%s)'% (active, func))\n        if active:\n            registry.add(func)\n        else:\n            registry.discard(func)\n        return func\n    return decorate\n@register(active=False)\ndef f1():\n    print('running f1()')\n@register()\ndef f2():\n    print('running f2()')\ndef f3():\n    print('running f3()')\n```\n\n这里的关键是，register() 要返回 decorate，然后把它应用到被装饰的函数上。    \n这只是一个最简单的例子，参数化装饰器通常会把被装饰的函数替换掉，而且结构上需要多一层嵌套。接下来会探讨这种函数金字塔。  \n\n##### 参数化clock装饰器\n\n我们需要对clock装饰器添加一个功能：让用户传入一个格式字符串，控制被装饰函数的输出。\n\n```python   \nimport time\nDEFAULT_FMT = '[{elapsed:0.8f}s] {name}({args}) -> {result}'\ndef clock(fmt=DEFAULT_FMT): #参数化的装饰器工厂函数\n    def decorate(func):     #真正的装饰器\n        def clocked(*_args):#包装函数的函数\n            t0 = time.time()\n            _result = func(*_args)\n            elapsed = time.time() - t0\n            name = func.__name__\n            args = ', '.join(repr(arg) for arg in _args)\n            result = repr(_result)\n            print(fmt.format(**locals()))\n            return _result\n        return clocked\n    return decorate \nif __name__ == '__main__':\n    @clock()\n    def snooze(seconds):\n        time.sleep(seconds)\n        for i in range(3):\n            snooze(.123)\n```\n\n#### 小结\n这章开始已经进入元编程领域了。\n参数化装饰器基本上都涉及至少两层嵌套函数，如果想使用 @functools.wraps 生成装饰器，为高级技术提供更好的支持，嵌套层级可能还会更深，比如前面简要介绍过的叠放装饰器。     \n若想真正理解装饰器，需要区分导入时和运行时，还要知道变量作用域、闭包和新增的nonlocal 声明。掌握闭包和 nonlocal 不仅对构建装饰器有帮助，还能协助你在构建GUI 程序时面向事件编程，或者使用回调处理异步 I/O。","slug":"fluent-python-7","published":1,"updated":"2019-04-25T01:27:24.747Z","comments":1,"layout":"post","link":"","_id":"cjuw5c6id005zdhyfjdlvh2jw","content":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-7-Function-Decorators-and-Closures\"><a href=\"#Chapter-7-Function-Decorators-and-Closures\" class=\"headerlink\" title=\"Chapter 7. Function Decorators and Closures\"></a>Chapter 7. Function Decorators and Closures</h3><h3 id=\"第七章-函数装饰器和函数闭包\"><a href=\"#第七章-函数装饰器和函数闭包\" class=\"headerlink\" title=\"第七章: 函数装饰器和函数闭包\"></a>第七章: 函数装饰器和函数闭包</h3><p>函数装饰器使用特殊的\b标记增强函数，要想掌握装饰器，首先要理解函数闭包。<br>nonlocal 是在Python3 中引入的保留关键字，如果要使用函数闭包和装饰器，也必须要了解nonlocal。<br>另外，闭包同时也是函数式编程和回调式异步编程的基础。<br>这一张要讨论的话题:<br>基础知识：    </p>\n<ul>\n<li>python 计算装饰器句法</li>\n<li>python 如何判断变量是否是局部的</li>\n<li>闭包存在的原因和工作原理</li>\n<li>nonlocal 可以解决的问题</li>\n</ul>\n<p>进一步探讨装饰器:</p>\n<ul>\n<li>实现行为良好的装饰器</li>\n<li>标准库中有用的装饰器</li>\n<li>实现参数化装饰器</li>\n</ul>\n<h4 id=\"装饰器基础知识\"><a href=\"#装饰器基础知识\" class=\"headerlink\" title=\"装饰器基础知识\"></a>装饰器基础知识</h4><p>装饰器是一个可调用的对象，它的参数是另一个函数（被装饰的函数），装饰器可能会将输入的函数进行处理返回结果，或者将其替换成另一个函数或者可调用对象。<br>下面是一个例子, 假设有一个名为decorate的装饰器:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@decorate</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">target</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running target()'</span>) </span><br><span class=\"line\"><span class=\"comment\"># 等价于下面的写法</span></span><br><span class=\"line\">target = decorate(target())</span><br></pre></td></tr></table></figure>\n<p>上述两段代码得到的target函数都是经过decrate处理过的, 下面的控制台会话证明了这点:   </p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deco</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        print(<span class=\"string\">'running inner()'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> inner</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>@deco</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">target</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(<span class=\"string\">'running target()'</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>target()</span><br><span class=\"line\">running inner()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>target</span><br><span class=\"line\">&lt;function deco.&lt;locals&gt;.inner at <span class=\"number\">0x10063b598</span>&gt;</span><br></pre></td></tr></table></figure>\n</code></pre><p>可以看到target 已经被替换成了inner,严格来说target现在是inner的引用。       </p>\n<h4 id=\"Python何时执行装饰器\"><a href=\"#Python何时执行装饰器\" class=\"headerlink\" title=\"Python何时执行装饰器\"></a>Python何时执行装饰器</h4><p>装饰器的一大特性是，能把被装饰的函数替换成其他函数，第二个特性是装饰器加载模块时会立即执行。<br>第二个特性看可以看看下面这个例子:    </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry = []</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running register(%s)'</span> % func)</span><br><span class=\"line\">    registry.append(func)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> func</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@register</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f1()'</span>)</span><br><span class=\"line\"><span class=\"meta\">@register</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f2()'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f3</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f3()'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running main()'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'registry -&gt;'</span>, registry)</span><br><span class=\"line\">    f1()</span><br><span class=\"line\">    f2()</span><br><span class=\"line\">    f3()</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>控制台输出如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">running register(&lt;function f1 at <span class=\"number\">0x10320eb70</span>&gt;)</span><br><span class=\"line\">running register(&lt;function f2 at <span class=\"number\">0x10320eae8</span>&gt;)</span><br><span class=\"line\">running main()</span><br><span class=\"line\">registry -&gt; [&lt;function f1 at 0x10320eb70&gt;, &lt;function f2 at 0x10320eae8&gt;]</span><br><span class=\"line\">running f1()</span><br><span class=\"line\">running f2()</span><br><span class=\"line\">running f3()</span><br></pre></td></tr></table></figure>\n<p>如果是导入:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> registeration</span><br><span class=\"line\">running register(&lt;function f1 at <span class=\"number\">0x1100480d0</span>&gt;)</span><br><span class=\"line\">running register(&lt;function f2 at <span class=\"number\">0x110048158</span>&gt;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>registeration.registry</span><br><span class=\"line\">[&lt;function f1 at <span class=\"number\">0x1100480d0</span>&gt;, &lt;function f2 at <span class=\"number\">0x110048158</span>&gt;]</span><br></pre></td></tr></table></figure></p>\n<p>上面的例子可以看出：函数装饰器在导入模块时立即执行，而被装饰的函数只在明确调用时运行。这突出了 Python 的<strong>导入时</strong>和<strong>运行时</strong>之间的区别。    </p>\n<p>这里提到装饰器的通常用法和registeration.py中的不同:   </p>\n<ul>\n<li>例子中的装饰器函数与被装饰的函数在同一个模块中定义。实际情况是，装饰器通常在一个模块中定义，然后应用到其他模块中的函数上。</li>\n<li>例子中的 register </li>\n</ul>\n<h4 id=\"使用装饰器改进策略模式\"><a href=\"#使用装饰器改进策略模式\" class=\"headerlink\" title=\"使用装饰器改进策略模式\"></a>使用装饰器改进策略模式</h4><p>在使用一等对象的特性实现策略模式时，曾经说过，当时的实现有一些问题，就是如何方便的遍历所有的策略以获取最佳的折扣，现在我们可以使用装饰器很好的解决这个问题。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promos = []</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">promotion</span><span class=\"params\">(promo_func)</span>:</span></span><br><span class=\"line\">    promos.append(promo_func)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promo_func</span><br><span class=\"line\"><span class=\"meta\">@promotion</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fidelity</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"为积分为1000或以上的顾客提供5%折扣\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.05</span> <span class=\"keyword\">if</span> order.customer.fidelity &gt;= <span class=\"number\">1000</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">@promotion</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bulk_item</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"单个商品为20个或以上时提供10%折扣\"\"\"</span></span><br><span class=\"line\">    discount = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item.quantity &gt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">            discount += item.total() * <span class=\"number\">.1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> discount</span><br><span class=\"line\"><span class=\"meta\">@promotion</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">large_order</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"订单中的不同商品达到10个或以上时提供7%折扣\"\"\"</span></span><br><span class=\"line\">    distinct_items = &#123;item.product <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(distinct_items) &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.07</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">best_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"选择可用的最佳折扣\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(promo(order) <span class=\"keyword\">for</span> promo <span class=\"keyword\">in</span> promos)</span><br></pre></td></tr></table></figure>\n<p>这样做的好处有:</p>\n<ul>\n<li>策略函数无须使用特殊的名称作区分</li>\n<li>@promotion 装饰器既可以增加策略，也可以方便禁用策略（注释掉装饰器即可）</li>\n<li>策略函数可以在任何地方定义，只需要使用@promotion装饰器</li>\n</ul>\n<p>多数装饰器会修改被装饰的函数。通常，它们会定义一个内部函数，然后将其返回，替换被装饰的函数。使用内部函数的代码几乎都要靠闭包才能正确运作。为了理解闭包，我们要先了解 Python 中的变量作用域。   </p>\n<h4 id=\"Python中变量的作用域\"><a href=\"#Python中变量的作用域\" class=\"headerlink\" title=\"Python中变量的作用域\"></a>Python中变量的作用域</h4><p>下面的一系列控制台交互可以让我们更加了解Python的变量作用域：     </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">(a)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(a)</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(b)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">3</span>, <span class=\"keyword\">in</span> f1</span><br><span class=\"line\">NameError: name <span class=\"string\">'b'</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br></pre></td></tr></table></figure>\n<p>这个例子中由于没有定义全局变量b导致报错</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n<p>这里定义了全局变量b,正常运行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">(a)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(a)</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(b)</span><br><span class=\"line\"><span class=\"meta\">... </span>    b = <span class=\"number\">6</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f2(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">3</span>, <span class=\"keyword\">in</span> f2</span><br><span class=\"line\">UnboundLocalError: local variable <span class=\"string\">'b'</span> referenced before assignment</span><br></pre></td></tr></table></figure>\n<p>这里由于函数f2的定义体中给b赋值了，导致f2判断b是局部变量。</p>\n<p>这里我们可以看到Python对变量的一个设计: Python 不要求声明变量，但是假定在函数定义体中赋值的变量是局部变量。这样的好处是可以防止在不知情的情况下使用全局变量。<br>如果也要在函数定义体中对全局变量赋值，只需要用global声明：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f3</span><span class=\"params\">(a)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">global</span> b</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(a)</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(b)</span><br><span class=\"line\"><span class=\"meta\">... </span>    b = <span class=\"number\">6</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f3(b)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>为了深入理解一下f1/f2这两个函数的变量加载方式，可以使用dis模块反汇编，查看字节码：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dis(f1)</span><br><span class=\"line\">  <span class=\"number\">2</span>           <span class=\"number\">0</span> LOAD_GLOBAL              <span class=\"number\">0</span> (<span class=\"keyword\">print</span>)</span><br><span class=\"line\">              <span class=\"number\">2</span> LOAD_FAST                <span class=\"number\">0</span> (a)</span><br><span class=\"line\">              <span class=\"number\">4</span> CALL_FUNCTION            <span class=\"number\">1</span></span><br><span class=\"line\">              <span class=\"number\">6</span> POP_TOP</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">3</span>           <span class=\"number\">8</span> LOAD_GLOBAL              <span class=\"number\">0</span> (<span class=\"keyword\">print</span>)</span><br><span class=\"line\">             <span class=\"number\">10</span> LOAD_GLOBAL              <span class=\"number\">1</span> (b)  <span class=\"comment\">#全局变量</span></span><br><span class=\"line\">             <span class=\"number\">12</span> CALL_FUNCTION            <span class=\"number\">1</span></span><br><span class=\"line\">             <span class=\"number\">14</span> POP_TOP</span><br><span class=\"line\">             <span class=\"number\">16</span> LOAD_CONST               <span class=\"number\">0</span> (<span class=\"literal\">None</span>)</span><br><span class=\"line\">             <span class=\"number\">18</span> RETURN_VALUE</span><br><span class=\"line\"></span><br><span class=\"line\">SyntaxError: invalid syntax</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dis(f2)</span><br><span class=\"line\">  <span class=\"number\">2</span>           <span class=\"number\">0</span> LOAD_GLOBAL              <span class=\"number\">0</span> (<span class=\"keyword\">print</span>)</span><br><span class=\"line\">              <span class=\"number\">2</span> LOAD_FAST                <span class=\"number\">0</span> (a)</span><br><span class=\"line\">              <span class=\"number\">4</span> CALL_FUNCTION            <span class=\"number\">1</span></span><br><span class=\"line\">              <span class=\"number\">6</span> POP_TOP</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">3</span>           <span class=\"number\">8</span> LOAD_GLOBAL              <span class=\"number\">0</span> (<span class=\"keyword\">print</span>)</span><br><span class=\"line\">             <span class=\"number\">10</span> LOAD_FAST                <span class=\"number\">1</span> (b)  <span class=\"comment\">#局部变量</span></span><br><span class=\"line\">             <span class=\"number\">12</span> CALL_FUNCTION            <span class=\"number\">1</span></span><br><span class=\"line\">             <span class=\"number\">14</span> POP_TOP</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">4</span>          <span class=\"number\">16</span> LOAD_CONST               <span class=\"number\">1</span> (<span class=\"number\">6</span>)</span><br><span class=\"line\">             <span class=\"number\">18</span> STORE_FAST               <span class=\"number\">1</span> (b)</span><br><span class=\"line\">             <span class=\"number\">20</span> LOAD_CONST               <span class=\"number\">0</span> (<span class=\"literal\">None</span>)</span><br><span class=\"line\">             <span class=\"number\">22</span> RETURN_VALUE</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-5-闭包\"><a href=\"#7-5-闭包\" class=\"headerlink\" title=\"7.5  闭包\"></a>7.5  闭包</h4><p>闭包指延伸了作用域的函数，其中包含函数定义体中引用、但是不在定义体中定义的非全局变量。函数是不是匿名的没有关系，关键是它能访问定义体之外定义的非全局变量。<br>这个概念非常抽象，我们通过一个例子更好地理解它:</p>\n<blockquote>\n<p>假如有个名为 avg 的函数，它的作用是计算不断增加的系列值的均值；例如，整个历史中某个商品的平均收盘价。每天都会增加新价格，因此平均值要考虑至目前为止所有的价格。    </p>\n</blockquote>\n<p>首先看看这个函数的面对对象实现:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Averager</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.series = []</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, new_value)</span>:</span></span><br><span class=\"line\">        self.series.append(new_value)</span><br><span class=\"line\">        total = sum(self.series)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total/len(self.series)</span><br></pre></td></tr></table></figure>\n<p>其中Averager()是一个可调用对象，创建Averager的实例就可以达成上面所说的要求。</p>\n<blockquote>\n<p>>>> avg = Averager()<br>>>> avg(10)<br>10.0<br>>>> avg(11)<br>10.5<br>>>> avg(12)<br>11.0  </p>\n</blockquote>\n<p>接下来是函数式实现，使用高阶函数make_averager:    </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_averager</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    series = []</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">        series.append(new_value)</span><br><span class=\"line\">        total = sum(series)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total/len(series)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> averager</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>>>> avg = make_averager()<br>>>> avg(10)<br> 10.0<br>>>> avg(11)<br> 10.5<br>>>> avg(12)<br> 11.0    </p>\n</blockquote>\n<p>这两个示例的相同点: 都是通过更新历史值再进行平均值计算。问题在于数据的存储，面对对象实现是存储在实例属性self.series中的，而make_averager是存储在series中的。</p>\n<p>这里需要注意的地方是，在 avg = make_averager() 这句执行以后，make_averager函数已经返回了，这时series的本地作用域已经不存在了。</p>\n<p>而在averager中，series是自由变量（free variable）,指未在本地作用域中绑定的变量。<br><img src=\"https://github.com/aldslvda/blog-images/blob/master/fluent-python-7.1.png?raw=true\" alt=\"自由变量\"></p>\n<p>接下来审查averager对象，我们发现Python在__code__属性中保存局部变量和自由变量的\b名称。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> averager <span class=\"keyword\">import</span> make_averager</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg = make_averager()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__code__.co_varnames</span><br><span class=\"line\">(<span class=\"string\">'new_value'</span>, <span class=\"string\">'total'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__code__.co_freevars</span><br><span class=\"line\">(<span class=\"string\">'series'</span>,)</span><br></pre></td></tr></table></figure>\n<p>series 绑定在 avg.__closure__属性中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__closure__[<span class=\"number\">0</span>].cell_contents</span><br><span class=\"line\">[]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__closure__[<span class=\"number\">0</span>].cell_contents</span><br><span class=\"line\">[<span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">11</span>)</span><br><span class=\"line\"><span class=\"number\">10.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__closure__[<span class=\"number\">0</span>].cell_contents</span><br><span class=\"line\">[<span class=\"number\">10</span>, <span class=\"number\">11</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">13</span>)</span><br><span class=\"line\"><span class=\"number\">11.333333333333334</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__closure__[<span class=\"number\">0</span>].cell_contents</span><br><span class=\"line\">[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>]</span><br></pre></td></tr></table></figure>\n<p>这样我们可以很形象的理解闭包的性质了，闭包是一种函数，它会保留定义函数时存在的自由变量的绑定，这样调用函数时，虽然定义作用域不可用了，但是仍能使用那些绑定。    </p>\n<p>只有嵌套在其他函数中的函数才可能需要处理不在全局作用域中的外部变量，这也是匿名函数容易和闭包混淆的一个原因。    </p>\n<h4 id=\"nonlocal声明\"><a href=\"#nonlocal声明\" class=\"headerlink\" title=\"nonlocal声明\"></a>nonlocal声明</h4><p>前面实现的make_averager函数的效率并不高，因为每次调用avg都要对所有历史值求和，实际上只需要当前值+历史值的和就可以了。<br>接下来我们尝试对代码进行一些优化:      </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_averager_v1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    total = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">        total += new_value</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total / count</span><br><span class=\"line\">    <span class=\"keyword\">return</span> averager</span><br></pre></td></tr></table></figure>\n<p>控制台输出如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> averager <span class=\"keyword\">import</span> make_averager_v1</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg = make_averager_v1()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">10</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  File <span class=\"string\">\"/Users/NickAl/study/github/readings/Fluent-Python/7. Function Decorators and Closures/averager.py\"</span>, line <span class=\"number\">13</span>, <span class=\"keyword\">in</span> averager</span><br><span class=\"line\">    count += <span class=\"number\">1</span></span><br><span class=\"line\">UnboundLocalError: local variable <span class=\"string\">'count'</span> referenced before assignment</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>\n<p>由于函数的定义体对count赋值了，由于count是int,赋值会隐式的创建一个新对象，导致函数判断count是局部变量而不是自由变量，不会保存在闭包中，会导致抛出异常。</p>\n<p>Python3 中的nonlocal声明会把变量标记为自由变量，使得变量可以保存在闭包中。<br>下面利用nonlocal对上面的代码进行修正：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_averager_v1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    total = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">nonlocal</span> count, total</span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">        total += new_value</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total / count</span><br><span class=\"line\">    <span class=\"keyword\">return</span> averager</span><br></pre></td></tr></table></figure>\n<p>在没有nonlocal声明的Python2中，我们可以将变量作为值存储在可变对象中来解决这个问题。</p>\n<h4 id=\"实现一个简单的装饰器\"><a href=\"#实现一个简单的装饰器\" class=\"headerlink\" title=\"实现一个简单的装饰器\"></a>实现一个简单的装饰器</h4><p>下面是一个简单的装饰器，输出函数的运行时间, clocked是一个闭包，func是自由变量。   </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clock</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clocked</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\">        t0 = time.perf_counter()</span><br><span class=\"line\">        result = func(*args)</span><br><span class=\"line\">        elapsed = time.perf_counter() - t0</span><br><span class=\"line\">        name = func.__name__</span><br><span class=\"line\">        arg_str = <span class=\"string\">', '</span>.join(repr(arg) <span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> args)</span><br><span class=\"line\">        print(<span class=\"string\">'[%0.8fs] %s(%s) -&gt; %r'</span> % (elapsed, name, arg_str, result))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clocked</span><br></pre></td></tr></table></figure>\n<p>下面的Python代码展示了如何使用这个装饰器:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># clockdeco_demo.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> clockdeco <span class=\"keyword\">import</span> clock</span><br><span class=\"line\"><span class=\"meta\">@clock</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snooze</span><span class=\"params\">(seconds)</span>:</span></span><br><span class=\"line\">    time.sleep(seconds)</span><br><span class=\"line\"><span class=\"meta\">@clock</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">factorial</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> <span class=\"keyword\">if</span> n &lt; <span class=\"number\">2</span> <span class=\"keyword\">else</span> n*factorial(n<span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'*'</span> * <span class=\"number\">40</span>, <span class=\"string\">'Calling snooze(.123)'</span>)</span><br><span class=\"line\">    snooze(<span class=\"number\">.123</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'*'</span> * <span class=\"number\">40</span>, <span class=\"string\">'Calling factorial(6)'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'6! ='</span>, factorial(<span class=\"number\">6</span>))</span><br></pre></td></tr></table></figure>\n<p>输出如下:</p>\n<blockquote>\n<p>-&gt; % python3 clockdeco_demo.py<br><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong> Calling snooze(.123)<br>[0.12309374s] snooze(0.123) -&gt; None<br><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong> Calling factorial(6)<br>[0.00000162s] factorial(1) -&gt; 1<br>[0.00003553s] factorial(2) -&gt; 2<br>[0.00005951s] factorial(3) -&gt; 6<br>[0.00008194s] factorial(4) -&gt; 24<br>[0.00010441s] factorial(5) -&gt; 120<br>[0.00013048s] factorial(6) -&gt; 720<br>6! = 720    </p>\n</blockquote>\n<p>这个例子中，clocked参数做了如下操作:<br>(1) 记录初始时间 t0。<br>(2) 调用原来的 factorial 函数，保存结果。<br>(3) 计算经过的时间。<br>(4) 格式化收集的数据，然后打印出来。<br>(5) 返回第 2 步保存的结果。<br>这是装饰器的典型行为：把被装饰的函数替换成新函数，二者接受相同的参数，而且（通常）返回被装饰的函数本该返回的值，同时还会做些额外操作。</p>\n<p>上面的装饰器还存在一些问题:</p>\n<ul>\n<li>不支持关键字参数</li>\n<li>遮盖了被装饰的函数的__name__和__doc__属性</li>\n</ul>\n<p>下面的示例解决了这个问题：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#clockdeco2.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clock</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @functools.wraps(func)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clocked</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        t0 = time.time()</span><br><span class=\"line\">        result = func(*args, **kwargs)</span><br><span class=\"line\">        elapsed = time.time() - t0</span><br><span class=\"line\">        name = func.__name__</span><br><span class=\"line\">        arg_lst = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> args:</span><br><span class=\"line\">            arg_lst.append(<span class=\"string\">', '</span>.join(repr(arg) <span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> args))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> kwargs:</span><br><span class=\"line\">            pairs = [<span class=\"string\">'%s=%r'</span> % (k, w) <span class=\"keyword\">for</span> k, w <span class=\"keyword\">in</span> sorted(kwargs.items())]</span><br><span class=\"line\">            arg_lst.append(<span class=\"string\">', '</span>.join(pairs))</span><br><span class=\"line\">            arg_str = <span class=\"string\">', '</span>.join(arg_lst)</span><br><span class=\"line\">        print(<span class=\"string\">'[%0.8fs] %s(%s) -&gt; %r '</span> % (elapsed, name, arg_str, result))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clocked</span><br></pre></td></tr></table></figure>\n<p>functool.wrap是标准库中可以直接取用的装饰器。</p>\n<h4 id=\"标准库中的装饰器\"><a href=\"#标准库中的装饰器\" class=\"headerlink\" title=\"标准库中的装饰器\"></a>标准库中的装饰器</h4><p>这节会讲到functool中的两个值得关注的装饰器: lru_cache和single_dispatch</p>\n<h5 id=\"使用functools-lru-cache做备忘\"><a href=\"#使用functools-lru-cache做备忘\" class=\"headerlink\" title=\"使用functools.lru_cache做备忘\"></a>使用functools.lru_cache做备忘</h5><p>functools.lru_cache 是非常实用的装饰器，它实现了备忘（memoization）功能。这是一项优化技术，它把耗时的函数的结果保存起来，避免传入相同的参数时重复计算。LRU三个字母是“Least Recently Used”的缩写，表明缓存不会无限制增长，一段时间不用的缓存条目会被扔掉。<br>生成第 n 个斐波纳契数这种慢速递归函数适合使用 lru_cache，下面的代码是一个示例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> clockdeco <span class=\"keyword\">import</span> clock</span><br><span class=\"line\"><span class=\"meta\">@clock</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fibonacci(n<span class=\"number\">-2</span>) + fibonacci(n<span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    print(fibonacci(<span class=\"number\">6</span>))</span><br></pre></td></tr></table></figure>\n<p>输出如下：</p>\n<blockquote>\n<p>-&gt; % python3 fibo_demo.py<br>[0.00000075s] fibonacci(0) -&gt; 0<br>[0.00000106s] fibonacci(1) -&gt; 1<br>[0.00008829s] fibonacci(2) -&gt; 1<br>[0.00000052s] fibonacci(1) -&gt; 1<br>[0.00000056s] fibonacci(0) -&gt; 0<br>[0.00000068s] fibonacci(1) -&gt; 1<br>[0.00002681s] fibonacci(2) -&gt; 1<br>[0.00005140s] fibonacci(3) -&gt; 2<br>[0.00016751s] fibonacci(4) -&gt; 3<br>[0.00000051s] fibonacci(1) -&gt; 1<br>[0.00000046s] fibonacci(0) -&gt; 0<br>[0.00000054s] fibonacci(1) -&gt; 1<br>[0.00002430s] fibonacci(2) -&gt; 1<br>[0.00005003s] fibonacci(3) -&gt; 2<br>[0.00000054s] fibonacci(0) -&gt; 0<br>[0.00000057s] fibonacci(1) -&gt; 1<br>[0.00002484s] fibonacci(2) -&gt; 1<br>[0.00000044s] fibonacci(1) -&gt; 1<br>[0.00000081s] fibonacci(0) -&gt; 0<br>[0.00000073s] fibonacci(1) -&gt; 1<br>[0.00002765s] fibonacci(2) -&gt; 1<br>[0.00005353s] fibonacci(3) -&gt; 2<br>[0.00010212s] fibonacci(4) -&gt; 3<br>[0.00017658s] fibonacci(5) -&gt; 5<br>[0.00037021s] fibonacci(6) -&gt; 8<br> 8</p>\n</blockquote>\n<p>可以看到低阶的部分不断的被运算，非常浪费时间，下面是利用缓存优化后的代码:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"><span class=\"keyword\">from</span> clockdeco <span class=\"keyword\">import</span> clock</span><br><span class=\"line\"><span class=\"meta\">@functools.lru_cache()</span></span><br><span class=\"line\"><span class=\"meta\">@clock</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fibonacci(n<span class=\"number\">-2</span>) + fibonacci(n<span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    print(fibonacci(<span class=\"number\">6</span>))</span><br></pre></td></tr></table></figure>\n<p>控制台输出:</p>\n<blockquote>\n<p>-&gt; % python3 fibo_demo.py<br>[0.00000114s] fibonacci(0) -&gt; 0<br>[0.00000152s] fibonacci(1) -&gt; 1<br>[0.00014005s] fibonacci(2) -&gt; 1<br>[0.00000173s] fibonacci(3) -&gt; 2<br>[0.00018128s] fibonacci(4) -&gt; 3<br>[0.00000119s] fibonacci(5) -&gt; 5<br>[0.00022029s] fibonacci(6) -&gt; 8<br> 8  </p>\n</blockquote>\n<p>这里要注意的两点是:lru_cache必须向常规函数一样被调用，而是装饰器是可以叠加的。<br>上面的例子告诉我们lru_cache在优化递归缓存方面的巨大用途，其实它在Web应用中也能起到很大的用处</p>\n<blockquote>\n<p>functools.lru_cache(maxsize=128, typed=False)</p>\n</blockquote>\n<p>上面可以看出functools.lru_cache接收两个参数，maxsize和typed。</p>\n<ul>\n<li>maxsize指定存储结果的数量，缓存满了之后，旧的结果会被丢掉，一般为了性能考虑，这个值设为2的幂。</li>\n<li>typed是否区分不同类型的结果（如浮点数和整数）</li>\n<li>同时lru_cache要求被传入的函数的参数是可散列的。</li>\n</ul>\n<p>7.8.2 单分派泛函数</p>\n<p>Python中经常会困扰我们的问题是:没有switch语句，如何处理多条件的问题。用多个if/elif/else组合可以解决这个问题，但有时候这样做的代码过于冗杂难以阅读。      </p>\n<p>single_dispatch装饰器就是被用来处理这种问题的。使用 @singledispatch 装饰的普通函数会变成泛函数（generic function）：根据第一个参数的类型，以不同方式执行相同操作的一组函数。</p>\n<p>下面的例子展示了一个根据参数类型不同生成不同的Html的场景</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> singledispatch</span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> abc</span><br><span class=\"line\"><span class=\"keyword\">import</span> numbers</span><br><span class=\"line\"><span class=\"keyword\">import</span> html</span><br><span class=\"line\"><span class=\"meta\">@singledispatch</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">htmlize</span><span class=\"params\">(obj)</span>:</span></span><br><span class=\"line\">    content = html.escape(repr(obj))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;pre&gt;&#123;&#125;&lt;/pre&gt;'</span>.format(content)</span><br><span class=\"line\"><span class=\"meta\">@htmlize.register(str)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_</span><span class=\"params\">(text)</span>:</span></span><br><span class=\"line\">    content = html.escape(text).replace(<span class=\"string\">'\\n'</span>, <span class=\"string\">'&lt;br&gt;\\n'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;p&gt;&#123;0&#125;&lt;/p&gt;'</span>.format(content)</span><br><span class=\"line\"><span class=\"meta\">@htmlize.register(numbers.Integral)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;pre&gt;&#123;0&#125; (0x&#123;0:x&#125;)&lt;/pre&gt;'</span>.format(n)</span><br><span class=\"line\"><span class=\"meta\">@htmlize.register(tuple)</span></span><br><span class=\"line\"><span class=\"meta\">@htmlize.register(abc.MutableSequence)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_</span><span class=\"params\">(seq)</span>:</span></span><br><span class=\"line\">    inner = <span class=\"string\">'&lt;/li&gt;\\n&lt;li&gt;'</span>.join(htmlize(item) <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> seq)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;ul&gt;\\n&lt;li&gt;'</span> + inner + <span class=\"string\">'&lt;/li&gt;\\n&lt;/ul&gt;'</span></span><br></pre></td></tr></table></figure>\n<p>注册的专门函数应该尽可能处理抽象基类（如 numbers.Integral 和abc.MutableSequence），不要处理具体实现（如 int 和 list）。这样，代码支持的兼容类型更广泛。例如，Python 扩展可以子类化 numbers.Integral，使用固定的位数实现 int 类型。   </p>\n<p>single dispatch 类似重载，但绝不是为了把 Java 的那种方法重载带入 Python。   </p>\n<h4 id=\"7-9-参数化装饰器\"><a href=\"#7-9-参数化装饰器\" class=\"headerlink\" title=\"7.9 参数化装饰器\"></a>7.9 参数化装饰器</h4><p>Python 把被装饰的函数作为第一个参数传给装饰器函数。那怎么让装饰器接受其他参数呢？答案是：创建一个装饰器工厂函数，把参数传给它，返回一个装饰器，然后再把它应用到要装饰的函数上。</p>\n<p>下面依次讲解上文中出现过的装饰器的参数化:</p>\n<h5 id=\"参数化的registeration\"><a href=\"#参数化的registeration\" class=\"headerlink\" title=\"参数化的registeration\"></a>参数化的registeration</h5><p>为了便于启用或禁用 register 执行的函数注册功能，我们为它提供一个可选的 active参数，设为 False 时，不注册被装饰的函数。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry = set()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register</span><span class=\"params\">(active=True)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorate</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'running register(active=%s)-&gt;decorate(%s)'</span>% (active, func))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> active:</span><br><span class=\"line\">            registry.add(func)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            registry.discard(func)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorate</span><br><span class=\"line\"><span class=\"meta\">@register(active=False)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f1()'</span>)</span><br><span class=\"line\"><span class=\"meta\">@register()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f2()'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f3</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f3()'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>这里的关键是，register() 要返回 decorate，然后把它应用到被装饰的函数上。<br>这只是一个最简单的例子，参数化装饰器通常会把被装饰的函数替换掉，而且结构上需要多一层嵌套。接下来会探讨这种函数金字塔。  </p>\n<h5 id=\"参数化clock装饰器\"><a href=\"#参数化clock装饰器\" class=\"headerlink\" title=\"参数化clock装饰器\"></a>参数化clock装饰器</h5><p>我们需要对clock装饰器添加一个功能：让用户传入一个格式字符串，控制被装饰函数的输出。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">DEFAULT_FMT = <span class=\"string\">'[&#123;elapsed:0.8f&#125;s] &#123;name&#125;(&#123;args&#125;) -&gt; &#123;result&#125;'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clock</span><span class=\"params\">(fmt=DEFAULT_FMT)</span>:</span> <span class=\"comment\">#参数化的装饰器工厂函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorate</span><span class=\"params\">(func)</span>:</span>     <span class=\"comment\">#真正的装饰器</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clocked</span><span class=\"params\">(*_args)</span>:</span><span class=\"comment\">#包装函数的函数</span></span><br><span class=\"line\">            t0 = time.time()</span><br><span class=\"line\">            _result = func(*_args)</span><br><span class=\"line\">            elapsed = time.time() - t0</span><br><span class=\"line\">            name = func.__name__</span><br><span class=\"line\">            args = <span class=\"string\">', '</span>.join(repr(arg) <span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> _args)</span><br><span class=\"line\">            result = repr(_result)</span><br><span class=\"line\">            print(fmt.format(**locals()))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _result</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clocked</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorate </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"><span class=\"meta\">    @clock()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snooze</span><span class=\"params\">(seconds)</span>:</span></span><br><span class=\"line\">        time.sleep(seconds)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>):</span><br><span class=\"line\">            snooze(<span class=\"number\">.123</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>这章开始已经进入元编程领域了。<br>参数化装饰器基本上都涉及至少两层嵌套函数，如果想使用 @functools.wraps 生成装饰器，为高级技术提供更好的支持，嵌套层级可能还会更深，比如前面简要介绍过的叠放装饰器。<br>若想真正理解装饰器，需要区分导入时和运行时，还要知道变量作用域、闭包和新增的nonlocal 声明。掌握闭包和 nonlocal 不仅对构建装饰器有帮助，还能协助你在构建GUI 程序时面向事件编程，或者使用回调处理异步 I/O。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Fluent-Python\"><a href=\"#Fluent-Python\" class=\"headerlink\" title=\"Fluent Python\"></a>Fluent Python</h2><h3 id=\"Chapter-7-Function-Decorators-and-Closures\"><a href=\"#Chapter-7-Function-Decorators-and-Closures\" class=\"headerlink\" title=\"Chapter 7. Function Decorators and Closures\"></a>Chapter 7. Function Decorators and Closures</h3><h3 id=\"第七章-函数装饰器和函数闭包\"><a href=\"#第七章-函数装饰器和函数闭包\" class=\"headerlink\" title=\"第七章: 函数装饰器和函数闭包\"></a>第七章: 函数装饰器和函数闭包</h3><p>函数装饰器使用特殊的\b标记增强函数，要想掌握装饰器，首先要理解函数闭包。<br>nonlocal 是在Python3 中引入的保留关键字，如果要使用函数闭包和装饰器，也必须要了解nonlocal。<br>另外，闭包同时也是函数式编程和回调式异步编程的基础。<br>这一张要讨论的话题:<br>基础知识：    </p>\n<ul>\n<li>python 计算装饰器句法</li>\n<li>python 如何判断变量是否是局部的</li>\n<li>闭包存在的原因和工作原理</li>\n<li>nonlocal 可以解决的问题</li>\n</ul>\n<p>进一步探讨装饰器:</p>\n<ul>\n<li>实现行为良好的装饰器</li>\n<li>标准库中有用的装饰器</li>\n<li>实现参数化装饰器</li>\n</ul>\n<h4 id=\"装饰器基础知识\"><a href=\"#装饰器基础知识\" class=\"headerlink\" title=\"装饰器基础知识\"></a>装饰器基础知识</h4><p>装饰器是一个可调用的对象，它的参数是另一个函数（被装饰的函数），装饰器可能会将输入的函数进行处理返回结果，或者将其替换成另一个函数或者可调用对象。<br>下面是一个例子, 假设有一个名为decorate的装饰器:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@decorate</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">target</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running target()'</span>) </span><br><span class=\"line\"><span class=\"comment\"># 等价于下面的写法</span></span><br><span class=\"line\">target = decorate(target())</span><br></pre></td></tr></table></figure>\n<p>上述两段代码得到的target函数都是经过decrate处理过的, 下面的控制台会话证明了这点:   </p>\n<pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deco</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        print(<span class=\"string\">'running inner()'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> inner</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>@deco</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">target</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(<span class=\"string\">'running target()'</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>target()</span><br><span class=\"line\">running inner()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>target</span><br><span class=\"line\">&lt;function deco.&lt;locals&gt;.inner at <span class=\"number\">0x10063b598</span>&gt;</span><br></pre></td></tr></table></figure>\n</code></pre><p>可以看到target 已经被替换成了inner,严格来说target现在是inner的引用。       </p>\n<h4 id=\"Python何时执行装饰器\"><a href=\"#Python何时执行装饰器\" class=\"headerlink\" title=\"Python何时执行装饰器\"></a>Python何时执行装饰器</h4><p>装饰器的一大特性是，能把被装饰的函数替换成其他函数，第二个特性是装饰器加载模块时会立即执行。<br>第二个特性看可以看看下面这个例子:    </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry = []</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running register(%s)'</span> % func)</span><br><span class=\"line\">    registry.append(func)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> func</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@register</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f1()'</span>)</span><br><span class=\"line\"><span class=\"meta\">@register</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f2()'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f3</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f3()'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running main()'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'registry -&gt;'</span>, registry)</span><br><span class=\"line\">    f1()</span><br><span class=\"line\">    f2()</span><br><span class=\"line\">    f3()</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>控制台输出如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">running register(&lt;function f1 at <span class=\"number\">0x10320eb70</span>&gt;)</span><br><span class=\"line\">running register(&lt;function f2 at <span class=\"number\">0x10320eae8</span>&gt;)</span><br><span class=\"line\">running main()</span><br><span class=\"line\">registry -&gt; [&lt;function f1 at 0x10320eb70&gt;, &lt;function f2 at 0x10320eae8&gt;]</span><br><span class=\"line\">running f1()</span><br><span class=\"line\">running f2()</span><br><span class=\"line\">running f3()</span><br></pre></td></tr></table></figure>\n<p>如果是导入:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> registeration</span><br><span class=\"line\">running register(&lt;function f1 at <span class=\"number\">0x1100480d0</span>&gt;)</span><br><span class=\"line\">running register(&lt;function f2 at <span class=\"number\">0x110048158</span>&gt;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>registeration.registry</span><br><span class=\"line\">[&lt;function f1 at <span class=\"number\">0x1100480d0</span>&gt;, &lt;function f2 at <span class=\"number\">0x110048158</span>&gt;]</span><br></pre></td></tr></table></figure></p>\n<p>上面的例子可以看出：函数装饰器在导入模块时立即执行，而被装饰的函数只在明确调用时运行。这突出了 Python 的<strong>导入时</strong>和<strong>运行时</strong>之间的区别。    </p>\n<p>这里提到装饰器的通常用法和registeration.py中的不同:   </p>\n<ul>\n<li>例子中的装饰器函数与被装饰的函数在同一个模块中定义。实际情况是，装饰器通常在一个模块中定义，然后应用到其他模块中的函数上。</li>\n<li>例子中的 register </li>\n</ul>\n<h4 id=\"使用装饰器改进策略模式\"><a href=\"#使用装饰器改进策略模式\" class=\"headerlink\" title=\"使用装饰器改进策略模式\"></a>使用装饰器改进策略模式</h4><p>在使用一等对象的特性实现策略模式时，曾经说过，当时的实现有一些问题，就是如何方便的遍历所有的策略以获取最佳的折扣，现在我们可以使用装饰器很好的解决这个问题。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promos = []</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">promotion</span><span class=\"params\">(promo_func)</span>:</span></span><br><span class=\"line\">    promos.append(promo_func)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promo_func</span><br><span class=\"line\"><span class=\"meta\">@promotion</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fidelity</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"为积分为1000或以上的顾客提供5%折扣\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.05</span> <span class=\"keyword\">if</span> order.customer.fidelity &gt;= <span class=\"number\">1000</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">@promotion</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bulk_item</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"单个商品为20个或以上时提供10%折扣\"\"\"</span></span><br><span class=\"line\">    discount = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> item.quantity &gt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">            discount += item.total() * <span class=\"number\">.1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> discount</span><br><span class=\"line\"><span class=\"meta\">@promotion</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">large_order</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"订单中的不同商品达到10个或以上时提供7%折扣\"\"\"</span></span><br><span class=\"line\">    distinct_items = &#123;item.product <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> order.cart&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(distinct_items) &gt;= <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> order.total() * <span class=\"number\">.07</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">best_promo</span><span class=\"params\">(order)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"选择可用的最佳折扣\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(promo(order) <span class=\"keyword\">for</span> promo <span class=\"keyword\">in</span> promos)</span><br></pre></td></tr></table></figure>\n<p>这样做的好处有:</p>\n<ul>\n<li>策略函数无须使用特殊的名称作区分</li>\n<li>@promotion 装饰器既可以增加策略，也可以方便禁用策略（注释掉装饰器即可）</li>\n<li>策略函数可以在任何地方定义，只需要使用@promotion装饰器</li>\n</ul>\n<p>多数装饰器会修改被装饰的函数。通常，它们会定义一个内部函数，然后将其返回，替换被装饰的函数。使用内部函数的代码几乎都要靠闭包才能正确运作。为了理解闭包，我们要先了解 Python 中的变量作用域。   </p>\n<h4 id=\"Python中变量的作用域\"><a href=\"#Python中变量的作用域\" class=\"headerlink\" title=\"Python中变量的作用域\"></a>Python中变量的作用域</h4><p>下面的一系列控制台交互可以让我们更加了解Python的变量作用域：     </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">(a)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(a)</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(b)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">3</span>, <span class=\"keyword\">in</span> f1</span><br><span class=\"line\">NameError: name <span class=\"string\">'b'</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br></pre></td></tr></table></figure>\n<p>这个例子中由于没有定义全局变量b导致报错</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n<p>这里定义了全局变量b,正常运行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">(a)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(a)</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(b)</span><br><span class=\"line\"><span class=\"meta\">... </span>    b = <span class=\"number\">6</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f2(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">3</span>, <span class=\"keyword\">in</span> f2</span><br><span class=\"line\">UnboundLocalError: local variable <span class=\"string\">'b'</span> referenced before assignment</span><br></pre></td></tr></table></figure>\n<p>这里由于函数f2的定义体中给b赋值了，导致f2判断b是局部变量。</p>\n<p>这里我们可以看到Python对变量的一个设计: Python 不要求声明变量，但是假定在函数定义体中赋值的变量是局部变量。这样的好处是可以防止在不知情的情况下使用全局变量。<br>如果也要在函数定义体中对全局变量赋值，只需要用global声明：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f3</span><span class=\"params\">(a)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">global</span> b</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(a)</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(b)</span><br><span class=\"line\"><span class=\"meta\">... </span>    b = <span class=\"number\">6</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f3(b)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>为了深入理解一下f1/f2这两个函数的变量加载方式，可以使用dis模块反汇编，查看字节码：  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dis(f1)</span><br><span class=\"line\">  <span class=\"number\">2</span>           <span class=\"number\">0</span> LOAD_GLOBAL              <span class=\"number\">0</span> (<span class=\"keyword\">print</span>)</span><br><span class=\"line\">              <span class=\"number\">2</span> LOAD_FAST                <span class=\"number\">0</span> (a)</span><br><span class=\"line\">              <span class=\"number\">4</span> CALL_FUNCTION            <span class=\"number\">1</span></span><br><span class=\"line\">              <span class=\"number\">6</span> POP_TOP</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">3</span>           <span class=\"number\">8</span> LOAD_GLOBAL              <span class=\"number\">0</span> (<span class=\"keyword\">print</span>)</span><br><span class=\"line\">             <span class=\"number\">10</span> LOAD_GLOBAL              <span class=\"number\">1</span> (b)  <span class=\"comment\">#全局变量</span></span><br><span class=\"line\">             <span class=\"number\">12</span> CALL_FUNCTION            <span class=\"number\">1</span></span><br><span class=\"line\">             <span class=\"number\">14</span> POP_TOP</span><br><span class=\"line\">             <span class=\"number\">16</span> LOAD_CONST               <span class=\"number\">0</span> (<span class=\"literal\">None</span>)</span><br><span class=\"line\">             <span class=\"number\">18</span> RETURN_VALUE</span><br><span class=\"line\"></span><br><span class=\"line\">SyntaxError: invalid syntax</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dis(f2)</span><br><span class=\"line\">  <span class=\"number\">2</span>           <span class=\"number\">0</span> LOAD_GLOBAL              <span class=\"number\">0</span> (<span class=\"keyword\">print</span>)</span><br><span class=\"line\">              <span class=\"number\">2</span> LOAD_FAST                <span class=\"number\">0</span> (a)</span><br><span class=\"line\">              <span class=\"number\">4</span> CALL_FUNCTION            <span class=\"number\">1</span></span><br><span class=\"line\">              <span class=\"number\">6</span> POP_TOP</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">3</span>           <span class=\"number\">8</span> LOAD_GLOBAL              <span class=\"number\">0</span> (<span class=\"keyword\">print</span>)</span><br><span class=\"line\">             <span class=\"number\">10</span> LOAD_FAST                <span class=\"number\">1</span> (b)  <span class=\"comment\">#局部变量</span></span><br><span class=\"line\">             <span class=\"number\">12</span> CALL_FUNCTION            <span class=\"number\">1</span></span><br><span class=\"line\">             <span class=\"number\">14</span> POP_TOP</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">4</span>          <span class=\"number\">16</span> LOAD_CONST               <span class=\"number\">1</span> (<span class=\"number\">6</span>)</span><br><span class=\"line\">             <span class=\"number\">18</span> STORE_FAST               <span class=\"number\">1</span> (b)</span><br><span class=\"line\">             <span class=\"number\">20</span> LOAD_CONST               <span class=\"number\">0</span> (<span class=\"literal\">None</span>)</span><br><span class=\"line\">             <span class=\"number\">22</span> RETURN_VALUE</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-5-闭包\"><a href=\"#7-5-闭包\" class=\"headerlink\" title=\"7.5  闭包\"></a>7.5  闭包</h4><p>闭包指延伸了作用域的函数，其中包含函数定义体中引用、但是不在定义体中定义的非全局变量。函数是不是匿名的没有关系，关键是它能访问定义体之外定义的非全局变量。<br>这个概念非常抽象，我们通过一个例子更好地理解它:</p>\n<blockquote>\n<p>假如有个名为 avg 的函数，它的作用是计算不断增加的系列值的均值；例如，整个历史中某个商品的平均收盘价。每天都会增加新价格，因此平均值要考虑至目前为止所有的价格。    </p>\n</blockquote>\n<p>首先看看这个函数的面对对象实现:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Averager</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.series = []</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, new_value)</span>:</span></span><br><span class=\"line\">        self.series.append(new_value)</span><br><span class=\"line\">        total = sum(self.series)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total/len(self.series)</span><br></pre></td></tr></table></figure>\n<p>其中Averager()是一个可调用对象，创建Averager的实例就可以达成上面所说的要求。</p>\n<blockquote>\n<p>>>> avg = Averager()<br>>>> avg(10)<br>10.0<br>>>> avg(11)<br>10.5<br>>>> avg(12)<br>11.0  </p>\n</blockquote>\n<p>接下来是函数式实现，使用高阶函数make_averager:    </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_averager</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    series = []</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">        series.append(new_value)</span><br><span class=\"line\">        total = sum(series)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total/len(series)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> averager</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>>>> avg = make_averager()<br>>>> avg(10)<br> 10.0<br>>>> avg(11)<br> 10.5<br>>>> avg(12)<br> 11.0    </p>\n</blockquote>\n<p>这两个示例的相同点: 都是通过更新历史值再进行平均值计算。问题在于数据的存储，面对对象实现是存储在实例属性self.series中的，而make_averager是存储在series中的。</p>\n<p>这里需要注意的地方是，在 avg = make_averager() 这句执行以后，make_averager函数已经返回了，这时series的本地作用域已经不存在了。</p>\n<p>而在averager中，series是自由变量（free variable）,指未在本地作用域中绑定的变量。<br><img src=\"https://github.com/aldslvda/blog-images/blob/master/fluent-python-7.1.png?raw=true\" alt=\"自由变量\"></p>\n<p>接下来审查averager对象，我们发现Python在__code__属性中保存局部变量和自由变量的\b名称。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> averager <span class=\"keyword\">import</span> make_averager</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg = make_averager()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__code__.co_varnames</span><br><span class=\"line\">(<span class=\"string\">'new_value'</span>, <span class=\"string\">'total'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__code__.co_freevars</span><br><span class=\"line\">(<span class=\"string\">'series'</span>,)</span><br></pre></td></tr></table></figure>\n<p>series 绑定在 avg.__closure__属性中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__closure__[<span class=\"number\">0</span>].cell_contents</span><br><span class=\"line\">[]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__closure__[<span class=\"number\">0</span>].cell_contents</span><br><span class=\"line\">[<span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">11</span>)</span><br><span class=\"line\"><span class=\"number\">10.5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__closure__[<span class=\"number\">0</span>].cell_contents</span><br><span class=\"line\">[<span class=\"number\">10</span>, <span class=\"number\">11</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">13</span>)</span><br><span class=\"line\"><span class=\"number\">11.333333333333334</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg.__closure__[<span class=\"number\">0</span>].cell_contents</span><br><span class=\"line\">[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>]</span><br></pre></td></tr></table></figure>\n<p>这样我们可以很形象的理解闭包的性质了，闭包是一种函数，它会保留定义函数时存在的自由变量的绑定，这样调用函数时，虽然定义作用域不可用了，但是仍能使用那些绑定。    </p>\n<p>只有嵌套在其他函数中的函数才可能需要处理不在全局作用域中的外部变量，这也是匿名函数容易和闭包混淆的一个原因。    </p>\n<h4 id=\"nonlocal声明\"><a href=\"#nonlocal声明\" class=\"headerlink\" title=\"nonlocal声明\"></a>nonlocal声明</h4><p>前面实现的make_averager函数的效率并不高，因为每次调用avg都要对所有历史值求和，实际上只需要当前值+历史值的和就可以了。<br>接下来我们尝试对代码进行一些优化:      </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_averager_v1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    total = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">        total += new_value</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total / count</span><br><span class=\"line\">    <span class=\"keyword\">return</span> averager</span><br></pre></td></tr></table></figure>\n<p>控制台输出如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> averager <span class=\"keyword\">import</span> make_averager_v1</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg = make_averager_v1()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>avg(<span class=\"number\">10</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  File <span class=\"string\">\"/Users/NickAl/study/github/readings/Fluent-Python/7. Function Decorators and Closures/averager.py\"</span>, line <span class=\"number\">13</span>, <span class=\"keyword\">in</span> averager</span><br><span class=\"line\">    count += <span class=\"number\">1</span></span><br><span class=\"line\">UnboundLocalError: local variable <span class=\"string\">'count'</span> referenced before assignment</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>\n<p>由于函数的定义体对count赋值了，由于count是int,赋值会隐式的创建一个新对象，导致函数判断count是局部变量而不是自由变量，不会保存在闭包中，会导致抛出异常。</p>\n<p>Python3 中的nonlocal声明会把变量标记为自由变量，使得变量可以保存在闭包中。<br>下面利用nonlocal对上面的代码进行修正：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_averager_v1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    total = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averager</span><span class=\"params\">(new_value)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">nonlocal</span> count, total</span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">        total += new_value</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total / count</span><br><span class=\"line\">    <span class=\"keyword\">return</span> averager</span><br></pre></td></tr></table></figure>\n<p>在没有nonlocal声明的Python2中，我们可以将变量作为值存储在可变对象中来解决这个问题。</p>\n<h4 id=\"实现一个简单的装饰器\"><a href=\"#实现一个简单的装饰器\" class=\"headerlink\" title=\"实现一个简单的装饰器\"></a>实现一个简单的装饰器</h4><p>下面是一个简单的装饰器，输出函数的运行时间, clocked是一个闭包，func是自由变量。   </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clock</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clocked</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\">        t0 = time.perf_counter()</span><br><span class=\"line\">        result = func(*args)</span><br><span class=\"line\">        elapsed = time.perf_counter() - t0</span><br><span class=\"line\">        name = func.__name__</span><br><span class=\"line\">        arg_str = <span class=\"string\">', '</span>.join(repr(arg) <span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> args)</span><br><span class=\"line\">        print(<span class=\"string\">'[%0.8fs] %s(%s) -&gt; %r'</span> % (elapsed, name, arg_str, result))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clocked</span><br></pre></td></tr></table></figure>\n<p>下面的Python代码展示了如何使用这个装饰器:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># clockdeco_demo.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> clockdeco <span class=\"keyword\">import</span> clock</span><br><span class=\"line\"><span class=\"meta\">@clock</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snooze</span><span class=\"params\">(seconds)</span>:</span></span><br><span class=\"line\">    time.sleep(seconds)</span><br><span class=\"line\"><span class=\"meta\">@clock</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">factorial</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> <span class=\"keyword\">if</span> n &lt; <span class=\"number\">2</span> <span class=\"keyword\">else</span> n*factorial(n<span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'*'</span> * <span class=\"number\">40</span>, <span class=\"string\">'Calling snooze(.123)'</span>)</span><br><span class=\"line\">    snooze(<span class=\"number\">.123</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'*'</span> * <span class=\"number\">40</span>, <span class=\"string\">'Calling factorial(6)'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'6! ='</span>, factorial(<span class=\"number\">6</span>))</span><br></pre></td></tr></table></figure>\n<p>输出如下:</p>\n<blockquote>\n<p>-&gt; % python3 clockdeco_demo.py<br><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong> Calling snooze(.123)<br>[0.12309374s] snooze(0.123) -&gt; None<br><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong> Calling factorial(6)<br>[0.00000162s] factorial(1) -&gt; 1<br>[0.00003553s] factorial(2) -&gt; 2<br>[0.00005951s] factorial(3) -&gt; 6<br>[0.00008194s] factorial(4) -&gt; 24<br>[0.00010441s] factorial(5) -&gt; 120<br>[0.00013048s] factorial(6) -&gt; 720<br>6! = 720    </p>\n</blockquote>\n<p>这个例子中，clocked参数做了如下操作:<br>(1) 记录初始时间 t0。<br>(2) 调用原来的 factorial 函数，保存结果。<br>(3) 计算经过的时间。<br>(4) 格式化收集的数据，然后打印出来。<br>(5) 返回第 2 步保存的结果。<br>这是装饰器的典型行为：把被装饰的函数替换成新函数，二者接受相同的参数，而且（通常）返回被装饰的函数本该返回的值，同时还会做些额外操作。</p>\n<p>上面的装饰器还存在一些问题:</p>\n<ul>\n<li>不支持关键字参数</li>\n<li>遮盖了被装饰的函数的__name__和__doc__属性</li>\n</ul>\n<p>下面的示例解决了这个问题：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#clockdeco2.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clock</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @functools.wraps(func)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clocked</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        t0 = time.time()</span><br><span class=\"line\">        result = func(*args, **kwargs)</span><br><span class=\"line\">        elapsed = time.time() - t0</span><br><span class=\"line\">        name = func.__name__</span><br><span class=\"line\">        arg_lst = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> args:</span><br><span class=\"line\">            arg_lst.append(<span class=\"string\">', '</span>.join(repr(arg) <span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> args))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> kwargs:</span><br><span class=\"line\">            pairs = [<span class=\"string\">'%s=%r'</span> % (k, w) <span class=\"keyword\">for</span> k, w <span class=\"keyword\">in</span> sorted(kwargs.items())]</span><br><span class=\"line\">            arg_lst.append(<span class=\"string\">', '</span>.join(pairs))</span><br><span class=\"line\">            arg_str = <span class=\"string\">', '</span>.join(arg_lst)</span><br><span class=\"line\">        print(<span class=\"string\">'[%0.8fs] %s(%s) -&gt; %r '</span> % (elapsed, name, arg_str, result))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clocked</span><br></pre></td></tr></table></figure>\n<p>functool.wrap是标准库中可以直接取用的装饰器。</p>\n<h4 id=\"标准库中的装饰器\"><a href=\"#标准库中的装饰器\" class=\"headerlink\" title=\"标准库中的装饰器\"></a>标准库中的装饰器</h4><p>这节会讲到functool中的两个值得关注的装饰器: lru_cache和single_dispatch</p>\n<h5 id=\"使用functools-lru-cache做备忘\"><a href=\"#使用functools-lru-cache做备忘\" class=\"headerlink\" title=\"使用functools.lru_cache做备忘\"></a>使用functools.lru_cache做备忘</h5><p>functools.lru_cache 是非常实用的装饰器，它实现了备忘（memoization）功能。这是一项优化技术，它把耗时的函数的结果保存起来，避免传入相同的参数时重复计算。LRU三个字母是“Least Recently Used”的缩写，表明缓存不会无限制增长，一段时间不用的缓存条目会被扔掉。<br>生成第 n 个斐波纳契数这种慢速递归函数适合使用 lru_cache，下面的代码是一个示例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> clockdeco <span class=\"keyword\">import</span> clock</span><br><span class=\"line\"><span class=\"meta\">@clock</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fibonacci(n<span class=\"number\">-2</span>) + fibonacci(n<span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    print(fibonacci(<span class=\"number\">6</span>))</span><br></pre></td></tr></table></figure>\n<p>输出如下：</p>\n<blockquote>\n<p>-&gt; % python3 fibo_demo.py<br>[0.00000075s] fibonacci(0) -&gt; 0<br>[0.00000106s] fibonacci(1) -&gt; 1<br>[0.00008829s] fibonacci(2) -&gt; 1<br>[0.00000052s] fibonacci(1) -&gt; 1<br>[0.00000056s] fibonacci(0) -&gt; 0<br>[0.00000068s] fibonacci(1) -&gt; 1<br>[0.00002681s] fibonacci(2) -&gt; 1<br>[0.00005140s] fibonacci(3) -&gt; 2<br>[0.00016751s] fibonacci(4) -&gt; 3<br>[0.00000051s] fibonacci(1) -&gt; 1<br>[0.00000046s] fibonacci(0) -&gt; 0<br>[0.00000054s] fibonacci(1) -&gt; 1<br>[0.00002430s] fibonacci(2) -&gt; 1<br>[0.00005003s] fibonacci(3) -&gt; 2<br>[0.00000054s] fibonacci(0) -&gt; 0<br>[0.00000057s] fibonacci(1) -&gt; 1<br>[0.00002484s] fibonacci(2) -&gt; 1<br>[0.00000044s] fibonacci(1) -&gt; 1<br>[0.00000081s] fibonacci(0) -&gt; 0<br>[0.00000073s] fibonacci(1) -&gt; 1<br>[0.00002765s] fibonacci(2) -&gt; 1<br>[0.00005353s] fibonacci(3) -&gt; 2<br>[0.00010212s] fibonacci(4) -&gt; 3<br>[0.00017658s] fibonacci(5) -&gt; 5<br>[0.00037021s] fibonacci(6) -&gt; 8<br> 8</p>\n</blockquote>\n<p>可以看到低阶的部分不断的被运算，非常浪费时间，下面是利用缓存优化后的代码:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"><span class=\"keyword\">from</span> clockdeco <span class=\"keyword\">import</span> clock</span><br><span class=\"line\"><span class=\"meta\">@functools.lru_cache()</span></span><br><span class=\"line\"><span class=\"meta\">@clock</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fibonacci(n<span class=\"number\">-2</span>) + fibonacci(n<span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    print(fibonacci(<span class=\"number\">6</span>))</span><br></pre></td></tr></table></figure>\n<p>控制台输出:</p>\n<blockquote>\n<p>-&gt; % python3 fibo_demo.py<br>[0.00000114s] fibonacci(0) -&gt; 0<br>[0.00000152s] fibonacci(1) -&gt; 1<br>[0.00014005s] fibonacci(2) -&gt; 1<br>[0.00000173s] fibonacci(3) -&gt; 2<br>[0.00018128s] fibonacci(4) -&gt; 3<br>[0.00000119s] fibonacci(5) -&gt; 5<br>[0.00022029s] fibonacci(6) -&gt; 8<br> 8  </p>\n</blockquote>\n<p>这里要注意的两点是:lru_cache必须向常规函数一样被调用，而是装饰器是可以叠加的。<br>上面的例子告诉我们lru_cache在优化递归缓存方面的巨大用途，其实它在Web应用中也能起到很大的用处</p>\n<blockquote>\n<p>functools.lru_cache(maxsize=128, typed=False)</p>\n</blockquote>\n<p>上面可以看出functools.lru_cache接收两个参数，maxsize和typed。</p>\n<ul>\n<li>maxsize指定存储结果的数量，缓存满了之后，旧的结果会被丢掉，一般为了性能考虑，这个值设为2的幂。</li>\n<li>typed是否区分不同类型的结果（如浮点数和整数）</li>\n<li>同时lru_cache要求被传入的函数的参数是可散列的。</li>\n</ul>\n<p>7.8.2 单分派泛函数</p>\n<p>Python中经常会困扰我们的问题是:没有switch语句，如何处理多条件的问题。用多个if/elif/else组合可以解决这个问题，但有时候这样做的代码过于冗杂难以阅读。      </p>\n<p>single_dispatch装饰器就是被用来处理这种问题的。使用 @singledispatch 装饰的普通函数会变成泛函数（generic function）：根据第一个参数的类型，以不同方式执行相同操作的一组函数。</p>\n<p>下面的例子展示了一个根据参数类型不同生成不同的Html的场景</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> singledispatch</span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> abc</span><br><span class=\"line\"><span class=\"keyword\">import</span> numbers</span><br><span class=\"line\"><span class=\"keyword\">import</span> html</span><br><span class=\"line\"><span class=\"meta\">@singledispatch</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">htmlize</span><span class=\"params\">(obj)</span>:</span></span><br><span class=\"line\">    content = html.escape(repr(obj))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;pre&gt;&#123;&#125;&lt;/pre&gt;'</span>.format(content)</span><br><span class=\"line\"><span class=\"meta\">@htmlize.register(str)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_</span><span class=\"params\">(text)</span>:</span></span><br><span class=\"line\">    content = html.escape(text).replace(<span class=\"string\">'\\n'</span>, <span class=\"string\">'&lt;br&gt;\\n'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;p&gt;&#123;0&#125;&lt;/p&gt;'</span>.format(content)</span><br><span class=\"line\"><span class=\"meta\">@htmlize.register(numbers.Integral)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;pre&gt;&#123;0&#125; (0x&#123;0:x&#125;)&lt;/pre&gt;'</span>.format(n)</span><br><span class=\"line\"><span class=\"meta\">@htmlize.register(tuple)</span></span><br><span class=\"line\"><span class=\"meta\">@htmlize.register(abc.MutableSequence)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_</span><span class=\"params\">(seq)</span>:</span></span><br><span class=\"line\">    inner = <span class=\"string\">'&lt;/li&gt;\\n&lt;li&gt;'</span>.join(htmlize(item) <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> seq)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;ul&gt;\\n&lt;li&gt;'</span> + inner + <span class=\"string\">'&lt;/li&gt;\\n&lt;/ul&gt;'</span></span><br></pre></td></tr></table></figure>\n<p>注册的专门函数应该尽可能处理抽象基类（如 numbers.Integral 和abc.MutableSequence），不要处理具体实现（如 int 和 list）。这样，代码支持的兼容类型更广泛。例如，Python 扩展可以子类化 numbers.Integral，使用固定的位数实现 int 类型。   </p>\n<p>single dispatch 类似重载，但绝不是为了把 Java 的那种方法重载带入 Python。   </p>\n<h4 id=\"7-9-参数化装饰器\"><a href=\"#7-9-参数化装饰器\" class=\"headerlink\" title=\"7.9 参数化装饰器\"></a>7.9 参数化装饰器</h4><p>Python 把被装饰的函数作为第一个参数传给装饰器函数。那怎么让装饰器接受其他参数呢？答案是：创建一个装饰器工厂函数，把参数传给它，返回一个装饰器，然后再把它应用到要装饰的函数上。</p>\n<p>下面依次讲解上文中出现过的装饰器的参数化:</p>\n<h5 id=\"参数化的registeration\"><a href=\"#参数化的registeration\" class=\"headerlink\" title=\"参数化的registeration\"></a>参数化的registeration</h5><p>为了便于启用或禁用 register 执行的函数注册功能，我们为它提供一个可选的 active参数，设为 False 时，不注册被装饰的函数。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry = set()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register</span><span class=\"params\">(active=True)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorate</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'running register(active=%s)-&gt;decorate(%s)'</span>% (active, func))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> active:</span><br><span class=\"line\">            registry.add(func)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            registry.discard(func)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorate</span><br><span class=\"line\"><span class=\"meta\">@register(active=False)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f1()'</span>)</span><br><span class=\"line\"><span class=\"meta\">@register()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f2()'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f3</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'running f3()'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>这里的关键是，register() 要返回 decorate，然后把它应用到被装饰的函数上。<br>这只是一个最简单的例子，参数化装饰器通常会把被装饰的函数替换掉，而且结构上需要多一层嵌套。接下来会探讨这种函数金字塔。  </p>\n<h5 id=\"参数化clock装饰器\"><a href=\"#参数化clock装饰器\" class=\"headerlink\" title=\"参数化clock装饰器\"></a>参数化clock装饰器</h5><p>我们需要对clock装饰器添加一个功能：让用户传入一个格式字符串，控制被装饰函数的输出。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">DEFAULT_FMT = <span class=\"string\">'[&#123;elapsed:0.8f&#125;s] &#123;name&#125;(&#123;args&#125;) -&gt; &#123;result&#125;'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clock</span><span class=\"params\">(fmt=DEFAULT_FMT)</span>:</span> <span class=\"comment\">#参数化的装饰器工厂函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorate</span><span class=\"params\">(func)</span>:</span>     <span class=\"comment\">#真正的装饰器</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clocked</span><span class=\"params\">(*_args)</span>:</span><span class=\"comment\">#包装函数的函数</span></span><br><span class=\"line\">            t0 = time.time()</span><br><span class=\"line\">            _result = func(*_args)</span><br><span class=\"line\">            elapsed = time.time() - t0</span><br><span class=\"line\">            name = func.__name__</span><br><span class=\"line\">            args = <span class=\"string\">', '</span>.join(repr(arg) <span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> _args)</span><br><span class=\"line\">            result = repr(_result)</span><br><span class=\"line\">            print(fmt.format(**locals()))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _result</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clocked</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorate </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"><span class=\"meta\">    @clock()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snooze</span><span class=\"params\">(seconds)</span>:</span></span><br><span class=\"line\">        time.sleep(seconds)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>):</span><br><span class=\"line\">            snooze(<span class=\"number\">.123</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>这章开始已经进入元编程领域了。<br>参数化装饰器基本上都涉及至少两层嵌套函数，如果想使用 @functools.wraps 生成装饰器，为高级技术提供更好的支持，嵌套层级可能还会更深，比如前面简要介绍过的叠放装饰器。<br>若想真正理解装饰器，需要区分导入时和运行时，还要知道变量作用域、闭包和新增的nonlocal 声明。掌握闭包和 nonlocal 不仅对构建装饰器有帮助，还能协助你在构建GUI 程序时面向事件编程，或者使用回调处理异步 I/O。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjuw5c69o0007dhyfajnhyloi","category_id":"cjuw5c69j0004dhyffn4n0os5","_id":"cjuw5c69x000ddhyfcvj6qud6"},{"post_id":"cjuw5c69a0000dhyff6vcxx3k","category_id":"cjuw5c69j0004dhyffn4n0os5","_id":"cjuw5c6a0000hdhyf6yjuwocj"},{"post_id":"cjuw5c69f0002dhyf9ndyp0fg","category_id":"cjuw5c69j0004dhyffn4n0os5","_id":"cjuw5c6a2000kdhyffsshjmfl"},{"post_id":"cjuw5c69m0006dhyfbtizqfbj","category_id":"cjuw5c69j0004dhyffn4n0os5","_id":"cjuw5c6a5000pdhyfoofmt23e"},{"post_id":"cjuw5c69p0008dhyft2llnkrx","category_id":"cjuw5c6a2000jdhyfx9f7pypw","_id":"cjuw5c6a9000xdhyfbxrak9ql"},{"post_id":"cjuw5c69s000bdhyf5yttrd5a","category_id":"cjuw5c6a2000jdhyfx9f7pypw","_id":"cjuw5c6aa0011dhyf09du1avy"},{"post_id":"cjuw5c6a8000vdhyf73dmqsyc","category_id":"cjuw5c6a2000jdhyfx9f7pypw","_id":"cjuw5c6ab0014dhyfgrtx5wg2"},{"post_id":"cjuw5c69v000cdhyf1ky72dql","category_id":"cjuw5c6a2000jdhyfx9f7pypw","_id":"cjuw5c6ab0016dhyffpvj82cu"},{"post_id":"cjuw5c69z000gdhyfrfktj815","category_id":"cjuw5c6a2000jdhyfx9f7pypw","_id":"cjuw5c6ac001adhyfx8p84u13"},{"post_id":"cjuw5c6a1000idhyfqe8tfl72","category_id":"cjuw5c6a2000jdhyfx9f7pypw","_id":"cjuw5c6ac001edhyf9o99fzdd"},{"post_id":"cjuw5c6a3000mdhyfn49h0msc","category_id":"cjuw5c6ac0019dhyf5umhejhp","_id":"cjuw5c6ad001idhyf3znyxsol"},{"post_id":"cjuw5c6a4000odhyf2i26figm","category_id":"cjuw5c6ac001fdhyf2efuz51f","_id":"cjuw5c6ae001ldhyfbgmmizsf"},{"post_id":"cjuw5c6a6000tdhyfwa2wevr2","category_id":"cjuw5c6ac001fdhyf2efuz51f","_id":"cjuw5c6ae001ndhyfye7hgqur"},{"post_id":"cjuw5c6g30035dhyfcxlkg0em","category_id":"cjuw5c6ac001fdhyf2efuz51f","_id":"cjuw5c6gb003bdhyfnlysp0a9"},{"post_id":"cjuw5c6g50037dhyfcom9vc6w","category_id":"cjuw5c6a2000jdhyfx9f7pypw","_id":"cjuw5c6gc003ddhyfsecuy8hz"},{"post_id":"cjuw5c6g90039dhyfcraxn4wk","category_id":"cjuw5c6a2000jdhyfx9f7pypw","_id":"cjuw5c6ge003gdhyfhn3977cp"},{"post_id":"cjuw5c6ga003adhyfr6fuwcnh","category_id":"cjuw5c6a2000jdhyfx9f7pypw","_id":"cjuw5c6gh003idhyf9kn3qp87"},{"post_id":"cjuw5c6gb003cdhyfze1raqis","category_id":"cjuw5c6a2000jdhyfx9f7pypw","_id":"cjuw5c6gk003ldhyfnwly3o52"},{"post_id":"cjuw5c6gd003fdhyffmae0td5","category_id":"cjuw5c6a2000jdhyfx9f7pypw","_id":"cjuw5c6gm003odhyfqz91e0y5"},{"post_id":"cjuw5c6gf003hdhyfm7x4jv32","category_id":"cjuw5c6a2000jdhyfx9f7pypw","_id":"cjuw5c6go003sdhyfo3tbtsxf"},{"post_id":"cjuw5c6gj003kdhyfu5efkt5f","category_id":"cjuw5c6a2000jdhyfx9f7pypw","_id":"cjuw5c6gq003vdhyfkzis8hcp"},{"post_id":"cjuw5c6gl003ndhyfw73o6nfv","category_id":"cjuw5c6a2000jdhyfx9f7pypw","_id":"cjuw5c6gs003ydhyfijwhjm6i"},{"post_id":"cjuw5c6gn003rdhyffderc9bm","category_id":"cjuw5c6a2000jdhyfx9f7pypw","_id":"cjuw5c6gt003zdhyfg6upm1g9"},{"post_id":"cjuw5c6gp003udhyfxgaccm26","category_id":"cjuw5c6ac001fdhyf2efuz51f","_id":"cjuw5c6gu0041dhyfvjhrtw80"},{"post_id":"cjuw5c6gr003xdhyf5qoa8r4s","category_id":"cjuw5c6gt0040dhyfabvqbn80","_id":"cjuw5c6gv0048dhyf6907t2hm"},{"post_id":"cjuw5c6id005zdhyfjdlvh2jw","category_id":"cjuw5c6a2000jdhyfx9f7pypw","_id":"cjuw5c6if0061dhyflee1kumt"}],"PostTag":[{"post_id":"cjuw5c69a0000dhyff6vcxx3k","tag_id":"cjuw5c69l0005dhyf8dw7rvdj","_id":"cjuw5c6a4000ndhyfnhimbvcf"},{"post_id":"cjuw5c69a0000dhyff6vcxx3k","tag_id":"cjuw5c69q000adhyfn6h2va4e","_id":"cjuw5c6a5000rdhyfvgq3bsrl"},{"post_id":"cjuw5c69a0000dhyff6vcxx3k","tag_id":"cjuw5c69y000fdhyf51off8i1","_id":"cjuw5c6a7000udhyfoy2pw9tt"},{"post_id":"cjuw5c69f0002dhyf9ndyp0fg","tag_id":"cjuw5c69l0005dhyf8dw7rvdj","_id":"cjuw5c6aa000zdhyfnazs5xld"},{"post_id":"cjuw5c69f0002dhyf9ndyp0fg","tag_id":"cjuw5c6a6000sdhyfsiy6t585","_id":"cjuw5c6aa0012dhyf61us372r"},{"post_id":"cjuw5c69m0006dhyfbtizqfbj","tag_id":"cjuw5c69l0005dhyf8dw7rvdj","_id":"cjuw5c6ac0018dhyfyc80m624"},{"post_id":"cjuw5c69m0006dhyfbtizqfbj","tag_id":"cjuw5c6aa0013dhyfs35glmce","_id":"cjuw5c6ac001bdhyfrjku9cqj"},{"post_id":"cjuw5c69o0007dhyfajnhyloi","tag_id":"cjuw5c69l0005dhyf8dw7rvdj","_id":"cjuw5c6ac001ddhyfmrsl23j4"},{"post_id":"cjuw5c69o0007dhyfajnhyloi","tag_id":"cjuw5c6ab0017dhyfzfwol5c6","_id":"cjuw5c6ad001gdhyfjrr0in79"},{"post_id":"cjuw5c69p0008dhyft2llnkrx","tag_id":"cjuw5c69l0005dhyf8dw7rvdj","_id":"cjuw5c6af001rdhyf1hxa6e8f"},{"post_id":"cjuw5c69p0008dhyft2llnkrx","tag_id":"cjuw5c6ac001cdhyfskbo7mex","_id":"cjuw5c6af001sdhyfmj8orp7c"},{"post_id":"cjuw5c69p0008dhyft2llnkrx","tag_id":"cjuw5c6ad001hdhyfz80rvtk3","_id":"cjuw5c6af001udhyfxjk15ufk"},{"post_id":"cjuw5c69p0008dhyft2llnkrx","tag_id":"cjuw5c6ad001kdhyfkgux4rpr","_id":"cjuw5c6af001vdhyfv7zp8v21"},{"post_id":"cjuw5c69p0008dhyft2llnkrx","tag_id":"cjuw5c6ae001mdhyfelkdccbl","_id":"cjuw5c6ag001xdhyfabcqkg93"},{"post_id":"cjuw5c69p0008dhyft2llnkrx","tag_id":"cjuw5c6ae001odhyfv0er1uuc","_id":"cjuw5c6ag001ydhyfyjra5dut"},{"post_id":"cjuw5c69p0008dhyft2llnkrx","tag_id":"cjuw5c6ae001pdhyfcqi7mrba","_id":"cjuw5c6ag0020dhyfoif99wtw"},{"post_id":"cjuw5c69s000bdhyf5yttrd5a","tag_id":"cjuw5c6ae001qdhyfx77vztp9","_id":"cjuw5c6ag0021dhyfmm57ll3s"},{"post_id":"cjuw5c69s000bdhyf5yttrd5a","tag_id":"cjuw5c6ae001odhyfv0er1uuc","_id":"cjuw5c6ah0023dhyfubo880g3"},{"post_id":"cjuw5c69v000cdhyf1ky72dql","tag_id":"cjuw5c69l0005dhyf8dw7rvdj","_id":"cjuw5c6ah0024dhyfmb6ryxfb"},{"post_id":"cjuw5c69v000cdhyf1ky72dql","tag_id":"cjuw5c6af001wdhyft0k1yien","_id":"cjuw5c6ah0026dhyfhxzr2nra"},{"post_id":"cjuw5c69v000cdhyf1ky72dql","tag_id":"cjuw5c6ae001odhyfv0er1uuc","_id":"cjuw5c6ah0027dhyfyayp94rg"},{"post_id":"cjuw5c69z000gdhyfrfktj815","tag_id":"cjuw5c69l0005dhyf8dw7rvdj","_id":"cjuw5c6ai002bdhyfqqyvh961"},{"post_id":"cjuw5c69z000gdhyfrfktj815","tag_id":"cjuw5c6ah0022dhyficst1dpi","_id":"cjuw5c6ai002cdhyf0e8wniu6"},{"post_id":"cjuw5c69z000gdhyfrfktj815","tag_id":"cjuw5c6ah0025dhyfc5b5viow","_id":"cjuw5c6aj002edhyfposxp8gu"},{"post_id":"cjuw5c69z000gdhyfrfktj815","tag_id":"cjuw5c6ah0028dhyf12tzbhsq","_id":"cjuw5c6aj002fdhyfjgsby5yt"},{"post_id":"cjuw5c69z000gdhyfrfktj815","tag_id":"cjuw5c6ae001odhyfv0er1uuc","_id":"cjuw5c6ak002hdhyf80phx0un"},{"post_id":"cjuw5c6a1000idhyfqe8tfl72","tag_id":"cjuw5c69l0005dhyf8dw7rvdj","_id":"cjuw5c6ak002idhyf9i18uw5p"},{"post_id":"cjuw5c6a1000idhyfqe8tfl72","tag_id":"cjuw5c6ai002adhyfab3mt2yu","_id":"cjuw5c6ak002kdhyftax4giza"},{"post_id":"cjuw5c6a1000idhyfqe8tfl72","tag_id":"cjuw5c6ae001odhyfv0er1uuc","_id":"cjuw5c6ak002ldhyfftcnu0wc"},{"post_id":"cjuw5c6a3000mdhyfn49h0msc","tag_id":"cjuw5c6aj002gdhyfwkckmqml","_id":"cjuw5c6al002ndhyfein5972n"},{"post_id":"cjuw5c6a4000odhyf2i26figm","tag_id":"cjuw5c6ak002jdhyf860yf09x","_id":"cjuw5c6al002qdhyf8z96h7vw"},{"post_id":"cjuw5c6a4000odhyf2i26figm","tag_id":"cjuw5c6ak002mdhyfz1pzac1y","_id":"cjuw5c6al002rdhyf01v79qkl"},{"post_id":"cjuw5c6a4000odhyf2i26figm","tag_id":"cjuw5c6al002odhyfaix4vsgf","_id":"cjuw5c6am002tdhyftdo3dp05"},{"post_id":"cjuw5c6a6000tdhyfwa2wevr2","tag_id":"cjuw5c6al002pdhyfl7xl6u24","_id":"cjuw5c6am002wdhyffbr8aert"},{"post_id":"cjuw5c6a6000tdhyfwa2wevr2","tag_id":"cjuw5c6al002sdhyf5bc4cr1b","_id":"cjuw5c6am002xdhyfy9nf0ybs"},{"post_id":"cjuw5c6a6000tdhyfwa2wevr2","tag_id":"cjuw5c6am002udhyfa4qa78q4","_id":"cjuw5c6an002zdhyf509btg3z"},{"post_id":"cjuw5c6a8000vdhyf73dmqsyc","tag_id":"cjuw5c69l0005dhyf8dw7rvdj","_id":"cjuw5c6ao0031dhyfndzu7qpm"},{"post_id":"cjuw5c6a8000vdhyf73dmqsyc","tag_id":"cjuw5c6am002vdhyfz8zwblx1","_id":"cjuw5c6ao0032dhyf9yi9setg"},{"post_id":"cjuw5c6a8000vdhyf73dmqsyc","tag_id":"cjuw5c6an002ydhyfxaj5ism0","_id":"cjuw5c6ao0033dhyf34zi08c9"},{"post_id":"cjuw5c6a8000vdhyf73dmqsyc","tag_id":"cjuw5c6ae001odhyfv0er1uuc","_id":"cjuw5c6ao0034dhyfc8li1ghj"},{"post_id":"cjuw5c6g30035dhyfcxlkg0em","tag_id":"cjuw5c69l0005dhyf8dw7rvdj","_id":"cjuw5c6gk003mdhyfe31q35f8"},{"post_id":"cjuw5c6g30035dhyfcxlkg0em","tag_id":"cjuw5c6g80038dhyfsv6bppbp","_id":"cjuw5c6gm003pdhyf9dj4u7aq"},{"post_id":"cjuw5c6g30035dhyfcxlkg0em","tag_id":"cjuw5c6gc003edhyf0zg2cjkm","_id":"cjuw5c6go003tdhyfvkohep3t"},{"post_id":"cjuw5c6g50037dhyfcom9vc6w","tag_id":"cjuw5c69l0005dhyf8dw7rvdj","_id":"cjuw5c6gu0043dhyfbswp4ds1"},{"post_id":"cjuw5c6g50037dhyfcom9vc6w","tag_id":"cjuw5c6gi003jdhyfg7gv0ivv","_id":"cjuw5c6gv0044dhyflr23fifo"},{"post_id":"cjuw5c6g50037dhyfcom9vc6w","tag_id":"cjuw5c6gn003qdhyf97agrc12","_id":"cjuw5c6gv0046dhyfzqvl6r5o"},{"post_id":"cjuw5c6g50037dhyfcom9vc6w","tag_id":"cjuw5c6gr003wdhyf3z9l27ut","_id":"cjuw5c6gv0047dhyfyky707jg"},{"post_id":"cjuw5c6g90039dhyfcraxn4wk","tag_id":"cjuw5c69l0005dhyf8dw7rvdj","_id":"cjuw5c6gx004cdhyfrklcgvjo"},{"post_id":"cjuw5c6g90039dhyfcraxn4wk","tag_id":"cjuw5c6gu0042dhyfphn0ds37","_id":"cjuw5c6gy004ddhyfcxg3i2gv"},{"post_id":"cjuw5c6g90039dhyfcraxn4wk","tag_id":"cjuw5c6gv0045dhyf9jma3qmw","_id":"cjuw5c6gy004fdhyf243fajoh"},{"post_id":"cjuw5c6g90039dhyfcraxn4wk","tag_id":"cjuw5c6ac001cdhyfskbo7mex","_id":"cjuw5c6gy004gdhyffki4464r"},{"post_id":"cjuw5c6g90039dhyfcraxn4wk","tag_id":"cjuw5c6gw0049dhyf31lge8dm","_id":"cjuw5c6gz004idhyfipn05s8z"},{"post_id":"cjuw5c6g90039dhyfcraxn4wk","tag_id":"cjuw5c6gw004adhyfkjc1afeq","_id":"cjuw5c6h0004jdhyf4br22850"},{"post_id":"cjuw5c6g90039dhyfcraxn4wk","tag_id":"cjuw5c6ae001odhyfv0er1uuc","_id":"cjuw5c6h0004ldhyf6iblj45i"},{"post_id":"cjuw5c6ga003adhyfr6fuwcnh","tag_id":"cjuw5c69l0005dhyf8dw7rvdj","_id":"cjuw5c6h0004mdhyf5kgx0d9q"},{"post_id":"cjuw5c6ga003adhyfr6fuwcnh","tag_id":"cjuw5c6gw004bdhyfmrm1vca0","_id":"cjuw5c6h1004ndhyf5j80nahy"},{"post_id":"cjuw5c6ga003adhyfr6fuwcnh","tag_id":"cjuw5c6gy004edhyf50boe6ed","_id":"cjuw5c6h1004pdhyfiswvos1z"},{"post_id":"cjuw5c6ga003adhyfr6fuwcnh","tag_id":"cjuw5c6ae001odhyfv0er1uuc","_id":"cjuw5c6h1004qdhyf3cjpj8o5"},{"post_id":"cjuw5c6gb003cdhyfze1raqis","tag_id":"cjuw5c69l0005dhyf8dw7rvdj","_id":"cjuw5c6h2004sdhyfjo001dnw"},{"post_id":"cjuw5c6gb003cdhyfze1raqis","tag_id":"cjuw5c6gz004hdhyf8p7hzndv","_id":"cjuw5c6h2004tdhyfjufncgg7"},{"post_id":"cjuw5c6gb003cdhyfze1raqis","tag_id":"cjuw5c6h0004kdhyflok8ll10","_id":"cjuw5c6h3004vdhyft2z9ravg"},{"post_id":"cjuw5c6gb003cdhyfze1raqis","tag_id":"cjuw5c6ae001odhyfv0er1uuc","_id":"cjuw5c6h3004wdhyfyz8wwbjm"},{"post_id":"cjuw5c6gd003fdhyffmae0td5","tag_id":"cjuw5c69l0005dhyf8dw7rvdj","_id":"cjuw5c6h3004ydhyf4ugoo9y9"},{"post_id":"cjuw5c6gd003fdhyffmae0td5","tag_id":"cjuw5c6h1004odhyfm9vmgisa","_id":"cjuw5c6h4004zdhyftetlsx1z"},{"post_id":"cjuw5c6gd003fdhyffmae0td5","tag_id":"cjuw5c6ae001odhyfv0er1uuc","_id":"cjuw5c6h40050dhyf22vau7s0"},{"post_id":"cjuw5c6gf003hdhyfm7x4jv32","tag_id":"cjuw5c69l0005dhyf8dw7rvdj","_id":"cjuw5c6h50052dhyfajyi59cj"},{"post_id":"cjuw5c6gf003hdhyfm7x4jv32","tag_id":"cjuw5c6h1004rdhyfpexx86af","_id":"cjuw5c6h50053dhyf6l1634rc"},{"post_id":"cjuw5c6gf003hdhyfm7x4jv32","tag_id":"cjuw5c6h2004udhyfg0fsffs7","_id":"cjuw5c6h60055dhyff10zu7y1"},{"post_id":"cjuw5c6gf003hdhyfm7x4jv32","tag_id":"cjuw5c6h3004xdhyfjq85x596","_id":"cjuw5c6h60056dhyf3agtpyzq"},{"post_id":"cjuw5c6gf003hdhyfm7x4jv32","tag_id":"cjuw5c6ae001odhyfv0er1uuc","_id":"cjuw5c6h70058dhyfp5zvrwvv"},{"post_id":"cjuw5c6gj003kdhyfu5efkt5f","tag_id":"cjuw5c69l0005dhyf8dw7rvdj","_id":"cjuw5c6h80059dhyfl967mtda"},{"post_id":"cjuw5c6gj003kdhyfu5efkt5f","tag_id":"cjuw5c6gu0042dhyfphn0ds37","_id":"cjuw5c6h9005bdhyfklh7pcup"},{"post_id":"cjuw5c6gj003kdhyfu5efkt5f","tag_id":"cjuw5c6gv0045dhyf9jma3qmw","_id":"cjuw5c6h9005cdhyfk1t45lkh"},{"post_id":"cjuw5c6gj003kdhyfu5efkt5f","tag_id":"cjuw5c6ac001cdhyfskbo7mex","_id":"cjuw5c6h9005edhyf4uool1nc"},{"post_id":"cjuw5c6gj003kdhyfu5efkt5f","tag_id":"cjuw5c6ae001odhyfv0er1uuc","_id":"cjuw5c6h9005fdhyf1qa8xr2v"},{"post_id":"cjuw5c6gl003ndhyfw73o6nfv","tag_id":"cjuw5c69l0005dhyf8dw7rvdj","_id":"cjuw5c6ha005hdhyfc1z92ak1"},{"post_id":"cjuw5c6gl003ndhyfw73o6nfv","tag_id":"cjuw5c6am002vdhyfz8zwblx1","_id":"cjuw5c6ha005idhyfapbrmrbz"},{"post_id":"cjuw5c6gl003ndhyfw73o6nfv","tag_id":"cjuw5c6h60057dhyfmd2na816","_id":"cjuw5c6ha005jdhyf4s5ypxf3"},{"post_id":"cjuw5c6gl003ndhyfw73o6nfv","tag_id":"cjuw5c6ae001odhyfv0er1uuc","_id":"cjuw5c6hc005ldhyfh82km1pk"},{"post_id":"cjuw5c6gn003rdhyffderc9bm","tag_id":"cjuw5c6h8005adhyf1ns6qzzd","_id":"cjuw5c6hd005mdhyf044u6qzt"},{"post_id":"cjuw5c6gn003rdhyffderc9bm","tag_id":"cjuw5c6h9005ddhyfjb2ht5on","_id":"cjuw5c6he005odhyff76uyoxn"},{"post_id":"cjuw5c6gn003rdhyffderc9bm","tag_id":"cjuw5c6ha005gdhyfye3gp9de","_id":"cjuw5c6hf005pdhyf8og589bo"},{"post_id":"cjuw5c6gp003udhyfxgaccm26","tag_id":"cjuw5c69l0005dhyf8dw7rvdj","_id":"cjuw5c6hf005rdhyfy4z726qo"},{"post_id":"cjuw5c6gp003udhyfxgaccm26","tag_id":"cjuw5c6hb005kdhyforrmzx1w","_id":"cjuw5c6hg005sdhyfrc9xc094"},{"post_id":"cjuw5c6gp003udhyfxgaccm26","tag_id":"cjuw5c6hd005ndhyfuae4628c","_id":"cjuw5c6hg005udhyfc37p0fuv"},{"post_id":"cjuw5c6gr003xdhyf5qoa8r4s","tag_id":"cjuw5c6hf005qdhyfx3kvn9ns","_id":"cjuw5c6hi005wdhyfdcc4oayc"},{"post_id":"cjuw5c6gr003xdhyf5qoa8r4s","tag_id":"cjuw5c6hg005tdhyfbhgdcwmt","_id":"cjuw5c6hj005xdhyf0j60uql6"},{"post_id":"cjuw5c6gr003xdhyf5qoa8r4s","tag_id":"cjuw5c6hh005vdhyfvfiql2yd","_id":"cjuw5c6hj005ydhyftyudac9f"},{"post_id":"cjuw5c6id005zdhyfjdlvh2jw","tag_id":"cjuw5c69l0005dhyf8dw7rvdj","_id":"cjuw5c6if0063dhyfsm894bg4"},{"post_id":"cjuw5c6id005zdhyfjdlvh2jw","tag_id":"cjuw5c6if0060dhyfq4xrfxzd","_id":"cjuw5c6if0064dhyfnvgvvhl6"},{"post_id":"cjuw5c6id005zdhyfjdlvh2jw","tag_id":"cjuw5c6if0062dhyfo1fxn48g","_id":"cjuw5c6if0065dhyfcj4eqy76"},{"post_id":"cjuw5c6id005zdhyfjdlvh2jw","tag_id":"cjuw5c6ae001odhyfv0er1uuc","_id":"cjuw5c6ig0066dhyfxaaa2muj"}],"Tag":[{"name":"Python","_id":"cjuw5c69l0005dhyf8dw7rvdj"},{"name":"Divide and Conquer","_id":"cjuw5c69q000adhyfn6h2va4e"},{"name":"Dynamic Programming","_id":"cjuw5c69y000fdhyf51off8i1"},{"name":"stack","_id":"cjuw5c6a6000sdhyfsiy6t585"},{"name":"蓄水池抽样","_id":"cjuw5c6aa0013dhyfs35glmce"},{"name":"Bitwise Operation","_id":"cjuw5c6ab0017dhyfzfwol5c6"},{"name":"duck typing","_id":"cjuw5c6ac001cdhyfskbo7mex"},{"name":"protocal","_id":"cjuw5c6ad001hdhyfz80rvtk3"},{"name":"abstract basic class","_id":"cjuw5c6ad001kdhyfkgux4rpr"},{"name":"ABC","_id":"cjuw5c6ae001mdhyfelkdccbl"},{"name":"fluent python","_id":"cjuw5c6ae001odhyfv0er1uuc"},{"name":"interfaces","_id":"cjuw5c6ae001pdhyfcqi7mrba"},{"name":"Operator Overloading","_id":"cjuw5c6ae001qdhyfx77vztp9"},{"name":"sequence","_id":"cjuw5c6af001wdhyft0k1yien"},{"name":"inheritance","_id":"cjuw5c6ah0022dhyficst1dpi"},{"name":"multiple inheritance","_id":"cjuw5c6ah0025dhyfc5b5viow"},{"name":"mro","_id":"cjuw5c6ah0028dhyf12tzbhsq"},{"name":"magic method","_id":"cjuw5c6ai002adhyfab3mt2yu"},{"name":"flag","_id":"cjuw5c6aj002gdhyfwkckmqml"},{"name":"software","_id":"cjuw5c6ak002jdhyf860yf09x"},{"name":"crack","_id":"cjuw5c6ak002mdhyfz1pzac1y"},{"name":"jetbrains","_id":"cjuw5c6al002odhyfaix4vsgf"},{"name":"ubuntu","_id":"cjuw5c6al002pdhyfl7xl6u24"},{"name":"vps","_id":"cjuw5c6al002sdhyf5bc4cr1b"},{"name":"tcp-bbr","_id":"cjuw5c6am002udhyfa4qa78q4"},{"name":"design pattern","_id":"cjuw5c6am002vdhyfz8zwblx1"},{"name":"The Command pattern","_id":"cjuw5c6an002ydhyfxaj5ism0"},{"name":"爬虫","_id":"cjuw5c6g80038dhyfsv6bppbp"},{"name":"bilibili","_id":"cjuw5c6gc003edhyf0zg2cjkm"},{"name":"Iterable","_id":"cjuw5c6gi003jdhyfg7gv0ivv"},{"name":"Iterator","_id":"cjuw5c6gn003qdhyf97agrc12"},{"name":"Generator","_id":"cjuw5c6gr003wdhyf3z9l27ut"},{"name":"对象","_id":"cjuw5c6gu0042dhyfphn0ds37"},{"name":"pythonic","_id":"cjuw5c6gv0045dhyf9jma3qmw"},{"name":"slicing","_id":"cjuw5c6gw0049dhyf31lge8dm"},{"name":"reduce","_id":"cjuw5c6gw004adhyfkjc1afeq"},{"name":"dict","_id":"cjuw5c6gw004bdhyfmrm1vca0"},{"name":"set","_id":"cjuw5c6gy004edhyf50boe6ed"},{"name":"bytes","_id":"cjuw5c6gz004hdhyf8p7hzndv"},{"name":"unicode","_id":"cjuw5c6h0004kdhyflok8ll10"},{"name":"functional","_id":"cjuw5c6h1004odhyfm9vmgisa"},{"name":"对象引用","_id":"cjuw5c6h1004rdhyfpexx86af"},{"name":"垃圾回收","_id":"cjuw5c6h2004udhyfg0fsffs7"},{"name":"Mutability","_id":"cjuw5c6h3004xdhyfjq85x596"},{"name":"The Strategy pattern","_id":"cjuw5c6h60057dhyfmd2na816"},{"name":"http","_id":"cjuw5c6h8005adhyf1ns6qzzd"},{"name":"socket","_id":"cjuw5c6h9005ddhyfjb2ht5on"},{"name":"网络是怎样连接的","_id":"cjuw5c6ha005gdhyfye3gp9de"},{"name":"scrapy","_id":"cjuw5c6hb005kdhyforrmzx1w"},{"name":"crawler","_id":"cjuw5c6hd005ndhyfuae4628c"},{"name":"Python Tricks","_id":"cjuw5c6hf005qdhyfx3kvn9ns"},{"name":"Syntactic sugar","_id":"cjuw5c6hg005tdhyfbhgdcwmt"},{"name":"语法糖","_id":"cjuw5c6hh005vdhyfvfiql2yd"},{"name":"decorator","_id":"cjuw5c6if0060dhyfq4xrfxzd"},{"name":"closure","_id":"cjuw5c6if0062dhyfo1fxn48g"}]}}